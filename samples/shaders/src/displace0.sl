/* Generated by meShaderEd */

#define DISPLACEMENT_SHADER displace0
displacement displace0 (
float IDbubbly0_Kd = 0.200;
float IDbubbly0_mult = 5.000;
float IDbubbly0_Nzscale = 1.000;
float IDbubbly0_bubsize = 1.000;
)
{
normal N_N = normal(0.000,0.000,0.000);
point P_P = point(0.000,0.000,0.000);
point IDbubbly0_outP = point(0.000,0.000,0.000);
normal IDbubbly0_outN = normal(0.000,0.000,0.000);

	  #ifdef SURFACE_SHADER
	  P_P = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  P_P = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  P_P = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  P_P = Pv;
	  #endif
	  
	#ifdef SURFACE_SHADER
	  N_N = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  N_N = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  N_N = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  N_N = Nv;
	  #endif
	
	  normal IDbubbly0_Nn = normalize(N_N);
    float IDbubbly0_a, IDbubbly0_b, IDbubbly0_c, IDbubbly0_bub;
    float IDbubbly0_dist, IDbubbly0_shortest=10000;
    
    point IDbubbly0_Po = transform( "object", P_P ) * IDbubbly0_mult;
  
    /* true cell center, surrounding cell centers, noised cell center */
    point IDbubbly0_trucell, IDbubbly0_surrcell, IDbubbly0_nzcell;
    vector IDbubbly0_offset;
    
    setxcomp ( IDbubbly0_trucell, floor ( xcomp ( IDbubbly0_Po ) ) + .5 );
    setycomp ( IDbubbly0_trucell ,floor ( ycomp ( IDbubbly0_Po ) ) + .5 );
    setzcomp ( IDbubbly0_trucell, floor ( zcomp ( IDbubbly0_Po ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( IDbubbly0_a = -1 ; IDbubbly0_a <= 1 ; IDbubbly0_a += 1 ) 
    {
      for ( IDbubbly0_b = -1 ; IDbubbly0_b <= 1 ; IDbubbly0_b += 1 )
      {
        for ( IDbubbly0_c = -1 ; IDbubbly0_c <= 1 ; IDbubbly0_c += 1 )
        {
        	IDbubbly0_offset = vector ( IDbubbly0_a, IDbubbly0_b, IDbubbly0_c );
        	IDbubbly0_surrcell = IDbubbly0_trucell + IDbubbly0_offset;
        	IDbubbly0_nzcell = IDbubbly0_surrcell + ( ( vector cellnoise ( IDbubbly0_surrcell ) - .5) * IDbubbly0_Nzscale );
        	IDbubbly0_dist = distance ( IDbubbly0_Po, IDbubbly0_nzcell );
        	if ( IDbubbly0_dist < IDbubbly0_shortest ) 
        	  IDbubbly0_shortest = IDbubbly0_dist;
        }
      }
    }
    IDbubbly0_bub = clamp ( IDbubbly0_shortest, 0, IDbubbly0_bubsize ) / IDbubbly0_bubsize; 
    P_P += IDbubbly0_Nn * ( pow ( IDbubbly0_bub, 2 ) - 1 ) * IDbubbly0_Kd;
    N_N = calculatenormal ( P_P );
          
	  IDbubbly0_outP = P_P; 
	  IDbubbly0_outN = N_N;
	  
	  P = IDbubbly0_outP; 
	  N = IDbubbly0_outN;
	
}
