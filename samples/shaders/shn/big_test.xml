<!DOCTYPE big_test>
<nodenet author="meShaderEd" name="big_test">
 <help>Short NodeNetwork description</help>
 <nodes>
  <node type="image" author="mesh" id="1" name="imageSelector" label="imageSelector">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="186" y="-276"/>
  </node>
  <node type="rib" author="mesh" id="2" name="BasicCylinder" label="BasicCylinder0">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="35" y="-204"/>
  </node>
  <node type="displacement" author="mesh" id="3" name="displace" label="displace">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="-124" y="-228"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="4" name="IDbubbly" label="IDbubbly">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="-241" y="-211"/>
  </node>
  <node type="variable" author="mesh" id="5" name="P" label="P">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-383" y="-188"/>
  </node>
  <node type="variable" author="mesh" id="6" name="N" label="N">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-386" y="-113"/>
  </node>
  <node type="image" author="mesh" id="7" name="imageSelector" label="imageSelector0">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="191" y="-38"/>
  </node>
  <node type="rib" author="mesh" id="8" name="BasicCylinder" label="BasicCylinder00">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="40" y="34"/>
  </node>
  <node type="displacement" author="mesh" id="9" name="displace" label="displace0">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="-118" y="10"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="10" name="IDbubbly" label="IDbubbly0">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="-235" y="27"/>
  </node>
  <node type="variable" author="mesh" id="11" name="P" label="P0">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-378" y="50"/>
  </node>
  <node type="variable" author="mesh" id="12" name="N" label="N0">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-381" y="125"/>
  </node>
  <node type="image" author="mesh" id="13" name="imageSelector" label="imageSelector1">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="416" y="128"/>
  </node>
  <node type="rib" author="mesh" id="14" name="BasicCylinder" label="BasicCylinder01">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="197" y="216"/>
  </node>
  <node type="displacement" author="mesh" id="15" name="displace" label="displace1">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="38" y="192"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="16" name="IDbubbly" label="IDbubbly1">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="-78" y="209"/>
  </node>
  <node type="variable" author="mesh" id="17" name="P" label="P1">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-220" y="232"/>
  </node>
  <node type="variable" author="mesh" id="18" name="N" label="N1">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-223" y="307"/>
  </node>
  <node type="image" author="mesh" id="19" name="imageSelector" label="imageSelector2">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="432" y="369"/>
  </node>
  <node type="rib" author="mesh" id="20" name="BasicCylinder" label="BasicCylinder02">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="266" y="455"/>
  </node>
  <node type="displacement" author="mesh" id="21" name="displace" label="displace2">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="122" y="462"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="22" name="IDbubbly" label="IDbubbly2">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="-38" y="417"/>
  </node>
  <node type="variable" author="mesh" id="23" name="P" label="P2">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-267" y="449"/>
  </node>
  <node type="variable" author="mesh" id="24" name="N" label="N2">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-265" y="548"/>
  </node>
  <node type="image" author="mesh" id="31" name="imageSelector" label="imageSelector00">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="440" y="592"/>
  </node>
  <node type="rib" author="mesh" id="32" name="BasicCylinder" label="BasicCylinder000">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="267" y="600"/>
  </node>
  <node type="displacement" author="mesh" id="33" name="displace" label="displace00">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="118" y="586"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="34" name="IDbubbly" label="IDbubbly00">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="-52" y="612"/>
  </node>
  <node type="image" author="mesh" id="35" name="imageSelector" label="imageSelector3">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="404" y="797"/>
  </node>
  <node type="rib" author="mesh" id="36" name="BasicCylinder" label="BasicCylinder03">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="238" y="883"/>
  </node>
  <node type="displacement" author="mesh" id="37" name="displace" label="displace3">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="94" y="890"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="38" name="IDbubbly" label="IDbubbly3">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="-66" y="845"/>
  </node>
  <node type="variable" author="mesh" id="39" name="P" label="P3">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-295" y="877"/>
  </node>
  <node type="variable" author="mesh" id="40" name="N" label="N3">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-293" y="976"/>
  </node>
  <node type="image" author="mesh" id="47" name="imageSelector" label="imageSelector01">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="412" y="1020"/>
  </node>
  <node type="rib" author="mesh" id="48" name="BasicCylinder" label="BasicCylinder001">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="239" y="1028"/>
  </node>
  <node type="displacement" author="mesh" id="49" name="displace" label="displace01">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="90" y="1014"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="50" name="IDbubbly" label="IDbubbly01">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="-80" y="1040"/>
  </node>
  <node type="image" author="mesh" id="51" name="imageSelector" label="imageSelector4">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="498" y="1241"/>
  </node>
  <node type="rib" author="mesh" id="52" name="BasicCylinder" label="BasicCylinder04">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="332" y="1327"/>
  </node>
  <node type="displacement" author="mesh" id="53" name="displace" label="displace4">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="188" y="1334"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="54" name="IDbubbly" label="IDbubbly4">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="27" y="1289"/>
  </node>
  <node type="variable" author="mesh" id="55" name="P" label="P4">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-201" y="1321"/>
  </node>
  <node type="variable" author="mesh" id="56" name="N" label="N4">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-199" y="1420"/>
  </node>
  <node type="image" author="mesh" id="63" name="imageSelector" label="imageSelector02">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="506" y="1464"/>
  </node>
  <node type="rib" author="mesh" id="64" name="BasicCylinder" label="BasicCylinder002">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="333" y="1472"/>
  </node>
  <node type="displacement" author="mesh" id="65" name="displace" label="displace02">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="184" y="1458"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="66" name="IDbubbly" label="IDbubbly02">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="13" y="1484"/>
  </node>
  <node type="image" author="mesh" id="67" name="imageViewer" label="imageViewer">
   <help>Single image viewer </help>
   <input/>
   <output/>
   <internal/>
   <include/>
   <offset x="653" y="-4"/>
  </node>
  <node type="rib" author="mesh" id="68" name="BasicPlane" label="BasicPlane">
   <help>Basic plane primitive preview RIB</help>
   <input/>
   <output/>
   <internal/>
   <include/>
   <offset x="650" y="81"/>
  </node>
  <node type="rib" author="mesh" id="69" name="ensemble" label="ensemble">
   <help>Ensemble</help>
   <input>
    <property default="" type="surface" value="" name="surface" label="surface"/>
    <property default="" type="displacement" value="" name="displacement" label="displacement"/>
    <property default="" type="volume" value="" name="volume" label="volume"/>
    <property default="" type="light" value="" name="light" label="light"/>
    <property default="" type="rib" value="" name="rib" label="rib"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="RIB" label="RIB"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  Ci = $(Ci) * $(Oi); 
	  Oi = $(Oi);
	  ]]></code>
   <offset x="1290" y="228"/>
  </node>
  <node type="image" author="mesh" id="70" name="imageSelector" label="imageSelector5">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1282" y="405"/>
  </node>
  <node type="rib" author="mesh" id="71" name="BasicCylinder" label="BasicCylinder05">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1120" y="399"/>
  </node>
  <node type="displacement" author="mesh" id="72" name="displace" label="displace5">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="961" y="401"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="73" name="IDbubbly" label="IDbubbly5">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="795" y="387"/>
  </node>
  <node type="variable" author="mesh" id="74" name="P" label="P5">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="595" y="419"/>
  </node>
  <node type="variable" author="mesh" id="75" name="N" label="N5">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="599" y="498"/>
  </node>
  <node type="rib" author="mesh" id="76" name="ensemble" label="ensemble0">
   <help>Ensemble</help>
   <input>
    <property default="" type="surface" value="" name="surface" label="surface"/>
    <property default="" type="displacement" value="" name="displacement" label="displacement"/>
    <property default="" type="volume" value="" name="volume" label="volume"/>
    <property default="" type="light" value="" name="light" label="light"/>
    <property default="" type="rib" value="" name="rib" label="rib"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="RIB" label="RIB"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  Ci = $(Ci) * $(Oi); 
	  Oi = $(Oi);
	  ]]></code>
   <offset x="1304" y="587"/>
  </node>
  <node type="image" author="mesh" id="77" name="imageSelector" label="imageSelector6">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1296" y="764"/>
  </node>
  <node type="rib" author="mesh" id="78" name="BasicCylinder" label="BasicCylinder06">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1134" y="758"/>
  </node>
  <node type="displacement" author="mesh" id="79" name="displace" label="displace6">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="975" y="760"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="80" name="IDbubbly" label="IDbubbly6">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="809" y="746"/>
  </node>
  <node type="variable" author="mesh" id="81" name="P" label="P6">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="609" y="778"/>
  </node>
  <node type="variable" author="mesh" id="82" name="N" label="N6">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="613" y="857"/>
  </node>
  <node type="image" author="mesh" id="83" name="imageSelector" label="imageSelector7">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1320" y="987"/>
  </node>
  <node type="rib" author="mesh" id="84" name="BasicCylinder" label="BasicCylinder07">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1154" y="1073"/>
  </node>
  <node type="displacement" author="mesh" id="85" name="displace" label="displace7">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1010" y="1080"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="86" name="IDbubbly" label="IDbubbly7">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="849" y="1035"/>
  </node>
  <node type="variable" author="mesh" id="87" name="P" label="P7">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="620" y="1067"/>
  </node>
  <node type="variable" author="mesh" id="88" name="N" label="N7">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="622" y="1166"/>
  </node>
  <node type="image" author="mesh" id="95" name="imageSelector" label="imageSelector03">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1328" y="1210"/>
  </node>
  <node type="rib" author="mesh" id="96" name="BasicCylinder" label="BasicCylinder003">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1155" y="1218"/>
  </node>
  <node type="displacement" author="mesh" id="97" name="displace" label="displace03">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1006" y="1204"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="98" name="IDbubbly" label="IDbubbly03">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="835" y="1230"/>
  </node>
  <node type="image" author="mesh" id="99" name="imageSelector" label="imageSelector8">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1360" y="1420"/>
  </node>
  <node type="rib" author="mesh" id="100" name="BasicCylinder" label="BasicCylinder08">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1194" y="1506"/>
  </node>
  <node type="displacement" author="mesh" id="101" name="displace" label="displace8">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1050" y="1513"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="102" name="IDbubbly" label="IDbubbly8">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="889" y="1468"/>
  </node>
  <node type="variable" author="mesh" id="103" name="P" label="P8">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="660" y="1500"/>
  </node>
  <node type="variable" author="mesh" id="104" name="N" label="N8">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="662" y="1599"/>
  </node>
  <node type="image" author="mesh" id="111" name="imageSelector" label="imageSelector04">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1368" y="1643"/>
  </node>
  <node type="rib" author="mesh" id="112" name="BasicCylinder" label="BasicCylinder004">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1195" y="1651"/>
  </node>
  <node type="displacement" author="mesh" id="113" name="displace" label="displace04">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1046" y="1637"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="114" name="IDbubbly" label="IDbubbly04">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="875" y="1663"/>
  </node>
  <node type="image" author="mesh" id="115" name="imageSelector" label="imageSelector9">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1593" y="-115"/>
  </node>
  <node type="rib" author="mesh" id="116" name="BasicCylinder" label="BasicCylinder09">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1427" y="-29"/>
  </node>
  <node type="displacement" author="mesh" id="117" name="displace" label="displace9">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1283" y="-22"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="118" name="IDbubbly" label="IDbubbly9">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1122" y="-67"/>
  </node>
  <node type="variable" author="mesh" id="119" name="P" label="P9">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="893" y="-35"/>
  </node>
  <node type="variable" author="mesh" id="120" name="N" label="N9">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="895" y="64"/>
  </node>
  <node type="image" author="mesh" id="127" name="imageSelector" label="imageSelector05">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1601" y="108"/>
  </node>
  <node type="rib" author="mesh" id="128" name="BasicCylinder" label="BasicCylinder005">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1428" y="116"/>
  </node>
  <node type="displacement" author="mesh" id="129" name="displace" label="displace05">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1279" y="102"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="130" name="IDbubbly" label="IDbubbly05">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1108" y="128"/>
  </node>
  <node type="image" author="mesh" id="131" name="imageSelector" label="imageSelector10">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1099" y="-491"/>
  </node>
  <node type="rib" author="mesh" id="132" name="BasicCylinder" label="BasicCylinder010">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="933" y="-405"/>
  </node>
  <node type="displacement" author="mesh" id="133" name="displace" label="displace10">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="789" y="-398"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="134" name="IDbubbly" label="IDbubbly10">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="628" y="-443"/>
  </node>
  <node type="variable" author="mesh" id="135" name="P" label="P10">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="399" y="-411"/>
  </node>
  <node type="variable" author="mesh" id="136" name="N" label="N10">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="401" y="-312"/>
  </node>
  <node type="image" author="mesh" id="143" name="imageSelector" label="imageSelector06">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1107" y="-268"/>
  </node>
  <node type="rib" author="mesh" id="144" name="BasicCylinder" label="BasicCylinder006">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="934" y="-260"/>
  </node>
  <node type="displacement" author="mesh" id="145" name="displace" label="displace06">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="785" y="-274"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="146" name="IDbubbly" label="IDbubbly06">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="614" y="-248"/>
  </node>
  <node type="image" author="mesh" id="147" name="imageSelector" label="imageSelector11">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1955" y="-489"/>
  </node>
  <node type="rib" author="mesh" id="148" name="BasicCylinder" label="BasicCylinder011">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1789" y="-403"/>
  </node>
  <node type="displacement" author="mesh" id="149" name="displace" label="displace11">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1645" y="-396"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="150" name="IDbubbly" label="IDbubbly11">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1484" y="-441"/>
  </node>
  <node type="variable" author="mesh" id="151" name="P" label="P11">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="1255" y="-409"/>
  </node>
  <node type="variable" author="mesh" id="152" name="N" label="N11">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="1257" y="-310"/>
  </node>
  <node type="image" author="mesh" id="159" name="imageSelector" label="imageSelector07">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1963" y="-266"/>
  </node>
  <node type="rib" author="mesh" id="160" name="BasicCylinder" label="BasicCylinder007">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1790" y="-258"/>
  </node>
  <node type="displacement" author="mesh" id="161" name="displace" label="displace07">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1641" y="-272"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="162" name="IDbubbly" label="IDbubbly07">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1470" y="-246"/>
  </node>
  <node type="image" author="mesh" id="163" name="imageSelector" label="imageSelector12">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2147" y="269"/>
  </node>
  <node type="rib" author="mesh" id="164" name="BasicCylinder" label="BasicCylinder012">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1981" y="355"/>
  </node>
  <node type="displacement" author="mesh" id="165" name="displace" label="displace12">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1837" y="362"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="166" name="IDbubbly" label="IDbubbly12">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1676" y="317"/>
  </node>
  <node type="variable" author="mesh" id="167" name="P" label="P12">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="1447" y="349"/>
  </node>
  <node type="variable" author="mesh" id="168" name="N" label="N12">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="1449" y="448"/>
  </node>
  <node type="image" author="mesh" id="175" name="imageSelector" label="imageSelector08">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2155" y="492"/>
  </node>
  <node type="rib" author="mesh" id="176" name="BasicCylinder" label="BasicCylinder008">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1982" y="500"/>
  </node>
  <node type="displacement" author="mesh" id="177" name="displace" label="displace08">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1833" y="486"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="178" name="IDbubbly" label="IDbubbly08">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1662" y="512"/>
  </node>
  <node type="image" author="mesh" id="179" name="imageSelector" label="imageSelector13">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2461" y="-105"/>
  </node>
  <node type="rib" author="mesh" id="180" name="BasicCylinder" label="BasicCylinder013">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="2295" y="-19"/>
  </node>
  <node type="displacement" author="mesh" id="181" name="displace" label="displace13">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="2151" y="-12"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="182" name="IDbubbly" label="IDbubbly13">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1990" y="-57"/>
  </node>
  <node type="variable" author="mesh" id="183" name="P" label="P13">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="1761" y="-25"/>
  </node>
  <node type="variable" author="mesh" id="184" name="N" label="N13">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="1763" y="74"/>
  </node>
  <node type="image" author="mesh" id="191" name="imageSelector" label="imageSelector09">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2469" y="118"/>
  </node>
  <node type="rib" author="mesh" id="192" name="BasicCylinder" label="BasicCylinder009">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="2296" y="126"/>
  </node>
  <node type="displacement" author="mesh" id="193" name="displace" label="displace09">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="2147" y="112"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="194" name="IDbubbly" label="IDbubbly09">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1976" y="138"/>
  </node>
  <node type="image" author="mesh" id="195" name="imageSelector" label="imageSelector14">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2451" y="607"/>
  </node>
  <node type="rib" author="mesh" id="196" name="BasicCylinder" label="BasicCylinder014">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="2285" y="693"/>
  </node>
  <node type="displacement" author="mesh" id="197" name="displace" label="displace14">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="2141" y="700"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="198" name="IDbubbly" label="IDbubbly14">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1980" y="655"/>
  </node>
  <node type="variable" author="mesh" id="199" name="P" label="P14">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="1751" y="687"/>
  </node>
  <node type="variable" author="mesh" id="200" name="N" label="N14">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="1753" y="786"/>
  </node>
  <node type="image" author="mesh" id="207" name="imageSelector" label="imageSelector010">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2459" y="830"/>
  </node>
  <node type="rib" author="mesh" id="208" name="BasicCylinder" label="BasicCylinder0010">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="2286" y="838"/>
  </node>
  <node type="displacement" author="mesh" id="209" name="displace" label="displace010">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="2137" y="824"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="210" name="IDbubbly" label="IDbubbly010">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1966" y="850"/>
  </node>
  <node type="image" author="mesh" id="211" name="imageSelector" label="imageSelector15">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2279" y="995"/>
  </node>
  <node type="rib" author="mesh" id="212" name="BasicCylinder" label="BasicCylinder015">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="2113" y="1081"/>
  </node>
  <node type="displacement" author="mesh" id="213" name="displace" label="displace15">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1969" y="1088"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="214" name="IDbubbly" label="IDbubbly15">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1808" y="1043"/>
  </node>
  <node type="variable" author="mesh" id="215" name="P" label="P15">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="1579" y="1075"/>
  </node>
  <node type="variable" author="mesh" id="216" name="N" label="N15">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="1581" y="1174"/>
  </node>
  <node type="image" author="mesh" id="223" name="imageSelector" label="imageSelector011">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2287" y="1218"/>
  </node>
  <node type="rib" author="mesh" id="224" name="BasicCylinder" label="BasicCylinder0011">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="2114" y="1226"/>
  </node>
  <node type="displacement" author="mesh" id="225" name="displace" label="displace011">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1965" y="1212"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="226" name="IDbubbly" label="IDbubbly011">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1794" y="1238"/>
  </node>
  <node type="image" author="mesh" id="227" name="imageSelector" label="imageSelector16">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2609" y="1357"/>
  </node>
  <node type="rib" author="mesh" id="228" name="BasicCylinder" label="BasicCylinder016">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="2443" y="1443"/>
  </node>
  <node type="displacement" author="mesh" id="229" name="displace" label="displace16">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="2299" y="1450"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="230" name="IDbubbly" label="IDbubbly16">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="2138" y="1405"/>
  </node>
  <node type="variable" author="mesh" id="231" name="P" label="P16">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="1909" y="1437"/>
  </node>
  <node type="variable" author="mesh" id="232" name="N" label="N16">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="1911" y="1536"/>
  </node>
  <node type="image" author="mesh" id="239" name="imageSelector" label="imageSelector012">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2617" y="1580"/>
  </node>
  <node type="rib" author="mesh" id="240" name="BasicCylinder" label="BasicCylinder0012">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="2444" y="1588"/>
  </node>
  <node type="displacement" author="mesh" id="241" name="displace" label="displace012">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="2295" y="1574"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="242" name="IDbubbly" label="IDbubbly012">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="2124" y="1600"/>
  </node>
  <node type="image" author="mesh" id="243" name="imageSelector" label="imageSelector17">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2319" y="1721"/>
  </node>
  <node type="rib" author="mesh" id="244" name="BasicCylinder" label="BasicCylinder017">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="2153" y="1807"/>
  </node>
  <node type="displacement" author="mesh" id="245" name="displace" label="displace17">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="2009" y="1814"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="246" name="IDbubbly" label="IDbubbly17">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1848" y="1769"/>
  </node>
  <node type="variable" author="mesh" id="247" name="P" label="P17">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="1619" y="1801"/>
  </node>
  <node type="variable" author="mesh" id="248" name="N" label="N17">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="1621" y="1900"/>
  </node>
  <node type="image" author="mesh" id="255" name="imageSelector" label="imageSelector013">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2327" y="1944"/>
  </node>
  <node type="rib" author="mesh" id="256" name="BasicCylinder" label="BasicCylinder0013">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="2154" y="1952"/>
  </node>
  <node type="displacement" author="mesh" id="257" name="displace" label="displace013">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="2005" y="1938"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="258" name="IDbubbly" label="IDbubbly013">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1834" y="1964"/>
  </node>
  <node type="image" author="mesh" id="259" name="imageSelector" label="imageSelector18">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1373" y="1849"/>
  </node>
  <node type="rib" author="mesh" id="260" name="BasicCylinder" label="BasicCylinder018">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1207" y="1935"/>
  </node>
  <node type="displacement" author="mesh" id="261" name="displace" label="displace18">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1063" y="1942"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="262" name="IDbubbly" label="IDbubbly18">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="902" y="1897"/>
  </node>
  <node type="variable" author="mesh" id="263" name="P" label="P18">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="673" y="1929"/>
  </node>
  <node type="variable" author="mesh" id="264" name="N" label="N18">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="675" y="2028"/>
  </node>
  <node type="image" author="mesh" id="271" name="imageSelector" label="imageSelector014">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1381" y="2072"/>
  </node>
  <node type="rib" author="mesh" id="272" name="BasicCylinder" label="BasicCylinder0014">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1208" y="2080"/>
  </node>
  <node type="displacement" author="mesh" id="273" name="displace" label="displace014">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1059" y="2066"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="274" name="IDbubbly" label="IDbubbly014">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="888" y="2092"/>
  </node>
  <node type="image" author="mesh" id="275" name="imageSelector" label="imageSelector19">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2821" y="2093"/>
  </node>
  <node type="rib" author="mesh" id="276" name="BasicCylinder" label="BasicCylinder019">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="2655" y="2179"/>
  </node>
  <node type="displacement" author="mesh" id="277" name="displace" label="displace19">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="2511" y="2186"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="278" name="IDbubbly" label="IDbubbly19">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="2350" y="2141"/>
  </node>
  <node type="variable" author="mesh" id="279" name="P" label="P19">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="2121" y="2173"/>
  </node>
  <node type="variable" author="mesh" id="280" name="N" label="N19">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="2123" y="2272"/>
  </node>
  <node type="image" author="mesh" id="287" name="imageSelector" label="imageSelector015">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2829" y="2316"/>
  </node>
  <node type="rib" author="mesh" id="288" name="BasicCylinder" label="BasicCylinder0015">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="2656" y="2324"/>
  </node>
  <node type="displacement" author="mesh" id="289" name="displace" label="displace015">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="2507" y="2310"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="290" name="IDbubbly" label="IDbubbly015">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="2336" y="2336"/>
  </node>
  <node type="image" author="mesh" id="291" name="imageSelector" label="imageSelector20">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2609" y="2469"/>
  </node>
  <node type="rib" author="mesh" id="292" name="BasicCylinder" label="BasicCylinder020">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="2443" y="2555"/>
  </node>
  <node type="displacement" author="mesh" id="293" name="displace" label="displace20">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="2299" y="2562"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="294" name="IDbubbly" label="IDbubbly20">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="2138" y="2517"/>
  </node>
  <node type="variable" author="mesh" id="295" name="P" label="P20">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="1909" y="2549"/>
  </node>
  <node type="variable" author="mesh" id="296" name="N" label="N20">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="1911" y="2648"/>
  </node>
  <node type="image" author="mesh" id="303" name="imageSelector" label="imageSelector016">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2617" y="2692"/>
  </node>
  <node type="rib" author="mesh" id="304" name="BasicCylinder" label="BasicCylinder0016">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="2444" y="2700"/>
  </node>
  <node type="displacement" author="mesh" id="305" name="displace" label="displace016">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="2295" y="2686"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="306" name="IDbubbly" label="IDbubbly016">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="2124" y="2712"/>
  </node>
  <node type="image" author="mesh" id="307" name="imageSelector" label="imageSelector21">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1681" y="2231"/>
  </node>
  <node type="rib" author="mesh" id="308" name="BasicCylinder" label="BasicCylinder021">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1515" y="2317"/>
  </node>
  <node type="displacement" author="mesh" id="309" name="displace" label="displace21">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1371" y="2324"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="310" name="IDbubbly" label="IDbubbly21">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1210" y="2279"/>
  </node>
  <node type="variable" author="mesh" id="311" name="P" label="P21">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="981" y="2311"/>
  </node>
  <node type="variable" author="mesh" id="312" name="N" label="N21">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="983" y="2410"/>
  </node>
  <node type="image" author="mesh" id="319" name="imageSelector" label="imageSelector017">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1689" y="2454"/>
  </node>
  <node type="rib" author="mesh" id="320" name="BasicCylinder" label="BasicCylinder0017">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1516" y="2462"/>
  </node>
  <node type="displacement" author="mesh" id="321" name="displace" label="displace017">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1367" y="2448"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="322" name="IDbubbly" label="IDbubbly017">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1196" y="2474"/>
  </node>
  <node type="image" author="mesh" id="323" name="imageSelector" label="imageSelector22">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1177" y="2661"/>
  </node>
  <node type="rib" author="mesh" id="324" name="BasicCylinder" label="BasicCylinder022">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1011" y="2747"/>
  </node>
  <node type="displacement" author="mesh" id="325" name="displace" label="displace22">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="867" y="2754"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="326" name="IDbubbly" label="IDbubbly22">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="706" y="2709"/>
  </node>
  <node type="variable" author="mesh" id="327" name="P" label="P22">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="477" y="2741"/>
  </node>
  <node type="variable" author="mesh" id="328" name="N" label="N22">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="479" y="2840"/>
  </node>
  <node type="image" author="mesh" id="335" name="imageSelector" label="imageSelector018">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="1185" y="2884"/>
  </node>
  <node type="rib" author="mesh" id="336" name="BasicCylinder" label="BasicCylinder0018">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="1012" y="2892"/>
  </node>
  <node type="displacement" author="mesh" id="337" name="displace" label="displace018">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="863" y="2878"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="338" name="IDbubbly" label="IDbubbly018">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="692" y="2904"/>
  </node>
  <node type="image" author="mesh" id="339" name="imageSelector" label="imageSelector23">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="388" y="1688"/>
  </node>
  <node type="rib" author="mesh" id="340" name="BasicCylinder" label="BasicCylinder023">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="222" y="1774"/>
  </node>
  <node type="displacement" author="mesh" id="341" name="displace" label="displace23">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="78" y="1781"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="342" name="IDbubbly" label="IDbubbly23">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="-82" y="1736"/>
  </node>
  <node type="variable" author="mesh" id="343" name="P" label="P23">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-311" y="1768"/>
  </node>
  <node type="variable" author="mesh" id="344" name="N" label="N23">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-309" y="1867"/>
  </node>
  <node type="image" author="mesh" id="351" name="imageSelector" label="imageSelector019">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="396" y="1911"/>
  </node>
  <node type="rib" author="mesh" id="352" name="BasicCylinder" label="BasicCylinder0019">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="223" y="1919"/>
  </node>
  <node type="displacement" author="mesh" id="353" name="displace" label="displace019">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="74" y="1905"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="354" name="IDbubbly" label="IDbubbly019">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="-96" y="1931"/>
  </node>
  <node type="image" author="mesh" id="355" name="imageSelector" label="imageSelector24">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="594" y="2158"/>
  </node>
  <node type="rib" author="mesh" id="356" name="BasicCylinder" label="BasicCylinder024">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="428" y="2244"/>
  </node>
  <node type="displacement" author="mesh" id="357" name="displace" label="displace24">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="284" y="2251"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="358" name="IDbubbly" label="IDbubbly24">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="123" y="2206"/>
  </node>
  <node type="variable" author="mesh" id="359" name="P" label="P24">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-105" y="2238"/>
  </node>
  <node type="variable" author="mesh" id="360" name="N" label="N24">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-103" y="2337"/>
  </node>
  <node type="image" author="mesh" id="367" name="imageSelector" label="imageSelector020">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="602" y="2381"/>
  </node>
  <node type="rib" author="mesh" id="368" name="BasicCylinder" label="BasicCylinder0020">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="429" y="2389"/>
  </node>
  <node type="displacement" author="mesh" id="369" name="displace" label="displace020">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="280" y="2375"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="370" name="IDbubbly" label="IDbubbly020">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="109" y="2401"/>
  </node>
  <node type="image" author="mesh" id="371" name="imageSelector" label="imageSelector25">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="345" y="2579"/>
  </node>
  <node type="rib" author="mesh" id="372" name="BasicCylinder" label="BasicCylinder025">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="194" y="2651"/>
  </node>
  <node type="displacement" author="mesh" id="373" name="displace" label="displace25">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="35" y="2627"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="374" name="IDbubbly" label="IDbubbly25">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="-81" y="2644"/>
  </node>
  <node type="variable" author="mesh" id="375" name="P" label="P25">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-223" y="2667"/>
  </node>
  <node type="variable" author="mesh" id="376" name="N" label="N25">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-226" y="2742"/>
  </node>
  <node type="rib" author="mesh" id="377" name="ensemble" label="ensemble1">
   <help>Ensemble</help>
   <input>
    <property default="" type="surface" value="" name="surface" label="surface"/>
    <property default="" type="displacement" value="" name="displacement" label="displacement"/>
    <property default="" type="volume" value="" name="volume" label="volume"/>
    <property default="" type="light" value="" name="light" label="light"/>
    <property default="" type="rib" value="" name="rib" label="rib"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="RIB" label="RIB"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  Ci = $(Ci) * $(Oi); 
	  Oi = $(Oi);
	  ]]></code>
   <offset x="2316" y="2818"/>
  </node>
  <node type="image" author="mesh" id="378" name="imageSelector" label="imageSelector26">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="2308" y="2995"/>
  </node>
  <node type="rib" author="mesh" id="379" name="BasicCylinder" label="BasicCylinder026">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="2146" y="2989"/>
  </node>
  <node type="displacement" author="mesh" id="380" name="displace" label="displace26">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="1987" y="2991"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="381" name="IDbubbly" label="IDbubbly26">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="1821" y="2977"/>
  </node>
  <node type="variable" author="mesh" id="382" name="P" label="P26">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="1621" y="3009"/>
  </node>
  <node type="variable" author="mesh" id="383" name="N" label="N26">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="1625" y="3088"/>
  </node>
  <node type="image" author="mesh" id="384" name="imageSelector" label="imageSelector27">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="324" y="2816"/>
  </node>
  <node type="rib" author="mesh" id="385" name="BasicCylinder" label="BasicCylinder027">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="173" y="2888"/>
  </node>
  <node type="displacement" author="mesh" id="386" name="displace" label="displace27">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="14" y="2864"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="387" name="IDbubbly" label="IDbubbly27">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="-102" y="2881"/>
  </node>
  <node type="variable" author="mesh" id="388" name="P" label="P27">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-244" y="2904"/>
  </node>
  <node type="variable" author="mesh" id="389" name="N" label="N27">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-247" y="2979"/>
  </node>
  <node type="image" author="mesh" id="390" name="imageSelector" label="imageSelector28">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="505" y="2995"/>
  </node>
  <node type="rib" author="mesh" id="391" name="BasicCylinder" label="BasicCylinder028">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="354" y="3067"/>
  </node>
  <node type="displacement" author="mesh" id="392" name="displace" label="displace28">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="195" y="3043"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="393" name="IDbubbly" label="IDbubbly28">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="78" y="3060"/>
  </node>
  <node type="variable" author="mesh" id="394" name="P" label="P28">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-63" y="3083"/>
  </node>
  <node type="variable" author="mesh" id="395" name="N" label="N28">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-66" y="3158"/>
  </node>
  <node type="image" author="mesh" id="396" name="imageSelector" label="imageSelector29">
   <help>Image viewer with additional inputs</help>
   <input>
    <property provider="attribute" default="" range="image:image1:image2:image3:image4:image5:image6:image7" subtype="selector" type="string" value="image1" name="selector" label="Select image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image1" label="image1"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image2" label="image2"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image3" label="image3"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image4" label="image4"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image5" label="image5"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image6" label="image6"/>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image7" label="image7"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'selector' ).value == 'image': self.imageName = self.getInputParamValueByName ( 'image' ) 
if self.getInputParamByName ( 'selector' ).value == 'image1': self.imageName = self.getInputParamValueByName ( 'image1' ) 
if self.getInputParamByName ( 'selector' ).value == 'image2': self.imageName = self.getInputParamValueByName ( 'image2' ) 
if self.getInputParamByName ( 'selector' ).value == 'image3': self.imageName = self.getInputParamValueByName ( 'image3' )
if self.getInputParamByName ( 'selector' ).value == 'image4': self.imageName = self.getInputParamValueByName ( 'image4' ) 
if self.getInputParamByName ( 'selector' ).value == 'image5': self.imageName = self.getInputParamValueByName ( 'image5' )
if self.getInputParamByName ( 'selector' ).value == 'image6': self.imageName = self.getInputParamValueByName ( 'image6' )
if self.getInputParamByName ( 'selector' ).value == 'image7': self.imageName = self.getInputParamValueByName ( 'image7' )


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="985" y="3169"/>
  </node>
  <node type="rib" author="mesh" id="397" name="BasicCylinder" label="BasicCylinder029">
   <help>Basic cylinder primitive preview RIB</help>
   <input>
    <property provider="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property provider="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property provider="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Cylinder 1 -0.5 0.5 360
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="834" y="3241"/>
  </node>
  <node type="displacement" author="mesh" id="398" name="displace" label="displace29">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="675" y="3217"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="399" name="IDbubbly" label="IDbubbly29">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" shaderParam="1" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" shaderParam="1" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="558" y="3234"/>
  </node>
  <node type="variable" author="mesh" id="400" name="P" label="P29">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="416" y="3257"/>
  </node>
  <node type="variable" author="mesh" id="401" name="N" label="N29">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="413" y="3332"/>
  </node>
 </nodes>
 <links>
  <link srcNode_id="178" dstNode_id="177" id="514" srcParam="outP" dstParam="P"/>
  <link srcNode_id="72" dstNode_id="71" id="3" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="73" dstNode_id="72" id="4" srcParam="outN" dstParam="N"/>
  <link srcNode_id="75" dstNode_id="73" id="5" srcParam="N" dstParam="N"/>
  <link srcNode_id="72" dstNode_id="71" id="6" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="74" dstNode_id="73" id="7" srcParam="P" dstParam="P"/>
  <link srcNode_id="73" dstNode_id="72" id="8" srcParam="outP" dstParam="P"/>
  <link srcNode_id="71" dstNode_id="70" id="9" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="359" dstNode_id="358" id="1623" srcParam="P" dstParam="P"/>
  <link srcNode_id="79" dstNode_id="78" id="12" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="80" dstNode_id="79" id="13" srcParam="outN" dstParam="N"/>
  <link srcNode_id="82" dstNode_id="80" id="14" srcParam="N" dstParam="N"/>
  <link srcNode_id="79" dstNode_id="78" id="15" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="81" dstNode_id="80" id="16" srcParam="P" dstParam="P"/>
  <link srcNode_id="80" dstNode_id="79" id="17" srcParam="outP" dstParam="P"/>
  <link srcNode_id="78" dstNode_id="77" id="18" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="176" dstNode_id="175" id="515" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="369" dstNode_id="356" id="1710" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="86" dstNode_id="85" id="22" srcParam="outN" dstParam="N"/>
  <link srcNode_id="88" dstNode_id="86" id="23" srcParam="N" dstParam="N"/>
  <link srcNode_id="87" dstNode_id="86" id="25" srcParam="P" dstParam="P"/>
  <link srcNode_id="86" dstNode_id="85" id="26" srcParam="outP" dstParam="P"/>
  <link srcNode_id="84" dstNode_id="83" id="27" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="257" dstNode_id="244" id="1052" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="247" dstNode_id="258" id="1029" srcParam="P" dstParam="P"/>
  <link srcNode_id="262" dstNode_id="261" id="1056" srcParam="outN" dstParam="N"/>
  <link srcNode_id="264" dstNode_id="262" id="1057" srcParam="N" dstParam="N"/>
  <link srcNode_id="3" dstNode_id="2" id="34" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="263" dstNode_id="262" id="1059" srcParam="P" dstParam="P"/>
  <link srcNode_id="262" dstNode_id="261" id="1060" srcParam="outP" dstParam="P"/>
  <link srcNode_id="199" dstNode_id="198" id="683" srcParam="P" dstParam="P"/>
  <link srcNode_id="10" dstNode_id="9" id="38" srcParam="outN" dstParam="N"/>
  <link srcNode_id="12" dstNode_id="10" id="39" srcParam="N" dstParam="N"/>
  <link srcNode_id="98" dstNode_id="97" id="40" srcParam="outN" dstParam="N"/>
  <link srcNode_id="11" dstNode_id="10" id="41" srcParam="P" dstParam="P"/>
  <link srcNode_id="10" dstNode_id="9" id="42" srcParam="outP" dstParam="P"/>
  <link srcNode_id="8" dstNode_id="7" id="43" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="98" dstNode_id="97" id="44" srcParam="outP" dstParam="P"/>
  <link srcNode_id="96" dstNode_id="95" id="45" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="167" dstNode_id="178" id="559" srcParam="P" dstParam="P"/>
  <link srcNode_id="168" dstNode_id="178" id="560" srcParam="N" dstParam="N"/>
  <link srcNode_id="354" dstNode_id="353" id="1544" srcParam="outN" dstParam="N"/>
  <link srcNode_id="274" dstNode_id="273" id="1074" srcParam="outN" dstParam="N"/>
  <link srcNode_id="231" dstNode_id="230" id="871" srcParam="P" dstParam="P"/>
  <link srcNode_id="274" dstNode_id="273" id="1078" srcParam="outP" dstParam="P"/>
  <link srcNode_id="215" dstNode_id="214" id="777" srcParam="P" dstParam="P"/>
  <link srcNode_id="343" dstNode_id="354" id="1593" srcParam="P" dstParam="P"/>
  <link srcNode_id="344" dstNode_id="354" id="1594" srcParam="N" dstParam="N"/>
  <link srcNode_id="401" dstNode_id="399" id="1826" srcParam="N" dstParam="N"/>
  <link srcNode_id="375" dstNode_id="374" id="1717" srcParam="P" dstParam="P"/>
  <link srcNode_id="389" dstNode_id="387" id="1758" srcParam="N" dstParam="N"/>
  <link srcNode_id="212" dstNode_id="211" id="779" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="9" dstNode_id="8" id="68" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="177" dstNode_id="164" id="582" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="261" dstNode_id="272" id="1121" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="16" dstNode_id="15" id="72" srcParam="outN" dstParam="N"/>
  <link srcNode_id="18" dstNode_id="16" id="73" srcParam="N" dstParam="N"/>
  <link srcNode_id="182" dstNode_id="181" id="586" srcParam="outN" dstParam="N"/>
  <link srcNode_id="17" dstNode_id="16" id="75" srcParam="P" dstParam="P"/>
  <link srcNode_id="16" dstNode_id="15" id="76" srcParam="outP" dstParam="P"/>
  <link srcNode_id="14" dstNode_id="13" id="77" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="182" dstNode_id="181" id="590" srcParam="outP" dstParam="P"/>
  <link srcNode_id="180" dstNode_id="179" id="591" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="353" dstNode_id="340" id="1616" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="358" dstNode_id="357" id="1620" srcParam="outN" dstParam="N"/>
  <link srcNode_id="360" dstNode_id="358" id="1621" srcParam="N" dstParam="N"/>
  <link srcNode_id="85" dstNode_id="96" id="87" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="358" dstNode_id="357" id="1624" srcParam="outP" dstParam="P"/>
  <link srcNode_id="87" dstNode_id="98" id="89" srcParam="P" dstParam="P"/>
  <link srcNode_id="88" dstNode_id="98" id="90" srcParam="N" dstParam="N"/>
  <link srcNode_id="194" dstNode_id="193" id="604" srcParam="outN" dstParam="N"/>
  <link srcNode_id="194" dstNode_id="193" id="608" srcParam="outP" dstParam="P"/>
  <link srcNode_id="192" dstNode_id="191" id="609" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="263" dstNode_id="274" id="1123" srcParam="P" dstParam="P"/>
  <link srcNode_id="264" dstNode_id="274" id="1124" srcParam="N" dstParam="N"/>
  <link srcNode_id="370" dstNode_id="369" id="1638" srcParam="outN" dstParam="N"/>
  <link srcNode_id="15" dstNode_id="14" id="102" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="22" dstNode_id="21" id="106" srcParam="outN" dstParam="N"/>
  <link srcNode_id="24" dstNode_id="22" id="107" srcParam="N" dstParam="N"/>
  <link srcNode_id="23" dstNode_id="22" id="109" srcParam="P" dstParam="P"/>
  <link srcNode_id="22" dstNode_id="21" id="110" srcParam="outP" dstParam="P"/>
  <link srcNode_id="20" dstNode_id="19" id="111" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="97" dstNode_id="84" id="112" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="392" dstNode_id="391" id="1821" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="102" dstNode_id="101" id="116" srcParam="outN" dstParam="N"/>
  <link srcNode_id="104" dstNode_id="102" id="117" srcParam="N" dstParam="N"/>
  <link srcNode_id="103" dstNode_id="102" id="119" srcParam="P" dstParam="P"/>
  <link srcNode_id="102" dstNode_id="101" id="120" srcParam="outP" dstParam="P"/>
  <link srcNode_id="100" dstNode_id="99" id="121" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="273" dstNode_id="260" id="1146" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="277" dstNode_id="288" id="1215" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="34" dstNode_id="33" id="124" srcParam="outN" dstParam="N"/>
  <link srcNode_id="260" dstNode_id="259" id="1061" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="278" dstNode_id="277" id="1150" srcParam="outN" dstParam="N"/>
  <link srcNode_id="280" dstNode_id="278" id="1151" srcParam="N" dstParam="N"/>
  <link srcNode_id="34" dstNode_id="33" id="128" srcParam="outP" dstParam="P"/>
  <link srcNode_id="32" dstNode_id="31" id="129" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="245" dstNode_id="256" id="1027" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="276" dstNode_id="275" id="1155" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="114" dstNode_id="113" id="134" srcParam="outN" dstParam="N"/>
  <link srcNode_id="114" dstNode_id="113" id="138" srcParam="outP" dstParam="P"/>
  <link srcNode_id="112" dstNode_id="111" id="139" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="183" dstNode_id="194" id="653" srcParam="P" dstParam="P"/>
  <link srcNode_id="184" dstNode_id="194" id="654" srcParam="N" dstParam="N"/>
  <link srcNode_id="290" dstNode_id="289" id="1168" srcParam="outN" dstParam="N"/>
  <link srcNode_id="248" dstNode_id="246" id="963" srcParam="N" dstParam="N"/>
  <link srcNode_id="290" dstNode_id="289" id="1172" srcParam="outP" dstParam="P"/>
  <link srcNode_id="288" dstNode_id="287" id="1173" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="359" dstNode_id="370" id="1687" srcParam="P" dstParam="P"/>
  <link srcNode_id="360" dstNode_id="370" id="1688" srcParam="N" dstParam="N"/>
  <link srcNode_id="387" dstNode_id="386" id="1761" srcParam="outP" dstParam="P"/>
  <link srcNode_id="393" dstNode_id="392" id="1791" srcParam="outN" dstParam="N"/>
  <link srcNode_id="193" dstNode_id="180" id="676" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="370" dstNode_id="369" id="1642" srcParam="outP" dstParam="P"/>
  <link srcNode_id="356" dstNode_id="355" id="1625" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="198" dstNode_id="197" id="680" srcParam="outN" dstParam="N"/>
  <link srcNode_id="200" dstNode_id="198" id="681" srcParam="N" dstParam="N"/>
  <link srcNode_id="21" dstNode_id="32" id="171" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="198" dstNode_id="197" id="684" srcParam="outP" dstParam="P"/>
  <link srcNode_id="23" dstNode_id="34" id="173" srcParam="P" dstParam="P"/>
  <link srcNode_id="24" dstNode_id="34" id="174" srcParam="N" dstParam="N"/>
  <link srcNode_id="293" dstNode_id="304" id="1309" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="374" dstNode_id="373" id="1714" srcParam="outN" dstParam="N"/>
  <link srcNode_id="376" dstNode_id="374" id="1715" srcParam="N" dstParam="N"/>
  <link srcNode_id="101" dstNode_id="112" id="181" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="374" dstNode_id="373" id="1718" srcParam="outP" dstParam="P"/>
  <link srcNode_id="103" dstNode_id="114" id="183" srcParam="P" dstParam="P"/>
  <link srcNode_id="104" dstNode_id="114" id="184" srcParam="N" dstParam="N"/>
  <link srcNode_id="210" dstNode_id="209" id="698" srcParam="outN" dstParam="N"/>
  <link srcNode_id="210" dstNode_id="209" id="702" srcParam="outP" dstParam="P"/>
  <link srcNode_id="208" dstNode_id="207" id="703" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="279" dstNode_id="290" id="1217" srcParam="P" dstParam="P"/>
  <link srcNode_id="280" dstNode_id="290" id="1218" srcParam="N" dstParam="N"/>
  <link srcNode_id="368" dstNode_id="367" id="1643" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="33" dstNode_id="20" id="196" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="38" dstNode_id="37" id="200" srcParam="outN" dstParam="N"/>
  <link srcNode_id="40" dstNode_id="38" id="201" srcParam="N" dstParam="N"/>
  <link srcNode_id="39" dstNode_id="38" id="203" srcParam="P" dstParam="P"/>
  <link srcNode_id="38" dstNode_id="37" id="204" srcParam="outP" dstParam="P"/>
  <link srcNode_id="36" dstNode_id="35" id="205" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="113" dstNode_id="100" id="206" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="373" dstNode_id="372" id="1744" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="118" dstNode_id="117" id="210" srcParam="outN" dstParam="N"/>
  <link srcNode_id="120" dstNode_id="118" id="211" srcParam="N" dstParam="N"/>
  <link srcNode_id="381" dstNode_id="380" id="1748" srcParam="outN" dstParam="N"/>
  <link srcNode_id="119" dstNode_id="118" id="213" srcParam="P" dstParam="P"/>
  <link srcNode_id="118" dstNode_id="117" id="214" srcParam="outP" dstParam="P"/>
  <link srcNode_id="116" dstNode_id="115" id="215" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="289" dstNode_id="276" id="1240" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="379" dstNode_id="378" id="1753" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="50" dstNode_id="49" id="218" srcParam="outN" dstParam="N"/>
  <link srcNode_id="294" dstNode_id="293" id="1244" srcParam="outN" dstParam="N"/>
  <link srcNode_id="228" dstNode_id="227" id="873" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="50" dstNode_id="49" id="222" srcParam="outP" dstParam="P"/>
  <link srcNode_id="48" dstNode_id="47" id="223" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="294" dstNode_id="293" id="1248" srcParam="outP" dstParam="P"/>
  <link srcNode_id="292" dstNode_id="291" id="1249" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="385" dstNode_id="384" id="1762" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="309" dstNode_id="320" id="1403" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="130" dstNode_id="129" id="228" srcParam="outN" dstParam="N"/>
  <link srcNode_id="397" dstNode_id="396" id="1830" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="130" dstNode_id="129" id="232" srcParam="outP" dstParam="P"/>
  <link srcNode_id="128" dstNode_id="127" id="233" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="199" dstNode_id="210" id="747" srcParam="P" dstParam="P"/>
  <link srcNode_id="200" dstNode_id="210" id="748" srcParam="N" dstParam="N"/>
  <link srcNode_id="306" dstNode_id="305" id="1262" srcParam="outN" dstParam="N"/>
  <link srcNode_id="306" dstNode_id="305" id="1266" srcParam="outP" dstParam="P"/>
  <link srcNode_id="304" dstNode_id="303" id="1267" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="380" dstNode_id="379" id="1747" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="386" dstNode_id="385" id="1787" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="383" dstNode_id="381" id="1749" srcParam="N" dstParam="N"/>
  <link srcNode_id="395" dstNode_id="393" id="1792" srcParam="N" dstParam="N"/>
  <link srcNode_id="209" dstNode_id="196" id="770" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="393" dstNode_id="392" id="1795" srcParam="outP" dstParam="P"/>
  <link srcNode_id="391" dstNode_id="390" id="1796" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="380" dstNode_id="379" id="1750" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="214" dstNode_id="213" id="774" srcParam="outN" dstParam="N"/>
  <link srcNode_id="216" dstNode_id="214" id="775" srcParam="N" dstParam="N"/>
  <link srcNode_id="37" dstNode_id="48" id="265" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="214" dstNode_id="213" id="778" srcParam="outP" dstParam="P"/>
  <link srcNode_id="39" dstNode_id="50" id="267" srcParam="P" dstParam="P"/>
  <link srcNode_id="40" dstNode_id="50" id="268" srcParam="N" dstParam="N"/>
  <link srcNode_id="278" dstNode_id="277" id="1154" srcParam="outP" dstParam="P"/>
  <link srcNode_id="165" dstNode_id="176" id="557" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="381" dstNode_id="380" id="1752" srcParam="outP" dstParam="P"/>
  <link srcNode_id="117" dstNode_id="128" id="275" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="119" dstNode_id="130" id="277" srcParam="P" dstParam="P"/>
  <link srcNode_id="120" dstNode_id="130" id="278" srcParam="N" dstParam="N"/>
  <link srcNode_id="325" dstNode_id="336" id="1497" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="226" dstNode_id="225" id="792" srcParam="outN" dstParam="N"/>
  <link srcNode_id="226" dstNode_id="225" id="796" srcParam="outP" dstParam="P"/>
  <link srcNode_id="224" dstNode_id="223" id="797" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="183" dstNode_id="182" id="589" srcParam="P" dstParam="P"/>
  <link srcNode_id="295" dstNode_id="306" id="1311" srcParam="P" dstParam="P"/>
  <link srcNode_id="296" dstNode_id="306" id="1312" srcParam="N" dstParam="N"/>
  <link srcNode_id="399" dstNode_id="398" id="1825" srcParam="outN" dstParam="N"/>
  <link srcNode_id="49" dstNode_id="36" id="290" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="400" dstNode_id="399" id="1828" srcParam="P" dstParam="P"/>
  <link srcNode_id="399" dstNode_id="398" id="1829" srcParam="outP" dstParam="P"/>
  <link srcNode_id="54" dstNode_id="53" id="294" srcParam="outN" dstParam="N"/>
  <link srcNode_id="56" dstNode_id="54" id="295" srcParam="N" dstParam="N"/>
  <link srcNode_id="55" dstNode_id="54" id="297" srcParam="P" dstParam="P"/>
  <link srcNode_id="54" dstNode_id="53" id="298" srcParam="outP" dstParam="P"/>
  <link srcNode_id="52" dstNode_id="51" id="299" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="129" dstNode_id="116" id="300" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="296" dstNode_id="294" id="1245" srcParam="N" dstParam="N"/>
  <link srcNode_id="134" dstNode_id="133" id="304" srcParam="outN" dstParam="N"/>
  <link srcNode_id="136" dstNode_id="134" id="305" srcParam="N" dstParam="N"/>
  <link srcNode_id="135" dstNode_id="134" id="307" srcParam="P" dstParam="P"/>
  <link srcNode_id="134" dstNode_id="133" id="308" srcParam="outP" dstParam="P"/>
  <link srcNode_id="132" dstNode_id="131" id="309" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="305" dstNode_id="292" id="1334" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="66" dstNode_id="65" id="312" srcParam="outN" dstParam="N"/>
  <link srcNode_id="310" dstNode_id="309" id="1338" srcParam="outN" dstParam="N"/>
  <link srcNode_id="295" dstNode_id="294" id="1247" srcParam="P" dstParam="P"/>
  <link srcNode_id="66" dstNode_id="65" id="316" srcParam="outP" dstParam="P"/>
  <link srcNode_id="64" dstNode_id="63" id="317" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="310" dstNode_id="309" id="1342" srcParam="outP" dstParam="P"/>
  <link srcNode_id="308" dstNode_id="307" id="1343" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="388" dstNode_id="387" id="1760" srcParam="P" dstParam="P"/>
  <link srcNode_id="146" dstNode_id="145" id="322" srcParam="outN" dstParam="N"/>
  <link srcNode_id="181" dstNode_id="192" id="651" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="146" dstNode_id="145" id="326" srcParam="outP" dstParam="P"/>
  <link srcNode_id="144" dstNode_id="143" id="327" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="279" dstNode_id="278" id="1153" srcParam="P" dstParam="P"/>
  <link srcNode_id="215" dstNode_id="226" id="841" srcParam="P" dstParam="P"/>
  <link srcNode_id="216" dstNode_id="226" id="842" srcParam="N" dstParam="N"/>
  <link srcNode_id="272" dstNode_id="271" id="1079" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="322" dstNode_id="321" id="1356" srcParam="outN" dstParam="N"/>
  <link srcNode_id="341" dstNode_id="352" id="1591" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="322" dstNode_id="321" id="1360" srcParam="outP" dstParam="P"/>
  <link srcNode_id="320" dstNode_id="319" id="1361" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="248" dstNode_id="258" id="1030" srcParam="N" dstParam="N"/>
  <link srcNode_id="387" dstNode_id="386" id="1757" srcParam="outN" dstParam="N"/>
  <link srcNode_id="225" dstNode_id="212" id="864" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="312" dstNode_id="310" id="1339" srcParam="N" dstParam="N"/>
  <link srcNode_id="230" dstNode_id="229" id="868" srcParam="outN" dstParam="N"/>
  <link srcNode_id="232" dstNode_id="230" id="869" srcParam="N" dstParam="N"/>
  <link srcNode_id="53" dstNode_id="64" id="359" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="230" dstNode_id="229" id="872" srcParam="outP" dstParam="P"/>
  <link srcNode_id="55" dstNode_id="66" id="361" srcParam="P" dstParam="P"/>
  <link srcNode_id="56" dstNode_id="66" id="362" srcParam="N" dstParam="N"/>
  <link srcNode_id="382" dstNode_id="381" id="1751" srcParam="P" dstParam="P"/>
  <link srcNode_id="311" dstNode_id="310" id="1341" srcParam="P" dstParam="P"/>
  <link srcNode_id="133" dstNode_id="144" id="369" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="135" dstNode_id="146" id="371" srcParam="P" dstParam="P"/>
  <link srcNode_id="136" dstNode_id="146" id="372" srcParam="N" dstParam="N"/>
  <link srcNode_id="242" dstNode_id="241" id="886" srcParam="outN" dstParam="N"/>
  <link srcNode_id="197" dstNode_id="208" id="745" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="242" dstNode_id="241" id="890" srcParam="outP" dstParam="P"/>
  <link srcNode_id="240" dstNode_id="239" id="891" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="311" dstNode_id="322" id="1405" srcParam="P" dstParam="P"/>
  <link srcNode_id="312" dstNode_id="322" id="1406" srcParam="N" dstParam="N"/>
  <link srcNode_id="357" dstNode_id="368" id="1685" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="65" dstNode_id="52" id="384" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="145" dstNode_id="132" id="394" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="150" dstNode_id="149" id="398" srcParam="outN" dstParam="N"/>
  <link srcNode_id="152" dstNode_id="150" id="399" srcParam="N" dstParam="N"/>
  <link srcNode_id="151" dstNode_id="150" id="401" srcParam="P" dstParam="P"/>
  <link srcNode_id="150" dstNode_id="149" id="402" srcParam="outP" dstParam="P"/>
  <link srcNode_id="148" dstNode_id="147" id="403" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="321" dstNode_id="308" id="1428" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="326" dstNode_id="325" id="1432" srcParam="outN" dstParam="N"/>
  <link srcNode_id="328" dstNode_id="326" id="1433" srcParam="N" dstParam="N"/>
  <link srcNode_id="327" dstNode_id="326" id="1435" srcParam="P" dstParam="P"/>
  <link srcNode_id="326" dstNode_id="325" id="1436" srcParam="outP" dstParam="P"/>
  <link srcNode_id="324" dstNode_id="323" id="1437" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="354" dstNode_id="353" id="1548" srcParam="outP" dstParam="P"/>
  <link srcNode_id="162" dstNode_id="161" id="416" srcParam="outN" dstParam="N"/>
  <link srcNode_id="398" dstNode_id="397" id="1855" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="162" dstNode_id="161" id="420" srcParam="outP" dstParam="P"/>
  <link srcNode_id="160" dstNode_id="159" id="421" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="231" dstNode_id="242" id="935" srcParam="P" dstParam="P"/>
  <link srcNode_id="232" dstNode_id="242" id="936" srcParam="N" dstParam="N"/>
  <link srcNode_id="338" dstNode_id="337" id="1450" srcParam="outN" dstParam="N"/>
  <link srcNode_id="213" dstNode_id="224" id="839" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="372" dstNode_id="371" id="1719" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="338" dstNode_id="337" id="1454" srcParam="outP" dstParam="P"/>
  <link srcNode_id="336" dstNode_id="335" id="1455" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="352" dstNode_id="351" id="1549" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="241" dstNode_id="228" id="958" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="246" dstNode_id="245" id="962" srcParam="outN" dstParam="N"/>
  <link srcNode_id="184" dstNode_id="182" id="587" srcParam="N" dstParam="N"/>
  <link srcNode_id="247" dstNode_id="246" id="965" srcParam="P" dstParam="P"/>
  <link srcNode_id="246" dstNode_id="245" id="966" srcParam="outP" dstParam="P"/>
  <link srcNode_id="244" dstNode_id="243" id="967" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="149" dstNode_id="160" id="463" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="151" dstNode_id="162" id="465" srcParam="P" dstParam="P"/>
  <link srcNode_id="152" dstNode_id="162" id="466" srcParam="N" dstParam="N"/>
  <link srcNode_id="258" dstNode_id="257" id="980" srcParam="outN" dstParam="N"/>
  <link srcNode_id="258" dstNode_id="257" id="984" srcParam="outP" dstParam="P"/>
  <link srcNode_id="256" dstNode_id="255" id="985" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="327" dstNode_id="338" id="1499" srcParam="P" dstParam="P"/>
  <link srcNode_id="328" dstNode_id="338" id="1500" srcParam="N" dstParam="N"/>
  <link srcNode_id="229" dstNode_id="240" id="933" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="196" dstNode_id="195" id="685" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="161" dstNode_id="148" id="488" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="166" dstNode_id="165" id="492" srcParam="outN" dstParam="N"/>
  <link srcNode_id="168" dstNode_id="166" id="493" srcParam="N" dstParam="N"/>
  <link srcNode_id="167" dstNode_id="166" id="495" srcParam="P" dstParam="P"/>
  <link srcNode_id="166" dstNode_id="165" id="496" srcParam="outP" dstParam="P"/>
  <link srcNode_id="164" dstNode_id="163" id="497" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="337" dstNode_id="324" id="1522" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="394" dstNode_id="393" id="1794" srcParam="P" dstParam="P"/>
  <link srcNode_id="342" dstNode_id="341" id="1526" srcParam="outN" dstParam="N"/>
  <link srcNode_id="344" dstNode_id="342" id="1527" srcParam="N" dstParam="N"/>
  <link srcNode_id="343" dstNode_id="342" id="1529" srcParam="P" dstParam="P"/>
  <link srcNode_id="342" dstNode_id="341" id="1530" srcParam="outP" dstParam="P"/>
  <link srcNode_id="340" dstNode_id="339" id="1531" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="178" dstNode_id="177" id="510" srcParam="outN" dstParam="N"/>
 </links>
</nodenet>
