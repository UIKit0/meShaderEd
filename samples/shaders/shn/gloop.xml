<!DOCTYPE gloop>
<nodenet author="meShaderEd" name="gloop">
 <help>Short NodeNetwork description</help>
 <nodes>
  <node type="image" author="mesh" id="13" name="imageViewer" label="imageViewer">
   <help>Single image viewer </help>
   <input>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label
self.imageName = self.getInputParamValueByName ( 'image' ) 


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="348" y="-167"/>
  </node>
  <node type="rib" author="mesh" id="14" name="BasicSphere" label="BasicSphere">
   <help>Basic sphere primitive preview RIB</help>
   <input>
    <property detail="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property detail="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property detail="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property detail="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property detail="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="attribute" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property detail="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property detail="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property detail="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property detail="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Sphere 1.0 -1.0 1.0 360 
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="133" y="-201"/>
  </node>
  <node type="displacement" author="mesh" id="15" name="displace" label="IDgloop_disp">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="-70" y="-97"/>
  </node>
  <node type="variable" author="mesh" id="17" name="P" label="P">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-392" y="-84"/>
  </node>
  <node type="variable" author="mesh" id="18" name="N" label="N">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-396" y="10"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="19" name="IDgloop" label="IDgloop">
   <help>IDgloop displacement shader demostrating non-linear displacement in PRMan</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,1.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="object" type="string" value="object" name="space" label="space"/>
    <property default="0.200" range="0 1 0.001" subtype="slider" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.200" range="0 1 0.001" subtype="slider" type="float" value="0.200" name="mag" label="mag"/>
    <property default="5.000" range="0 100 0.01" subtype="slider" type="float" value="5.000" name="freq" label="freq"/>
    <property default="20.000" range="0 64 1" subtype="slider" type="float" value="20.000" name="numsteps" label="numsteps"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="overdist"/>
    <variable name="stepsize"/>
    <variable name="Psh"/>
    <variable name="sys"/>
    <variable name="dPduN"/>
    <variable name="dPdvN"/>
    <variable name="Pou"/>
    <variable name="Pov"/>
    <variable name="nz"/>
    <variable name="nzou"/>
    <variable name="nzov"/>
    <variable name="chu"/>
    <variable name="chv"/>
    <variable name="DdPdu"/>
    <variable name="DdPdv"/>
    <variable name="step"/>
    <variable name="i"/>
   </internal>
   <include/>
   <code><![CDATA[
	  
		vector $(overdist) = 0.1;
		vector $(stepsize) = $(mag) / $(freq);
		
		string $(sys) = $(space);
		
		if ( $(space) == "" ) $(sys) = "object";  
		
		point  $(Psh) = transform ( $(sys), $(P) ) * $(freq);
		vector $(dPduN) = normalize ( vtransform ( $(sys), dPdu ) );
		vector $(dPdvN) = normalize ( vtransform ( $(sys), dPdv ) );

		point  $(Pou) = $(Psh) + ( $(dPduN) * $(overdist) );
		point  $(Pov) = $(Psh) + ( $(dPdvN) * $(overdist) );

		float  $(nz) = noise ( $(Psh) ) - 0.5;
		float  $(nzou) = noise ( $(Pou) ) - 0.5;
		float  $(nzov) = noise ( $(Pov) ) - 0.5;

		float  $(chu) = ( $(nz) - $(nzou) );
		float  $(chv) = ( $(nz) - $(nzov) );

		vector $(DdPdu) = $(dPduN);
		vector $(DdPdv) = $(dPdvN);

		vector $(step) = $(DdPdu) ^ $(DdPdv);

		float  $(i);
		for ( $(i) = 1 ; $(i) < $(numsteps) ; $(i) += 1 )
		{
			$(P) -= vtransform ( $(sys), "current", $(step) ) * $(nz) * $(stepsize);
			$(DdPdu) = normalize ( $(DdPdu) + ( $(step) * $(chu) ) );
			$(DdPdv) = normalize ( $(DdPdv) + ( $(step) * $(chv) ) );
		  $(step) = $(DdPdu) ^ $(DdPdv);
		}
		normal $(Nn) = normalize ( $(N) );
    $(P) += $(Nn) * $(Kd) * (-1); 
    $(N) = normalize ( calculatenormal( $(P) ) );
         
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="-229" y="-108"/>
  </node>
 </nodes>
 <links>
  <link srcNode_id="14" dstNode_id="13" id="1" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="15" dstNode_id="14" id="2" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="17" dstNode_id="19" id="7" srcParam="P" dstParam="P"/>
  <link srcNode_id="18" dstNode_id="19" id="8" srcParam="N" dstParam="N"/>
  <link srcNode_id="19" dstNode_id="15" id="9" srcParam="outP" dstParam="P"/>
  <link srcNode_id="19" dstNode_id="15" id="10" srcParam="outN" dstParam="N"/>
 </links>
</nodenet>
