<!DOCTYPE IDbubbly>
<nodenet author="meShaderEd" name="IDbubbly">
 <help>Short NodeNetwork description</help>
 <nodes>
  <node type="image" author="mesh" id="1" name="imageViewer" label="imageViewer">
   <help>Single image viewer </help>
   <input>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" type="image" value="" name="image" label="image"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label
self.imageName = self.getInputParamValueByName ( 'image' ) 


]]></param_code>
   <code><![CDATA[]]></code>
   <offset x="347" y="-155"/>
  </node>
  <node type="rib" author="mesh" id="2" name="BasicSphere" label="BasicSphere">
   <help>Basic sphere primitive preview RIB</help>
   <input>
    <property detail="attribute" default="0" type="int" value="256" name="Width" label="Image width"/>
    <property detail="attribute" default="0" type="int" value="256" name="Height" label="Image height"/>
    <property detail="attribute" default="0.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property detail="attribute" default="0" type="int" value="4" name="Samples" label="Samples"/>
    <property detail="attribute" default="" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="attribute" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property detail="attribute" default="0.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property detail="attribute" default="0.000" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property detail="attribute" default="0.000 0.000 0.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property detail="attribute" default="0.000 0.000 0.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property default="" type="displacement" value="null" name="FG_disp" label="FG_disp"/>
    <property default="" type="surface" value="defaultsurface" name="FG_surf" label="FG_surf"/>
    <property default="" type="surface" value="liquidchecker" name="BG_surf" label="BG_surf"/>
   </input>
   <output>
    <property default="" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}"

  Option "user" "float traceBreadthFactor" [1]
  Option "user" "float traceDepthFactor" [1]
  Option "trace" "int maxdepth" 4
  Option "trace" "float specularthreshold" [10]
  Option "trace" "int continuationbydefault" [1]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [1]
  Attribute "trace" "int maxspeculardepth" [4]

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Hider "hidden" "int jitter" [1]
  Format $(Width) $(Height) 1.0
  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.2 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [1.35]

    AttributeBegin 
      Rotate 60 1 0 0

      Color [$(Color)]
      Opacity [$(Opacity)]

      Displacement "$(FG_disp)"
      Surface "$(FG_surf)" 
      
      Sphere 1.0 -1.0 1.0 360 
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      Surface "$(BG_surf)" 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="172" y="-168"/>
  </node>
  <node type="displacement" author="mesh" id="3" name="displace" label="displace">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="" type="displacement" value="${NODELABEL}" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="21" y="-105"/>
  </node>
  <node type="rsl_code" author="Ivan DeWolf" id="4" name="IDbubbly" label="IDbubbly">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.000" type="float" value="0.200" name="Kd" label="Kd"/>
    <property default="0.000" type="float" value="5.000" name="mult" label="mult"/>
    <property default="0.000" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="0.000" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="-131" y="-79"/>
  </node>
  <node type="variable" author="mesh" id="5" name="P" label="P">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-294" y="-65"/>
  </node>
  <node type="variable" author="mesh" id="6" name="N" label="N">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-292" y="16"/>
  </node>
 </nodes>
 <links>
  <link srcNode_id="2" dstNode_id="1" id="1" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="3" dstNode_id="2" id="2" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="4" dstNode_id="3" id="3" srcParam="outP" dstParam="P"/>
  <link srcNode_id="4" dstNode_id="3" id="4" srcParam="outN" dstParam="N"/>
  <link srcNode_id="5" dstNode_id="4" id="5" srcParam="P" dstParam="P"/>
  <link srcNode_id="6" dstNode_id="4" id="6" srcParam="N" dstParam="N"/>
 </links>
</nodenet>
