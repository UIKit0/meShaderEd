<!DOCTYPE lights_02>
<nodenet author="meShaderEd" name="lights_02">
 <help>Short NodeNetwork description</help>
 <nodes>
  <node icon="" type="image" author="mesh" id="1" name="imageViewer" label="imageViewer">
   <help>Single image viewer </help>
   <input>
    <property space="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" subtype="file" type="image" value="" name="image" label="image"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label
self.imageName = self.getInputParamValueByName ( 'image' ) 


]]></param_code>
   <offset x="241" y="-203"/>
  </node>
  <node icon="" type="rib" author="mesh" id="2" name="BasicPrimitive2" label="BasicPrimitive2">
   <help>Basic primitive preview RIB with custom lights and volume shaders</help>
   <input>
    <property default="" type="rib" value="" name="Globals" label="Render Options"/>
    <property space="Sphere:Teapot:Cylinder:Torus:Plane" provider="attribute" default="Sphere" range="Sphere:Teapot:Cylinder:Torus:Plane" subtype="selector" type="string" value="Teapot" name="Primitive" label="Primitive"/>
    <property space="tiff:framebuffer:it" provider="attribute" default="tiff" range="tiff:framebuffer:it" subtype="selector" type="string" value="tiff" name="DisplayDriver" label="Display Driver"/>
    <property provider="attribute" default="256" type="int" value="256" name="Width" label="Image width"/>
    <property provider="attribute" default="256" type="int" value="256" name="Height" label="Image height"/>
    <property default="LightSource &quot;distantlight&quot; 1 &quot;intensity&quot; 1.0 &quot;from&quot; [-2 2 -3] &quot;to&quot; [0 0 0]" type="rib" value="LightSource &quot;distantlight&quot; 1 &quot;intensity&quot; 1.0 &quot;from&quot; [-2 2 -3] &quot;to&quot; [0 0 0]" name="LightSource" label="LightSource"/>
    <property provider="attribute" default="0.000 0.000 1.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="1.000 1.000 1.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property provider="attribute" default="0.500" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property default="Displacement &quot;null&quot;" type="rib" value="Displacement &quot;null&quot;" name="FG_disp" label="Displace Shader"/>
    <property default="Surface &quot;defaultsurface&quot;" type="rib" value="Surface &quot;defaultsurface&quot;" name="FG_surf" label="Surface Shader"/>
    <property default="Surface &quot;liquidchecker&quot;" type="rib" value="Surface &quot;liquidchecker&quot;" name="BG_surf" label="Background Shader"/>
    <property display="hidden" provider="attribute" default="" type="string" value="&#xa;      Rotate 0 0 1 0&#xa;      AttributeBegin&#xa;        Scale 0.35 0.35 0.35&#xa;        Translate -0.6 -1 0&#xa;        Rotate 120 -1 0 0&#xa;        Rotate 30 0 0 1&#xa;        Geometry &quot;teapot&quot;&#xa;      AttributeEnd&#xa;      " name="PrimitiveCode" label="PrimitiveCode"/>
   </input>
   <output>
    <property default="${TempPath}/${NODELABEL}.tif" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[
print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'Primitive' ).value == 'Sphere': 
  self.getInputParamByName ( 'PrimitiveCode' ).value = "Rotate 60 1 0 0\n Sphere 1.0 -1.0 1.0 360"
  
if self.getInputParamByName ( 'Primitive' ).value == 'Teapot': 
  self.getInputParamByName ( 'PrimitiveCode' ).value = """
      Rotate 0 0 1 0
      AttributeBegin
        Scale 0.35 0.35 0.35
        Translate -0.6 -1 0
        Rotate 120 -1 0 0
        Rotate 30 0 0 1
        Geometry \"teapot\"
      AttributeEnd
      """
      
if self.getInputParamByName ( 'Primitive' ).value == 'Cylinder': 
  self.getInputParamByName ( 'PrimitiveCode' ).value = "Rotate 60 1 0 0\n Cylinder 1 -0.5 0.5 360"
  
if self.getInputParamByName ( 'Primitive' ).value == 'Torus': 
  self.getInputParamByName ( 'PrimitiveCode' ).value = """
  Rotate 45 1 0 0
  Torus 0.7 0.4 0.0 360 360
  """

if self.getInputParamByName ( 'Primitive' ).value == 'Plane': 
  self.getInputParamByName ( 'PrimitiveCode' ).value = 'Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]'


]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}:${ProjectSearchPath}:${ProjectSearchShaders}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}:${ProjectSearchPath}:${ProjectSearchTextures}"
  Option "searchpath" "archive" "&:@:.:~:${ArchiveSearchPath}:${ProjectSearchPath}"
  
  $(Globals)
 

  ### Output image
  Display "$(ImageFile)" "$(DisplayDriver)" "rgba"
  
  Format $(Width) $(Height) 1.0

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    $(LightSource)

    AttributeBegin 
      
      Color [$(Color)]
      Opacity [$(Opacity)]

      $(FG_disp)
      $(FG_surf) 
      
      $(PrimitiveCode)
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      $(BG_surf) 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="87" y="-231"/>
  </node>
  <node icon="" type="surface" author="mesh" id="3" name="surface" label="surf">
   <help>Basic surface shader.</help>
   <input>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="Ci" label="Ci"/>
    <property default="color(1.000,1.000,1.000)" type="color" value="color(1.000,1.000,1.000)" name="Oi" label="Oi"/>
   </input>
   <output>
    <property default="Surface &quot;${NODELABEL}&quot;" type="rib" value="Surface &quot;${NODELABEL}&quot;" name="surface" label="surface"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
#define SURFACE_SHADER ${INSTANCENAME}
surface ${INSTANCENAME} ( 
${PARAMS} 
)
{
  # CODE BEGIN ${INSTANCENAME}
  Ci = $(Ci) * $(Oi); 
  Oi = $(Oi);
  # CODE END ${INSTANCENAME}
}
	]]></code>
   <offset x="-149" y="82"/>
  </node>
  <node icon="lambert.png" type="" author="Alexei Puzikov" id="4" name="lambert" label="lambert">
   <help>Lambert illumination model.</help>
   <input>
    <property default="color(0.000,0.500,1.000)" shaderParam="1" type="color" value="color(0.000,0.500,1.000)" name="SurfaceColor" label="SurfaceColor"/>
    <property default="0.800" shaderParam="1" type="float" value="0.800" name="diffuseCoeff" label="diffuseCoeff"/>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="ambientColor" label="ambientColor"/>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="incandescence" label="incandescence"/>
    <property default="0.000" shaderParam="1" type="float" value="0.150" name="translucence" label="translucence"/>
   </input>
   <output>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="outColor" label="outColor"/>
   </output>
   <internal>
    <variable name="Nf"/>
    <variable name="V"/>
    <variable name="Ia"/>
    <variable name="Id"/>
    <variable name="Itr"/>
   </internal>
   <include/>
   <code><![CDATA[
 normal $(Nf)= faceforward( normalize(N), I );
 vector $(V)= -normalize(I);
 color $(Ia)= ambient() + $(ambientColor);
 color $(Id)= $(diffuseCoeff)* diffuse($(Nf));
 
 color $(Itr)= 0;
 if ($(translucence)!= 0) {
  illuminance(P, $(Nf), PI)
  $(Itr)+= Cl;
  $(Itr)*= $(translucence);
 }
 
 $(outColor)= $(SurfaceColor) * ($(Ia)+ $(Id)+ $(Itr)+ $(incandescence));
 ]]></code>
   <offset x="-440" y="98"/>
  </node>
  <node icon="" type="rib_code" author="mesh" id="33" name="Transform" label="Transform">
   <help>Transform RIB code node</help>
   <input>
    <property default="0.000 0.000 0.000" type="transform" value="0.000 0.000 0.000" name="translate" label="translate"/>
    <property default="1.000 1.000 1.000" type="transform" value="1.000 1.000 1.000" name="scale" label="scale"/>
    <property default="1.000 0.000 0.000" type="transform" value="1.000 0.000 0.000" name="axis" label="axis"/>
    <property default="0.000" type="float" value="0.000" name="Angle" label="Angle"/>
    <property default="" type="rib" value="" name="rib_input" label="rib_input"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="rib_out" label="rib"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
  TransformBegin
    Translate $(translate)
    Scale $(scale) 
    Rotate $(Angle) $(axis)
	  $(rib_input)
	TransformEnd
]]></code>
   <offset x="-96" y="-372"/>
  </node>
  <node icon="" type="light" author="mesh" id="8" name="light" label="dist_light">
   <help>Root light shader.</help>
   <input>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="Cl" label="Cl"/>
   </input>
   <output>
    <property default="LightSource &quot;${NODELABEL}&quot; " type="rib" value="LightSource &quot;${NODELABEL}&quot; " name="light" label="light"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
#define LIGHT_SHADER ${INSTANCENAME}
light ${INSTANCENAME} ( 
${PARAMS} 
)
{
  
  /* CODE BEGIN ${INSTANCENAME} */
  Cl = $(Cl);
  /* CODE END ${INSTANCENAME} */
}	  
	  ]]></code>
   <offset x="-480" y="-172"/>
  </node>
  <node icon="" type="rib_code" author="mesh" id="34" name="toTransform" label="toTransform">
   <help>Transform RIB code node from float values</help>
   <input>
    <property default="0.000" type="float" value="1.000" name="value1" label="X"/>
    <property default="0.000" type="float" value="-3.000" name="value2" label="Y"/>
    <property default="0.000" type="float" value="0.000" name="value3" label="Z"/>
   </input>
   <output>
    <property default="0.000 0.000 0.000" type="transform" value="0.000 0.000 0.000" name="transform" label="transform"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
  $(value1) $(value2) $(value3)
  ]]></code>
   <offset x="-349" y="-478"/>
  </node>
  <node icon="" type="rib" author="mesh" id="16" name="LightSource" label="LightSource">
   <help>Connect RIB code node</help>
   <input>
    <property provider="attribute" default="0" type="int" value="1" name="handle" label="handle"/>
    <property default="LightSource &quot;distantlight&quot;" type="rib" value="LightSource &quot;distantlight&quot;" name="light" label="light"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="rib_out" label="rib"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  $(light) $(handle)
  ]]></code>
   <offset x="-355" y="-222"/>
  </node>
  <node icon="" type="rib" author="mesh" id="17" name="LightSource" label="LightSource0">
   <help>Connect RIB code node</help>
   <input>
    <property provider="attribute" default="0" type="int" value="2" name="handle" label="handle"/>
    <property default="LightSource &quot;distantlight&quot;" type="rib" value="LightSource &quot;distantlight&quot;" name="light" label="light"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="rib_out" label="rib"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[]]></param_code>
   <code><![CDATA[
  $(light) $(handle)
  ]]></code>
   <offset x="-354" y="-334"/>
  </node>
  <node icon="" type="light" author="mesh" id="19" name="light" label="point_light">
   <help>Root light shader.</help>
   <input>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="Cl" label="Cl"/>
   </input>
   <output>
    <property default="LightSource &quot;${NODELABEL}&quot; " type="rib" value="LightSource &quot;${NODELABEL}&quot; " name="light" label="light"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
#define LIGHT_SHADER ${INSTANCENAME}
light ${INSTANCENAME} ( 
${PARAMS} 
)
{
  
  /* CODE BEGIN ${INSTANCENAME} */
  Cl = $(Cl);
  /* CODE END ${INSTANCENAME} */
}	  
	  ]]></code>
   <offset x="-483" y="-335"/>
  </node>
  <node icon="" type="rib_code" author="mesh" id="20" name="ConnectRib" label="ConnectRib">
   <help>Connect RIB code node</help>
   <input>
    <property default="" type="rib" value="" name="rib_input1" label="rib_input1"/>
    <property default="" type="rib" value="" name="rib_input2" label="rib_input2"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="rib_out" label="rib"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
  
  $(rib_input1)
  $(rib_input2)

  ]]></code>
   <offset x="-222" y="-301"/>
  </node>
  <node icon="" type="displacement" author="mesh" id="21" name="displace" label="displace">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,1.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="Displacement &quot;${NODELABEL}&quot;" type="rib" value="Displacement &quot;${NODELABEL}&quot;" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
#define DISPLACEMENT_SHADER ${INSTANCENAME}
displacement ${INSTANCENAME} ( 
${PARAMS} 
)
{
/* CODE BEGIN ${INSTANCENAME} */
   P = $(P); 
	 N = $(N);
/* CODE END ${INSTANCENAME} */
}		
	]]></code>
   <offset x="-148" y="-80"/>
  </node>
  <node icon="" type="variable" author="mesh" id="22" name="P" label="P">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-476" y="-50"/>
  </node>
  <node icon="" type="variable" author="mesh" id="23" name="N" label="N">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-474" y="17"/>
  </node>
  <node icon="IDbubbly.png" type="rsl_code" author="Ivan DeWolf" id="24" name="IDbubbly" label="IDbubbly">
   <help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,1.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="0.200" shaderParam="1" type="float" value="0.050" name="Kd" label="Kd"/>
    <property default="5.000" shaderParam="1" type="float" value="5.000" name="mult" label="mult"/>
    <property default="1.000" type="float" value="1.000" name="Nzscale" label="Nzscale"/>
    <property default="1.000" type="float" value="1.000" name="bubsize" label="bubsize"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="a"/>
    <variable name="b"/>
    <variable name="c"/>
    <variable name="bub"/>
    <variable name="dist"/>
    <variable name="shortest"/>
    <variable name="Po"/>
    <variable name="trucell"/>
    <variable name="surrcell"/>
    <variable name="nzcell"/>
    <variable name="offset"/>
   </internal>
   <include/>
   <code><![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="-323" y="-80"/>
  </node>
  <node icon="" type="rib_code" author="mesh" id="25" name="RenderGlobals" label="RenderGlobals">
   <help>RenderGlobals options</help>
   <input>
    <property space="hidden:raytrace:photon:zbuffer:opengl" provider="attribute" default="hidden" range="hidden:raytrace:photon:zbuffer:opengl" subtype="selector" type="string" value="hidden" name="Hider" label="Hider"/>
    <property provider="attribute" default="1" subtype="switch" type="int" value="1" name="Jitter" label="Jitter"/>
    <property provider="attribute" default="1.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="4" type="int" value="4" name="Samples" label="Samples"/>
    <property space="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" provider="attribute" default="catmull-rom" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="2.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property default="" type="rib" value="" name="Options" label="Options"/>
    <property default="" type="rib" value="" name="Channels" label="Channels"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="rib" label="rib"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
  ##Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}:${ProjectSearchPath}:${ProjectSearchShaders}"
  ##Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}:${ProjectSearchPath}:${ProjectSearchTextures}"

  Hider "hidden" "int jitter" [1]

  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  $(Options)
  
  $(Channels)
  ]]></code>
   <offset x="-99" y="-510"/>
  </node>
  <node icon="" type="rsl_code" author="mesh" id="30" name="me_point" label="me_point">
   <help>Point light shader</help>
   <input>
    <property detail="uniform" provider="primitive" default="" type="string" value="" name="category" label="category"/>
    <property space="shader" detail="uniform" provider="primitive" default="point &quot;shader&quot; (0.000,0.000,0.000)" type="point" value="point &quot;shader&quot; (0.000,2.000,0.000)" name="from" label="from"/>
    <property default="color(1.000,1.000,1.000)" type="color" value="color(1.000,1.000,0.000)" name="LightColor" label="LightColor">
     <help>The color of your the light. You can connect a pattern generator here or
    simply use a constant color.  Two common choices are an image map or a spline which varies with distance.</help>
    </property>
    <property provider="external" default="1.000" type="float" value="8.000" name="Kl" label="Kl"/>
    <property space="None:Linear:Squared:Cubic" detail="uniform" default="0.000" range="None:Linear:Squared:Cubic" subtype="selector" type="float" value="2.000" name="Falloff" label="Falloff">
     <help>Normally light intensity diminished with distance.
        This control governs the degree to which this effect
    is in play.  Linear falls off more than None, Squared
    more than Cubic, etc.  For more precise control, try
    connecting the Kl or LightColor parameter to a
    spline whose pattern is a distance function.</help>
    </property>
    <property detail="uniform" default="0.000" subtype="switch" type="float" value="0.000" name="IgnoreShadow" label="IgnoreShadow">
     <help>if enabled -- shadow will not mix with Cl</help>
    </property>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="Shadow" label="Shadow">
     <help>Connect a shadow function here.</help>
    </property>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="ShadowColor" label="ShadowColor">
     <help>The color of the shadow. Values other than black
          can simulate the effect of semi-transparent shadowing.</help>
    </property>
    <property space="0 1 .01" default="1.000" range="0 1 .01" subtype="slider" type="float" value="1.000" name="Diffuse" label="Diffuse"/>
    <property space="0 1 .01" default="1.000" range="0 1 .01" subtype="slider" type="float" value="1.000" name="Specular" label="Specular"/>
    <property space="0 1 .01" default="0.000" range="0 1 .01" subtype="slider" type="float" value="0.000" name="SSS" label="SSS"/>
   </input>
   <output>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="Cl" label="Cl"/>
    <property detail="uniform" provider="primitive" default="" type="string" value="" name="__category" label="__category"/>
    <property detail="uniform" provider="primitive" default="0.000" type="float" value="0.000" name="__nonspecular" label="__nonspecular"/>
    <property detail="uniform" provider="primitive" default="0.000" type="float" value="0.000" name="__nondiffuse" label="__nondiffuse"/>
    <property detail="varying" provider="primitive" default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="__inShadowC" label="__inShadowC"/>
    <property detail="uniform" provider="primitive" default="1.000" type="float" value="1.000" name="__foglight" label="__foglight"/>
    <property detail="uniform" provider="primitive" default="0.000" type="float" value="0.000" name="__ssslight" label="__ssslight"/>
   </output>
   <internal>
    <variable name="axis"/>
   </internal>
   <include/>
   <code><![CDATA[

  illuminate( $(from) ) 
  {
    float atten = 1 / pow(length(L), $(Falloff));
    
    __inShadowC = $(Shadow);
    __category = $(category);
    __nondiffuse = 1 - $(Diffuse);
    __nonspecular = 1 - $(Specular);
    __ssslight = $(SSS);
    
    $(Cl) = atten * $(Kl) * $(LightColor);
    
    if ( $(IgnoreShadow) != 1 )
      $(Cl) =  (1 - __inShadowC) * $(Cl) +  __inShadowC * $(ShadowColor);
  }
	]]></code>
   <offset x="-635" y="-426"/>
  </node>
  <node icon="" type="rsl_code" author="mesh" id="31" name="me_distant" label="me_distant">
   <help>Distant light shader.</help>
   <input>
    <property detail="uniform" default="" type="string" value="" name="category" label="category"/>
    <property space="shader" detail="uniform" provider="primitive" default="point &quot;shader&quot; (0.000,0.000,0.000)" type="point" value="point &quot;shader&quot; (0.000,0.000,-2.000)" name="from" label="from"/>
    <property space="shader" detail="uniform" provider="primitive" default="point &quot;shader&quot; (0.000,0.000,1.000)" type="point" value="point &quot;shader&quot; (0.000,0.000,1.000)" name="to" label="to"/>
    <property default="color(1.000,1.000,1.000)" type="color" value="color(1.000,1.000,1.000)" name="LightColor" label="LightColor">
     <help>The color of your the light. You can connect a pattern generator here or
    simply use a constant color.  Two common choices are an image map or a spline which varies with distance.</help>
    </property>
    <property provider="external" default="1.000" type="float" value="8.000" name="Kl" label="Kl"/>
    <property space="None:Linear:Squared:Cubic" detail="uniform" default="0.000" range="None:Linear:Squared:Cubic" subtype="selector" type="float" value="2.000" name="Falloff" label="Falloff">
     <help>Normally light intensity diminished with distance.
        This control governs the degree to which this effect
    is in play.  Linear falls off more than None, Squared
    more than Cubic, etc.  For more precise control, try
    connecting the Kl or LightColor parameter to a
    spline whose pattern is a distance function.</help>
    </property>
    <property detail="uniform" default="1.000" subtype="switch" type="float" value="1.000" name="DisableBarnDoor" label="DisableBarnDoor">
     <help>Allows you to turn off the barn door effect.  This is
      useful in the case where you want to tightly focus your
      shadowmaps but still want light throughout the scene.</help>
    </property>
    <property space="0 .5 .001" detail="uniform" default="0.000" range="0 .5 .001" subtype="slider" type="float" value="0.000" name="Penumbra" label="Penumbra">
     <help>Controls how sharp an edge the barn door makes.</help>
    </property>
    <property detail="uniform" default="0.000" subtype="switch" type="float" value="0.000" name="IgnoreShadow" label="IgnoreShadow">
     <help>if enabled -- shadow will not mix with Cl</help>
    </property>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="Shadow" label="Shadow">
     <help>Connect a shadow function here.</help>
    </property>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="ShadowColor" label="ShadowColor">
     <help>The color of the shadow. Values other than black
          can simulate the effect of semi-transparent shadowing.</help>
    </property>
    <property space="0 1 .01" default="1.000" range="0 1 .01" subtype="slider" type="float" value="1.000" name="Diffuse" label="Diffuse"/>
    <property space="0 1 .01" default="1.000" range="0 1 .01" subtype="slider" type="float" value="1.000" name="Specular" label="Specular"/>
    <property space="0 1 .01" default="0.000" range="0 1 .01" subtype="slider" type="float" value="0.000" name="SSS" label="SSS"/>
   </input>
   <output>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="Cl" label="Cl"/>
    <property detail="uniform" provider="primitive" default="" type="string" value="" name="__category" label="__category"/>
    <property detail="uniform" provider="primitive" default="0.000" type="float" value="0.000" name="__nonspecular" label="__nonspecular"/>
    <property detail="uniform" provider="primitive" default="0.000" type="float" value="0.000" name="__nondiffuse" label="__nondiffuse"/>
    <property detail="varying" provider="primitive" default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="__inShadowC" label="__inShadowC"/>
    <property detail="uniform" provider="primitive" default="1.000" type="float" value="1.000" name="__foglight" label="__foglight"/>
    <property detail="uniform" provider="primitive" default="0.000" type="float" value="0.000" name="__ssslight" label="__ssslight"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[

  solar( $(to) - $(from), 0.0 ) 
  {
    varying float atten;
    varying point PP = transform( "shader", Ps );
    varying float sloc, tloc;
    sloc = abs( xcomp( PP ) );
    tloc = abs(ycomp(PP));

    if ( $(DisableBarnDoor) != 1 ) 
    {
      if ( $(Penumbra) == 0 ) 
        atten = (1 - filterstep(.5, sloc)) * (1 - filterstep(.5, tloc));
      else 
        atten = (1 - smoothstep(.5- $(Penumbra),.5,sloc)) * (1 - smoothstep(.5-$(Penumbra),.5, tloc));
      atten *= filterstep(0, zcomp(PP));
    } 
    else 
      atten = 1;
    atten *= 1 / pow(length(L), $(Falloff));
    
    __inShadowC = $(Shadow);
    __category = $(category);
    __nondiffuse = 1 - $(Diffuse);
    __nonspecular = 1 - $(Specular);
    __ssslight = $(SSS);
    
    $(Cl) = atten * $(Kl) * $(LightColor);
    
    if ( $(IgnoreShadow) != 1 )
      $(Cl) =  (1 - __inShadowC) * $(Cl) +  __inShadowC * $(ShadowColor);
  }
	]]></code>
   <offset x="-629" y="-89"/>
  </node>
 </nodes>
 <links>
  <link srcNode_id="23" dstNode_id="24" id="32" srcParam="N" dstParam="N"/>
  <link srcNode_id="24" dstNode_id="21" id="33" srcParam="outP" dstParam="P"/>
  <link srcNode_id="24" dstNode_id="21" id="34" srcParam="outN" dstParam="N"/>
  <link srcNode_id="21" dstNode_id="2" id="35" srcParam="disp" dstParam="FG_disp"/>
  <link srcNode_id="25" dstNode_id="2" id="36" srcParam="rib" dstParam="Globals"/>
  <link srcNode_id="34" dstNode_id="33" id="5" srcParam="transform" dstParam="translate"/>
  <link srcNode_id="30" dstNode_id="19" id="1" srcParam="Cl" dstParam="Cl"/>
  <link srcNode_id="2" dstNode_id="1" id="40" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="4" dstNode_id="3" id="41" srcParam="outColor" dstParam="Ci"/>
  <link srcNode_id="3" dstNode_id="2" id="42" srcParam="surface" dstParam="FG_surf"/>
  <link srcNode_id="31" dstNode_id="8" id="2" srcParam="Cl" dstParam="Cl"/>
  <link srcNode_id="20" dstNode_id="33" id="3" srcParam="rib_out" dstParam="rib_input"/>
  <link srcNode_id="8" dstNode_id="16" id="23" srcParam="light" dstParam="light"/>
  <link srcNode_id="19" dstNode_id="17" id="25" srcParam="light" dstParam="light"/>
  <link srcNode_id="17" dstNode_id="20" id="26" srcParam="rib_out" dstParam="rib_input1"/>
  <link srcNode_id="16" dstNode_id="20" id="27" srcParam="rib_out" dstParam="rib_input2"/>
  <link srcNode_id="33" dstNode_id="2" id="4" srcParam="rib_out" dstParam="LightSource"/>
  <link srcNode_id="22" dstNode_id="24" id="31" srcParam="P" dstParam="P"/>
 </links>
</nodenet>
