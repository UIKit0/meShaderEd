<!DOCTYPE test_rib_archive>
<nodenet author="meShaderEd" name="test_rib_archive">
 <help>Short NodeNetwork description</help>
 <nodes>
  <node icon="" type="image" author="mesh" id="1" name="imageViewer" label="imageViewer">
   <help>Single image viewer </help>
   <input>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" subtype="file" type="image" value="" name="image" label="image"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label
self.imageName = self.getInputParamValueByName ( 'image' ) 


]]></param_code>
   <offset x="-227" y="-127"/>
  </node>
  <node icon="" type="rib_code" author="mesh" id="5" name="RenderGlobals" label="RenderGlobals">
   <help>RenderGlobals options</help>
   <input>
    <property provider="attribute" default="hidden" range="hidden:raytrace:photon:zbuffer:opengl" subtype="selector" type="string" value="hidden" name="Hider" label="Hider"/>
    <property provider="attribute" default="1" subtype="switch" type="int" value="1" name="Jitter" label="Jitter"/>
    <property provider="attribute" default="1.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="4" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="catmull-rom" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="2.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property default="" type="rib" value="" name="Options" label="Options"/>
    <property default="" type="rib" value="" name="Channels" label="Channels"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="rib" label="rib"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
  ##Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}:${ProjectSearchPath}:${ProjectSearchShaders}"
  ##Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}:${ProjectSearchPath}:${ProjectSearchTextures}"

  Hider "hidden" "int jitter" [1]

  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  $(Options)
  
  $(Channels)
  ]]></code>
   <offset x="-531" y="-284"/>
  </node>
  <node icon="" type="rib_code" author="mesh" id="6" name="RaytraceOptions" label="RaytraceOptions">
   <help>Raytrace options</help>
   <input>
    <property provider="attribute" default="1.000" type="float" value="1.000" name="traceBreadthFactor" label="Trace Breadth Factor"/>
    <property provider="attribute" default="1.000" type="float" value="1.000" name="traceDepthFactor" label="Trace Depth Factor"/>
    <property provider="attribute" default="4" type="int" value="10" name="maxdepth" label="Max Trace Depth"/>
    <property provider="attribute" default="1" type="int" value="1" name="maxdiffusedepth" label="Max Diffuse Depth"/>
    <property provider="attribute" default="4" type="int" value="8" name="maxspeculardepth" label="Max Specular Depth"/>
    <property provider="attribute" default="10.000" type="float" value="10.000" name="specularthreshold" label="Specular Threshold"/>
    <property provider="attribute" default="1" subtype="switch" type="int" value="1" name="continuationbydefault" label="Continuation By Default"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="rib" label="rib"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
  Option "user" "float traceBreadthFactor" [$(traceBreadthFactor)]
  Option "user" "float traceDepthFactor" [$(traceDepthFactor)]
  Option "trace" "int maxdepth" 4

  Option "trace" "float specularthreshold" [$(specularthreshold)]
  Option "trace" "int continuationbydefault" [$(continuationbydefault)]

  Attribute "visibility" "int trace" [1]
  Attribute "visibility" "int transmission" [1]
  Attribute "visibility" "int diffuse" [1]
  Attribute "visibility" "int specular" [1]

  Attribute "trace" "int maxdiffusedepth" [$(maxdiffusedepth)]
  Attribute "trace" "int maxspeculardepth" [$(maxspeculardepth)]
  ]]></code>
   <offset x="-749" y="-346"/>
  </node>
  <node icon="" type="rib_code" author="mesh" id="8" name="CameraPersp" label="CameraPersp">
   <help>Camera</help>
   <input>
    <property provider="attribute" default="27.000" type="float" value="27.000" name="FOV" label="FOV"/>
    <property provider="attribute" default="0.100" type="float" value="0.100" name="ClipMin" label="Near Clip Plane"/>
    <property provider="attribute" default="10000.000" type="float" value="10000.000" name="ClipMax" label="Far Clip Plane"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="rib" label="rib"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
  Projection "perspective" "fov" [$(FOV)]
	ScreenWindow -1 1 -1 1
	Clipping $(ClipMin) $(ClipMax)
	Transform [ 1 0 0 0  0 0.992546 -0.121869 0  0 -0.121869 -0.992546 0  0 -4.66749 35.8359 1 ]
  ]]></code>
   <offset x="-717" y="-201"/>
  </node>
  <node icon="" type="rib_code" author="mesh" id="10" name="ReadArchive" label="DRAGON">
   <help>Read RIB Archive node</help>
   <input>
    <property default="" type="rib" value="Surface &quot;plastic&quot;" name="shader" label="shader"/>
    <property provider="attribute" default="" range="All files=*.*:RIB=*.rib" subtype="file" type="string" value="dragon.rib" name="RibArchive" label="Rib Archive"/>
    <property default="" type="rib" value="" name="rib_input" label="rib_input"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="rib_out" label="rib"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
  
  $(shader)
  ReadArchive "$(RibArchive)" 
  $(rib_input)

  ]]></code>
   <offset x="-664" y="21"/>
  </node>
  <node icon="" type="rib_code" author="mesh" id="12" name="ReadArchive" label="FLOOR">
   <help>Read RIB Archive node</help>
   <input>
    <property default="Surface &quot;matte&quot;" type="rib" value="Surface &quot;matte&quot;" name="shader" label="shader"/>
    <property provider="attribute" default="" range="All files=*.*:RIB=*.rib" subtype="file" type="string" value="FLOOR.rib" name="RibArchive" label="Rib Archive"/>
    <property default="" type="rib" value="" name="rib_input" label="rib_input"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="rib_out" label="rib"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
  
  $(shader)
  ReadArchive "$(RibArchive)" 
  $(rib_input)

  ]]></code>
   <offset x="-525" y="-51"/>
  </node>
  <node icon="" type="rib" author="mesh" id="17" name="GeneralRib" label="GeneralRib">
   <help>General Rib for preview</help>
   <input>
    <property default="" type="rib" value="" name="Globals" label="Render Options"/>
    <property default="" type="rib" value="" name="Camera" label="Camera"/>
    <property provider="attribute" default="512" type="int" value="512" name="Width" label="Image width"/>
    <property provider="attribute" default="512" type="int" value="512" name="Height" label="Image height"/>
    <property provider="attribute" default="1.250" type="float" value="0.750" name="EnvIntensity" label="EnvLight Intensity"/>
    <property provider="attribute" default="kitchen_LL.hdr.${TEX}" range="All files=*.*:TEX=*.tex:TDL=*.tdl:TIFF=*.tif" subtype="file" type="string" value="kitchen_LL.hdr.${TEX}" name="EnvMap" label="Environment Map"/>
    <property provider="attribute" default="0.000 0.000 1.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="1.000 1.000 1.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property provider="attribute" default="0.500" type="float" value="0.700" name="DisplaceBound" label="Displacement Bound"/>
    <property default="Displacement &quot;null&quot;" type="rib" value="Displacement &quot;null&quot;" name="rib_input" label="rib_input"/>
   </input>
   <output>
    <property default="${TempPath}/${NODELABEL}.tif" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[
print ":: Hello from %s XML code !!!" % self.label

]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}:${ProjectSearchPath}:${ProjectSearchShaders}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}:${ProjectSearchPath}:${ProjectSearchTextures}"
  Option "searchpath" "archive" "&:@:.:~:${ArchiveSearchPath}:${ProjectSearchPath}"
  
  $(Globals)
  
  $(Camera)

  ### Output image
  Display "$(ImageFile)" "tiff" "rgba"

  Format $(Width) $(Height) 1.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd
    
    #AttributeBegin 
		#	Attribute "identifier" "name" ["_pointLight1_pointLightShape1"]
		#	ConcatTransform [ 1 0 0 0  0 1 0 0  -0 -0 -1 0  22.5415 8.12688 11.9394 1 ]
		#	LightSource "liquidpoint" 1 "intensity" [1] "lightcolor" [1 1 1] "color shadowcolor" [0 0 0] "float decay" [0] "float __nondiffuse" [0] "float __nonspecular" [0] "string __category" [""] "float lightID" [0]
		#AttributeEnd 

		#AttributeBegin 
		#	Attribute "identifier" "name" ["_directionalLight1_directionalLightShape1"]
		#	ConcatTransform [ 0.712153 0 0.702024 0  0.19333 0.961333 -0.19612 0  0.674879 -0.27539 -0.684616 0  -15.2525 9.91499 11.9873 1 ]
		#	LightSource "liquiddistant" 2 "intensity" [1] "lightcolor" [1 1 1] "color shadowcolor" [0 0 0] "float __nondiffuse" [0] "float __nonspecular" [0] "string __category" [""] "float lightID" [0]
		#AttributeEnd 

    LightSource "distantlight" 1 "intensity" 1.0 "from" [-15 15 30] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [10 10 20] "to" [0 0 0]
    
    LightSource "meEnvLight" 3  "uniform float Intensity" [$(EnvIntensity)] 
                                "uniform string meEnvMap_EnvMap" ["$(EnvMap)"]
                                "uniform string meEnvMap_Space" ["_environment"]

    
    AttributeBegin 
      Color [$(Color)]
      Opacity [$(Opacity)]
            
      $(rib_input)
    
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="-371" y="-176"/>
  </node>
  <node icon="" type="surface" author="mesh" id="18" name="surface" label="surf">
   <help>Basic surface shader.</help>
   <input>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="Ci" label="Ci"/>
    <property default="color(1.000,1.000,1.000)" type="color" value="color(1.000,1.000,1.000)" name="Oi" label="Oi"/>
   </input>
   <output>
    <property default="Surface &quot;${NODELABEL}&quot;" type="rib" value="Surface &quot;${NODELABEL}&quot;" name="surface" label="surface"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  Ci = $(Ci) * $(Oi); 
	  Oi = $(Oi);
	]]></code>
   <offset x="-725" y="-95"/>
  </node>
  <node icon="ImageFileC.png" type="" author="mesh" id="19" name="me_ImageFileC" label="ImageFileC">
   <help>Color image file with alpha</help>
   <input>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="defColor" label="defColor">
     <help></help>
    </property>
    <property default="1.000" type="float" value="1.000" name="defFloat" label="defFloat">
     <help></help>
    </property>
    <property detail="uniform" provider="external" default="" range="All files=*.*:TEX=*.tex:TDL=*.tdl:TIFF=*.tif" subtype="file" type="string" value="grid.tif.${TEX}" name="File" label="File">
     <help></help>
    </property>
    <property detail="uniform" default="0.000" subtype="switch" type="float" value="0.000" name="fillOutside" label="fillOutside">
     <help></help>
    </property>
    <property detail="uniform" default="0.000" range="None=0:Apply=1:Multiply=2:Divide=3" subtype="selector" type="float" value="0.000" name="alphaOp" label="alphaOp"/>
    <property detail="uniform" default="gaussian" range="box:triangle:b-spline:radial-bspline:gaussian:sinc:disk" subtype="selector" type="string" value="gaussian" name="filter" label="filter"/>
    <property detail="uniform" default="1.000" type="float" value="1.000" name="SFilt" label="SFilt"/>
    <property detail="uniform" default="1.000" type="float" value="1.000" name="TFilt" label="TFilt"/>
    <property detail="uniform" default="1.000" subtype="switch" type="float" value="1.000" name="lerp" label="lerp"/>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Pt" label="Pt"/>
   </input>
   <output>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="colorResult" label="colorResult"/>
    <property default="0.000" type="float" value="0.000" name="floatResult" label="floatResult"/>
   </output>
   <internal>
    <variable name="x"/>
    <variable name="y"/>
   </internal>
   <include/>
   <code><![CDATA[
	$(colorResult) = $(defColor);
  $(floatResult) = $(defFloat);
  
  float $(x) = xcomp( $(Pt) );
  float $(y) = ycomp( $(Pt) );
	
  if ( $(File) != "" ) 
  {
		$(colorResult) = color texture(
			$(File), 
			$(x),
			$(y),
			"swidth", $(SFilt),
			"twidth", $(TFilt),
			"filter", $(filter),
			"lerp", $(lerp) );
			
		if ( $(alphaOp) != 0 ) /* "nop" */
		{
			uniform float nChannels = 3;
			textureinfo( $(File), "channels", nChannels );
			
			if ( nChannels > 3 )
			{
				$(floatResult) = float texture(
							$(File)[3],
							$(x),
							$(y),
							"swidth", $(SFilt),
							"twidth", $(TFilt),
							"filter", $(filter),
							"lerp", $(lerp) );
				if ( $(alphaOp) == 2 )
				{
				  $(colorResult) *= $(floatResult);
				}
				if ( $(alphaOp) == 3 ) /* assume AlphaOp == "unassociated" */
				{
					if( $(floatResult) != 0 )
					{
						$(colorResult) /= $(floatResult);
						$(colorResult) = clamp( $(colorResult), color(0), color(1) );
					}
				}
			}
				 
			/*	if ( fillOutside  == 1 ) */
			$(colorResult) = mix( $(defColor), $(colorResult), $(floatResult) ); 
		}
		if ( ( $(fillOutside) == 1 ) && ( $(x) < 0 || $(x) > 1 || $(y) < 0 || $(y) > 1) )   
				$(colorResult) = $(defColor);
	} 
	 
  ]]></code>
   <offset x="-1331" y="-479"/>
  </node>
  <node icon="" type="" author="Pixar" id="20" name="ST" label="ST">
   <help>Returns the 2D surface point based on the underlying\n
	    	ST parameterization of your object.</help>
   <input>
    <property detail="uniform" default="0.000" range="0 360 1" subtype="slider" type="float" value="0.000" name="angle" label="angle">
     <help></help>
    </property>
    <property detail="uniform" default="1.000" type="float" value="2.000" name="repeatS" label="repeatS">
     <help></help>
    </property>
    <property detail="uniform" default="1.000" type="float" value="2.000" name="repeatT" label="repeatT">
     <help></help>
    </property>
    <property detail="uniform" default="0.000" type="float" value="0.000" name="offsetS" label="offsetS">
     <help></help>
    </property>
    <property detail="uniform" default="0.000" type="float" value="0.000" name="offsetT" label="offsetT">
     <help></help>
    </property>
    <property detail="uniform" default="0.000" subtype="switch" type="float" value="0.000" name="flipS" label="flipS">
     <help></help>
    </property>
    <property detail="uniform" default="0.000" subtype="switch" type="float" value="0.000" name="flipT" label="flipT">
     <help></help>
    </property>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q" label="Q"/>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="duQ" label="duQ"/>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="dvQ" label="dvQ"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
		setxcomp( $(Q), $(repeatS) * s + $(offsetS));
    setycomp( $(Q), $(repeatT) * t + $(offsetT));
    setzcomp( $(Q), 0);
    
    if ( $(angle) != 0 )
      $(Q) = rotate($(Q), radians($(angle)), point(0,0,0), point(0,0,1)); 

    $(duQ) = vector Du( $(Q) ) * du;
    $(dvQ) = vector Dv( $(Q) ) * dv;
    
    if ( $(flipS) == 1 )
      setxcomp( $(Q), 1 - xcomp($(Q)) );
    if ( $(flipT) == 1 )
      setycomp( $(Q), 1 - ycomp($(Q)) );
  ]]></code>
   <offset x="-1539" y="-432"/>
  </node>
  <node icon="" type="surface" author="mesh" id="22" name="surface" label="surf0">
   <help>Basic surface shader.</help>
   <input>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="Ci" label="Ci"/>
    <property default="color(1.000,1.000,1.000)" type="color" value="color(1.000,1.000,1.000)" name="Oi" label="Oi"/>
   </input>
   <output>
    <property default="Surface &quot;${NODELABEL}&quot;" type="rib" value="Surface &quot;${NODELABEL}&quot;" name="surface" label="surface"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  Ci = $(Ci) * $(Oi); 
	  Oi = $(Oi);
	]]></code>
   <offset x="-949" y="195"/>
  </node>
  <node icon="me_diff.png" type="" author="mesh" id="23" name="me_diff" label="me_diff">
   <help>Diffuse function with extra controls</help>
   <input>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
    <property default="" type="string" value="" name="category" label="category">
     <help></help>
    </property>
    <property default="1.000" range="0 1 0.01" subtype="slider" type="float" value="0.710" name="Kd" label="Kd">
     <help></help>
    </property>
    <property default="1.000" range="0 1 0.01" subtype="slider" type="float" value="0.840" name="atten" label="atten">
     <help></help>
    </property>
    <property default="0.000" range="0 1 0.01" subtype="slider" type="float" value="0.000" name="from" label="from">
     <help></help>
    </property>
    <property default="1.000" range="0 1 0.01" subtype="slider" type="float" value="1.000" name="to" label="to">
     <help></help>
    </property>
    <property default="color(1.000,1.000,1.000)" type="color" value="color(1.000,1.000,1.000)" name="coloration" label="coloration">
     <help></help>
    </property>
   </input>
   <output>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="result" label="result"/>
   </output>
   <internal>
    <variable name="diffColor"/>
    <variable name="hueComp"/>
    <variable name="satComp"/>
    <variable name="lumiComp"/>
    <variable name="hsvDiff"/>
   </internal>
   <include/>
   <code><![CDATA[
	
	color $(diffColor) = 0;
              
	illuminance ( $(category), P, $(N), PI/2, "lightcache", "refresh" ) 
	{
		float nondiff = 0;
		lightsource( "__nondiffuse", nondiff );
		if (nondiff < 1)
			$(diffColor) += ( 1 - nondiff ) * Cl *( $(N).normalize(L) );
	}
	
	float $(hueComp) = comp( ctransform( "hsv" , $(diffColor) ) , 0 );
	float $(satComp) = comp( ctransform( "hsv" , $(diffColor) ), 1 );
	float $(lumiComp) = comp( ctransform( "hsv" , $(diffColor) ), 2 ); /*  get value component from HSV color space */
	color $(hsvDiff) = color "hsv" ( $(hueComp), $(satComp), ( $(from) + ( $(to) - $(from) ) * pow( $(lumiComp), $(atten) ) ) );
  
	$(result) = $(coloration) * $(Kd) * $(hsvDiff);
			
  ]]></code>
   <offset x="-1335" y="-233"/>
  </node>
  <node icon="" type="" author="mesh" id="24" name="FaceforwardNormal" label="FaceforwardNormal">
   <help>Faceforward Normalized Normal.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="Nf" label="Nf"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	$(Nf) = faceforward( normalize(N), I );
	]]></code>
   <offset x="-1574" y="-204"/>
  </node>
  <node icon="" type="" author="mesh" id="25" name="compMultC" label="compMultC">
   <help>Multiple 'BG' and 'mult' * 'FG' colors.</help>
   <input>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="BG" label="BG"/>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="FG" label="FG"/>
    <property provider="external" default="1.000" range="0 1 0.01" subtype="slider" type="float" value="0.780" name="mult" label="mult"/>
   </input>
   <output>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="out" label="out"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[

	$(out) = $(BG) * ( (1 - $(mult)) + $(mult) * $(FG) );
	
	]]></code>
   <offset x="-1121" y="-272"/>
  </node>
  <node icon="" type="rib" author="mesh" id="26" name="ensemble" label="ensemble">
   <help>Ensemble</help>
   <input>
    <property default="" type="rib" value="" name="light" label="light"/>
    <property default="" type="rib" value="" name="volume" label="volume"/>
    <property default="" type="rib" value="" name="displacement" label="displacement"/>
    <property default="" type="rib" value="" name="surface" label="surface"/>
    <property default="" type="rib" value="" name="rib" label="rib"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="RIB" label="RIB"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  $(light)
	  $(volume)
	  $(displacement)
	  $(surface)
	  $(rib)
	  ]]></code>
   <offset x="-811" y="81"/>
  </node>
  <node icon="" type="displacement" author="mesh" id="27" name="displace" label="displace">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,1.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="Displacement &quot;${NODELABEL}&quot;" type="rib" value="Displacement &quot;${NODELABEL}&quot;" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  P = $(P); 
	  N = $(N);
	]]></code>
   <offset x="-929" y="-4"/>
  </node>
  <node icon="IDgloop.png" type="rsl_code" author="Ivan DeWolf" id="28" name="IDgloop" label="IDgloop">
   <help>IDgloop displacement shader demostrating non-linear displacement in PRMan</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,1.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
    <property default="object" type="string" value="object" name="space" label="space"/>
    <property default="0.200" range="0 1 0.001" subtype="slider" type="float" value="0.000" name="Kd" label="Kd"/>
    <property default="0.200" range="0 1 0.001" subtype="slider" type="float" value="0.095" name="mag" label="mag"/>
    <property default="5.000" range="0 100 0.01" subtype="slider" type="float" value="1.820" name="freq" label="freq"/>
    <property default="20.000" range="0 64 1" subtype="slider" type="float" value="20.000" name="numsteps" label="numsteps"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="Nn"/>
    <variable name="overdist"/>
    <variable name="stepsize"/>
    <variable name="Psh"/>
    <variable name="sys"/>
    <variable name="dPduN"/>
    <variable name="dPdvN"/>
    <variable name="Pou"/>
    <variable name="Pov"/>
    <variable name="nz"/>
    <variable name="nzou"/>
    <variable name="nzov"/>
    <variable name="chu"/>
    <variable name="chv"/>
    <variable name="DdPdu"/>
    <variable name="DdPdv"/>
    <variable name="step"/>
    <variable name="i"/>
   </internal>
   <include/>
   <code><![CDATA[
	  
		vector $(overdist) = 0.1;
		vector $(stepsize) = $(mag) / $(freq);
		
		string $(sys) = $(space);
		
		if ( $(space) == "" ) $(sys) = "object";  
		
		point  $(Psh) = transform ( $(sys), $(P) ) * $(freq);
		vector $(dPduN) = normalize ( vtransform ( $(sys), dPdu ) );
		vector $(dPdvN) = normalize ( vtransform ( $(sys), dPdv ) );

		point  $(Pou) = $(Psh) + ( $(dPduN) * $(overdist) );
		point  $(Pov) = $(Psh) + ( $(dPdvN) * $(overdist) );

		float  $(nz) = noise ( $(Psh) ) - 0.5;
		float  $(nzou) = noise ( $(Pou) ) - 0.5;
		float  $(nzov) = noise ( $(Pov) ) - 0.5;

		float  $(chu) = ( $(nz) - $(nzou) );
		float  $(chv) = ( $(nz) - $(nzov) );

		vector $(DdPdu) = $(dPduN);
		vector $(DdPdv) = $(dPdvN);

		vector $(step) = $(DdPdu) ^ $(DdPdv);

		float  $(i);
		for ( $(i) = 1 ; $(i) < $(numsteps) ; $(i) += 1 )
		{
			$(P) -= vtransform ( $(sys), "current", $(step) ) * $(nz) * $(stepsize);
			$(DdPdu) = normalize ( $(DdPdu) + ( $(step) * $(chu) ) );
			$(DdPdv) = normalize ( $(DdPdv) + ( $(step) * $(chv) ) );
		  $(step) = $(DdPdu) ^ $(DdPdv);
		}
		normal $(Nn) = normalize ( $(N) );
    $(P) += $(Nn) * $(Kd) * (-1); 
    $(N) = normalize ( calculatenormal( $(P) ) );
         
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]></code>
   <offset x="-1061" y="-16"/>
  </node>
  <node icon="" type="variable" author="mesh" id="29" name="P" label="P">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-1193" y="28"/>
  </node>
  <node icon="" type="variable" author="mesh" id="30" name="N" label="N">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-1187" y="87"/>
  </node>
  <node icon="" type="" author="mesh" id="31" name="compMultInvC" label="compMultInvC">
   <help>Multiple 'BG' and inverted 'FG' multiplied with 'mult' colors.</help>
   <input>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="BG" label="BG"/>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="FG" label="FG"/>
    <property provider="external" default="1.000" range="0 1 0.01" subtype="slider" type="float" value="0.650" name="mult" label="mult"/>
   </input>
   <output>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="out" label="out"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[

	$(out) = $(BG) * ( (1 - $(mult)) + $(mult) * ( 1 - $(FG) ) );
	
	]]></code>
   <offset x="-956" y="-177"/>
  </node>
  <node icon="occlusion.png" type="" author="mesh" id="32" name="me_occlusion" label="occlusion">
   <help>Occlusion function with most supporting parameters (including specific for 3Delight, Pixie and Air ) </help>
   <input>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
    <property detail="uniform" default="1.000" subtype="switch" type="float" value="0.000" name="Invert" label="Invert"/>
    <property detail="uniform" default="1.000" subtype="switch" type="float" value="1.000" name="Adaptive" label="Adaptive"/>
    <property detail="uniform" default="128.000" range="1 512 1" subtype="slider" type="float" value="128.000" name="MaxSamples" label="MaxSamples"/>
    <property detail="uniform" default="64.000" range="1 512 1" subtype="slider" type="float" value="64.000" name="MinSamples" label="MinSamples"/>
    <property detail="uniform" default="-1.000" type="float" value="5.000" name="MaxDist" label="MaxDist"/>
    <property detail="uniform" default="vector(0.000,1.000,0.000)" type="vector" value="vector(0.000,1.000,0.000)" name="SkyAxis" label="SkyAxis"/>
    <property default="90.000" type="float" value="90.000" name="ConeAngle" label="ConeAngle"/>
    <property detail="uniform" default="0.000" type="float" value="0.000" name="SampleBase" label="SampleBase">
     <help>specifies the (float) jittering of the hemisphere ray origins. 
		The default value is 0 (no jittering). 
		A value of 1 corresponds to jittering over the size of a micropolygon. 
		This is useful to smooth out aliased occlusion next to edges.</help>
    </property>
    <property detail="uniform" default="0.050" range="0.0 5.0 .001" subtype="slider" type="float" value="0.050" name="Bias" label="Bias"/>
    <property detail="uniform" default="default" range="default:primitive:shader" subtype="selector" type="string" value="default" name="HitMode" label="HitMode"/>
    <property detail="uniform" default="both" range="both:front:back" subtype="selector" type="string" value="both" name="HitSides" label="HitSides"/>
    <property detail="uniform" default="0.150" type="float" value="0.150" name="MaxVar" label="MaxVar"/>
    <property detail="uniform" default="-1.000" type="float" value="-1.000" name="MaxError" label="MaxError"/>
    <property detail="uniform" default="0.000" type="float" value="0.000" name="MaxPixelDist" label="MaxPixelDist">
     <help>specifies an error metric to control quality/speed tradeoff for occlusion calculations.  
		If set to zero, the occlusion will be computed at every shading point; 
		no attempt at interpolation will be made.  
		maxpixeldist is used in conjunction with maxerror or maxvariation 
		and provides a screen-based metric to limit artifacts associated with interpolation. 
		If not provided or if set to a negative value, the value of the attribute: 
		"irradiance" "maxpixeldist" is used. </help>
    </property>
    <property detail="uniform" default="cosine" range="cosine:uniform" subtype="selector" type="string" value="cosine" name="Distribution" label="Distribution"/>
    <property detail="uniform" default="0.000" range="exp(-falloff*dist)=0:(1 - dist/maxdist)^falloff=1" subtype="selector" type="float" value="0.000" name="FalloffMode" label="FalloffMode"/>
    <property detail="uniform" default="0.000" type="float" value="0.000" name="FalloffValue" label="FalloffValue"/>
    <property detail="uniform" default="" type="string" value="" name="EnvMap" label="EnvMap"/>
    <property detail="uniform" default="" type="string" value="" name="EnvSpace" label="EnvSpace"/>
    <property detail="uniform" default="1.000" subtype="switch" type="float" value="1.000" name="BrtWarp" label="BrtWarp"/>
    <property detail="uniform" default="" type="string" value="" name="coordsys" label="coordsys"/>
    <property detail="uniform" default="" type="string" value="" name="subset" label="subset"/>
    <property detail="uniform" default="" type="string" value="" name="label" label="label"/>
    <property detail="uniform" default="-1.000" type="float" value="-1.000" name="seed" label="seed">
     <help>frame-dependent random directions seed. 
		If "seed" is set to a fixed non-negative number, 
		the ray directions from each point will be fixed from frame to frame. 
		If "seed" is set to -1 (the default) or the frame number, 
		the directions will change from frame to frame. 
		(Ignored for point-based calculations.)</help>
    </property>
    <property detail="uniform" default="0.000" subtype="switch" type="float" value="0.000" name="pointbased" label="pointbased"/>
    <property detail="uniform" default="" type="string" value="" name="PtcFile" label="PtcFile"/>
    <property detail="uniform" default="0.100" type="float" value="0.100" name="MaxSolidAngle" label="MaxSolidAngle"/>
    <property detail="uniform" default="1.000" subtype="switch" type="float" value="1.000" name="clamp" label="clamp"/>
   </input>
   <output>
    <property default="0.000" type="float" value="0.000" name="result" label="result"/>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="env_color" label="env_color"/>
    <property default="vector(0.000,0.000,1.000)" type="vector" value="vector(0.000,0.000,1.000)" name="bent_dir" label="bent_dir"/>
   </output>
   <internal>
    <variable name="occ_C"/>
   </internal>
   <include/>
   <code><![CDATA[
  
	/* extern point P; */
  /* extern normal N; */
  /* normal Nss = meShadingNormal( N ); */
  
  /* if ( $(MaxDist) == -1 )
	  $(MaxDist) = 1.0e38; */
	
	#ifdef AIR  
   color $(occ_C) = occlusion( P  
              ,$(N) 
              ,radians( $(ConeAngle) )
              ,bent_dir
              ,"samples",       $(MaxSamples)
              /* ,"blur", mapblur */
              ,"bias",          $(Bias)
              ,"label",         $(label)
              ,"subset",        $(subset)
              ,"maxdist",       $(MaxDist)
              ,"maxerror",      $(MaxError) 
              ,"maxpixeldist",  MaxPixelDist );
             $(result) = comp( $(occ_C), 0 ); 
#else                           
   #ifdef PIXIE
   $(result) = occlusion( P  
              ,$(N)            
              ,$(MaxSamples)
              ,"irradiance",    $(env_color) /* The irradiance amount (output)  */
              /*,"minR",          MaxPixelDist  uniform float minR	 The closest distance between samples. */
              /*,"maxR",          MaxPixelDist uniform float maxR	The maximum distance between samples. */
              ,"bias",          $(Bias)
              ,"maxdist",       $(MaxDist) );
   #else
   $(result) = occlusion( P  
              ,$(N)            
              ,$(MaxSamples)
              ,"adaptive",      $(Adaptive)
              ,"minsamples",    $(MinSamples)
              ,"maxdist",       $(MaxDist)
  #ifdef DELIGHT             
              ,"axis",          $(SkyAxis)
  #endif              
              ,"coneangle",     radians( $(ConeAngle) )
              ,"samplebase",    $(SampleBase)
              ,"bias",          $(Bias)
              ,"hitmode",       $(HitMode)
              ,"hitsides",      $(HitSides)
              ,"maxvariation",  $(MaxVar)
  #ifndef DELIGHT              
              ,"maxerror",      $(MaxError)
              ,"maxpixeldist",  $(MaxPixelDist)
              ,"seed",          $(seed)
              ,"brightnesswarp",  $(BrtWarp)
  #endif               
              ,"distribution",  $(Distribution)
              ,"falloffmode",   $(FalloffMode)
              ,"falloff",       $(FalloffValue)
              
              ,"environmentmap",    $(EnvMap)
              ,"environmentspace",  $(EnvSpace)
              
              ,"coordsystem",   $(coordsys)
              ,"subset",        $(subset)
              ,"label",         $(label)

              ,"pointbased",    $(pointbased)
              ,"filename",      $(PtcFile)
              ,"maxsolidangle", $(MaxSolidAngle)
              ,"clamp",         $(clamp)
              
              ,"environmentcolor",  $(env_color)
              ,"environmentdir",    $(bent_dir) );

  #endif /* PIXIE */             
#endif  /* AIR */           
              
  if ( $(Invert) == 1 )              
    $(result) = 1 - $(result);            
  ]]></code>
   <offset x="-1338" y="-18"/>
  </node>
  <node icon="" type="rsl_code" author="" id="33" name="floatToColor" label="floatToColor">
   <help>Float to color converter.</help>
   <input>
    <property default="1.000" type="float" value="1.000" name="inFloat" label="inFloat"/>
   </input>
   <output>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="outColor" label="outColor"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  $(outColor) = color($(inFloat), $(inFloat), $(inFloat));
	  ]]></code>
   <offset x="-1119" y="-126"/>
  </node>
  <node icon="" type="" author="mesh" id="34" name="ShadingNormal" label="ShadingNormal">
   <help>Calculate Shading Normal.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="NS" label="NS"/>
   </output>
   <internal>
    <variable name="depth"/>
   </internal>
   <include/>
   <code><![CDATA[
	$(NS) = normalize(N);
	uniform float $(depth);
	
	rayinfo("depth", $(depth));
	if ( $(depth) > 0 )
		$(NS) = faceforward( $(NS), I, $(NS));
	else
	{
		uniform float sides = 2;
		attribute( "Sides", sides );
		if  (sides == 2 )
		  $(NS) = faceforward( $(NS), I, $(NS) );
	}	    
	
	]]></code>
   <offset x="-1591" y="35"/>
  </node>
  <node icon="" type="" author="mesh" id="36" name="me_glass" label="me_glass">
   <help>Raytraced glass</help>
   <input>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="Ns" label="Ns"/>
    <property default="1.500" type="float" value="1.500" name="ior" label="ior"/>
    <property detail="uniform" default="1.000" subtype="switch" type="float" value="1.000" name="twosided" label="twosided"/>
    <property detail="uniform" default="" type="string" value="" name="traceset" label="traceset"/>
    <property detail="uniform" default="-1.000" type="float" value="-1.000" name="maxdist" label="maxdist"/>
    <property detail="uniform" default="2.000" type="float" value="6.000" name="russian_roulette" label="russian_roulette"/>
    <property detail="uniform" default="1.000" type="float" value="1.000" name="krefl" label="krefl"/>
    <property default="color(1.000,1.000,1.000)" type="color" value="color(1.000,1.000,1.000)" name="crefl" label="crefl"/>
    <property detail="uniform" default="1.000" type="float" value="1.000" name="reflsamps" label="reflsamps"/>
    <property detail="uniform" default="0.000" type="float" value="0.000" name="reflblur" label="reflblur"/>
    <property detail="uniform" default="2.000" type="float" value="8.000" name="reflection_depth" label="reflection_depth"/>
    <property detail="uniform" default="1.000" type="float" value="1.000" name="krefr" label="krefr"/>
    <property default="color(1.000,1.000,1.000)" type="color" value="color(1.000,1.000,1.000)" name="crefr" label="crefr"/>
    <property detail="uniform" default="1.000" type="float" value="1.000" name="refrsamps" label="refrsamps"/>
    <property detail="uniform" default="0.000" type="float" value="0.000" name="refrblur" label="refrblur"/>
    <property detail="uniform" default="2.000" type="float" value="8.000" name="refraction_depth" label="refraction_depth"/>
   </input>
   <output>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="result" label="result"/>
   </output>
   <internal>
    <variable name="In"/>
    <variable name="V"/>
    <variable name="reflDir"/>
    <variable name="refrDir"/>
    <variable name="front"/>
    <variable name="kt"/>
    <variable name="kr"/>
    <variable name="raydepth"/>
    <variable name="xsamples"/>
    <variable name="reflsamples"/>
    <variable name="refrsamples"/>
    <variable name="hci"/>
    <variable name="ctmp"/>
    <variable name="rand"/>
    <variable name="ray_label"/>
    <variable name="rreflblur"/>
    <variable name="rrefrblur"/>
    <variable name="c_reflection"/>
    <variable name="c_refraction"/>
    <variable name="refl_c"/>
    <variable name="refr_c"/>
   </internal>
   <include/>
   <code><![CDATA[
	
  vector $(In) = normalize(I);
  vector $(V) = -$(In);
  vector $(reflDir), $(refrDir);
  
  float $(front) = ($(In).N <= 0) ? 1 : 0;
  float $(kt), $(kr), $(rand) = 0;
  uniform float $(raydepth);
  uniform float $(xsamples);
  uniform float $(reflsamples) = $(reflsamps);
  uniform float $(refrsamples) = $(refrsamps);
  
  uniform string $(ray_label) = "";
  
  float $(rreflblur) = $(reflblur);
  float $(rrefrblur) = $(refrblur);

  color $(c_reflection) = 0;
  color $(c_refraction) = 0;
  
  color $(refl_c) = $(crefl);
  color $(refr_c) = $(crefr);
  
  color $(ctmp), $(hci) = 0 ;

  rayinfo("label", $(ray_label));
  rayinfo("depth", $(raydepth));

  if ( $(ior) != 0 )
  { /* relative index of refraction */
    float eta = ( $(front) == 1 ) ? (1 / $(ior) ) : $(ior); 
    fresnel( $(In), $(Ns), eta, $(kr), $(kt), $(reflDir), $(refrDir) );
    $(kt) = $(krefr) * (1 - $(kr));
    $(kr) *= $(krefl);
  }
  else
  {
    float eta = ( $(front) == 1) ? 1 / 1.5 : 1.5;
    $(reflDir) = reflect( $(In), $(Ns) );
    $(refrDir) = refract( $(In), $(Ns), eta);
    $(kr) = $(krefl);
    $(kt) = $(krefr);
  }
  
  if ( $(raydepth) >= $(reflection_depth) )
    $(kr) = 0;
  else if ( $(raydepth) >= $(russian_roulette) )
  {
    $(rand) = random();
    if ( $(rand) >= $(kt) )
      $(kt) = 0;
    else
      $(kr) = 0;
  }
  
  if ( $(raydepth) >= $(refraction_depth) )
    $(kt) = 0;
  
  if ( $(raydepth) > 0 )
  {
    $(refrsamples) = round( $(refrsamples) * 0.25 );
    $(reflsamples) = round( $(reflsamples) * 0.25 );
    if ( $(refrsamples) < 1 )
      $(refrsamples) = 1;
    if ( $(reflsamples) < 1 )
      $(reflsamples) = 1;            
  }
  else if ( $(raydepth) == 0 && $(twosided) == 0 && $(front) == 0 )
  {
    /*
    $(kr) = 0;
    $(kt) = 0;
    */
  }
  
  $(xsamples) = $(reflsamples);
  
  if ( $(raydepth) > 1 )
  {
    if ( $(ray_label) == "b_refr" || $(ray_label) == "b_refl" )
    {
      $(rreflblur) = 0;
      $(rrefrblur) = 0;
    }
  }
     
  if ( $(kr) > 0 && $(xsamples) > 0 )
  {
    $(ctmp) = 0;
    if ( $(rreflblur) > 0 )
    {
      gather( "illuminance", P, $(reflDir), $(rreflblur) * radians(5), 
        $(xsamples),
        "label", "b_refl",
        "subset", $(traceset),
        "maxdist", $(maxdist),
#ifdef DELIGHT
        "surface:Ci", $(hci)
#else        
        "volume:Ci", $(hci)
#endif   
      )
      {
        $(ctmp) += $(hci);
      }
      else
      {
        illuminance( "environment", P + vector(0), $(Ns), 1.57, 
          "send:light:__coneaxis", $(reflDir) )
        {
          $(ctmp) += Cl;
        }
      }
    }
    else
    {
      gather( "illuminance", P, $(reflDir), 0, 
        $(xsamples),
        "label", "reflection",
        "subset", $(traceset),
        "maxdist", $(maxdist),
#ifdef DELIGHT
        "surface:Ci", $(hci)
#else        
        "volume:Ci", $(hci)
#endif      
      )
      {
        $(ctmp) += $(hci);
      }
      else
      {
        illuminance( "environment", P + vector(0), $(Ns), 1.57, 
          "send:light:__coneaxis", $(reflDir))
        {
            $(ctmp) += Cl;
        }
      }       
    }
    $(c_reflection) = $(kr) * $(crefl) * $(ctmp) / $(xsamples); 
    $(result) += $(c_reflection);
  }
  
  $(xsamples) = $(refrsamples);
  
  if ( $(kt) > 0 && $(xsamples) > 0 )
  {
    $(ctmp) = 0;
    if ( $(rrefrblur) > 0 )
    {
      gather( "illuminance", P, $(refrDir), $(rrefrblur) * radians(5), 
        $(xsamples),
        "label", "b_refr",
        "subset", $(traceset),
        "maxdist", $(maxdist),
#ifdef DELIGHT
        "surface:Ci", $(hci)
#else        
        "volume:Ci", $(hci)
#endif        
      )
      {
        $(ctmp) += $(hci);
      }
      else
      {
        illuminance( "environment", P + vector(0), $(Ns), 1.57,
          "send:light:__coneaxis", $(refrDir) )
        {
          $(ctmp) += Cl;
        }
      }
    }
    else
    {
      gather( "illuminance", P, $(refrDir), 0, 
        $(xsamples),
        "label", "refraction",
        "subset", $(traceset),
        "maxdist", $(maxdist),
#ifdef DELIGHT
        "surface:Ci", $(hci)
#else        
        "volume:Ci", $(hci)
#endif         
      )
      {
        $(ctmp) += $(hci);
      }
      else
      {
        illuminance( "environment", P + vector(0), $(Ns), 1.57,
          "send:light:__coneaxis", $(refrDir) )
        {
          $(ctmp) += Cl;
        }
      }       
    }
    $(c_refraction) = $(kt) * $(crefr) * $(ctmp) / $(xsamples); 
    $(result) += $(c_refraction);
  }
  ]]></code>
   <offset x="-1158" y="199"/>
  </node>
  <node icon="" type="rib_code" author="mesh" id="45" name="ReadArchive" label="BUNNY">
   <help>Read RIB Archive node</help>
   <input>
    <property default="Surface &quot;matte&quot;" type="rib" value="Surface &quot;matte&quot;" name="shader" label="shader"/>
    <property provider="attribute" default="" range="All files=*.*:RIB=*.rib" subtype="file" type="string" value="bunny.rib" name="RibArchive" label="Rib Archive"/>
    <property default="" type="rib" value="" name="rib_input" label="rib_input"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="rib_out" label="rib"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
  
  $(shader)
  ReadArchive "$(RibArchive)" 
  $(rib_input)

  ]]></code>
   <offset x="-661" y="149"/>
  </node>
 </nodes>
 <links>
  <link srcNode_id="8" dstNode_id="17" id="33" srcParam="rib" dstParam="Camera"/>
  <link srcNode_id="12" dstNode_id="17" id="34" srcParam="rib_out" dstParam="rib_input"/>
  <link srcNode_id="18" dstNode_id="12" id="36" srcParam="surface" dstParam="shader"/>
  <link srcNode_id="5" dstNode_id="17" id="37" srcParam="rib" dstParam="Globals"/>
  <link srcNode_id="20" dstNode_id="19" id="38" srcParam="Q" dstParam="Pt"/>
  <link srcNode_id="24" dstNode_id="23" id="43" srcParam="Nf" dstParam="N"/>
  <link srcNode_id="19" dstNode_id="25" id="44" srcParam="colorResult" dstParam="BG"/>
  <link srcNode_id="23" dstNode_id="25" id="45" srcParam="result" dstParam="FG"/>
  <link srcNode_id="22" dstNode_id="26" id="47" srcParam="surface" dstParam="surface"/>
  <link srcNode_id="28" dstNode_id="27" id="50" srcParam="outP" dstParam="P"/>
  <link srcNode_id="28" dstNode_id="27" id="51" srcParam="outN" dstParam="N"/>
  <link srcNode_id="29" dstNode_id="28" id="52" srcParam="P" dstParam="P"/>
  <link srcNode_id="30" dstNode_id="28" id="53" srcParam="N" dstParam="N"/>
  <link srcNode_id="25" dstNode_id="31" id="54" srcParam="out" dstParam="BG"/>
  <link srcNode_id="32" dstNode_id="33" id="57" srcParam="result" dstParam="inFloat"/>
  <link srcNode_id="33" dstNode_id="31" id="58" srcParam="outColor" dstParam="FG"/>
  <link srcNode_id="34" dstNode_id="32" id="59" srcParam="NS" dstParam="N"/>
  <link srcNode_id="6" dstNode_id="5" id="60" srcParam="rib" dstParam="Options"/>
  <link srcNode_id="34" dstNode_id="36" id="64" srcParam="NS" dstParam="Ns"/>
  <link srcNode_id="17" dstNode_id="1" id="68" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="26" dstNode_id="10" id="87" srcParam="RIB" dstParam="shader"/>
  <link srcNode_id="36" dstNode_id="22" id="89" srcParam="result" dstParam="Ci"/>
  <link srcNode_id="31" dstNode_id="18" id="90" srcParam="out" dstParam="Ci"/>
  <link srcNode_id="26" dstNode_id="45" id="92" srcParam="RIB" dstParam="shader"/>
  <link srcNode_id="10" dstNode_id="12" id="94" srcParam="rib_out" dstParam="rib_input"/>
 </links>
</nodenet>
