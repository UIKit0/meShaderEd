<!DOCTYPE render_icon>
<nodenet author="meShaderEd" name="render_icon">
 <help>Short NodeNetwork description</help>
 <nodes>
  <node type="connector" id="129" name="connector" label="connector0">
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q" label="Q"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q0" label="Q0"/>
   </output>
   <internal/>
   <include/>
   <offset x="-576" y="98"/>
  </node>
  <node icon="" type="image" author="mesh" id="2" name="imageViewer" label="imageViewer">
   <help>Single image viewer </help>
   <input>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" subtype="file" type="image" value="" name="image" label="image"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label
self.imageName = self.getInputParamValueByName ( 'image' ) 


]]></param_code>
   <offset x="310" y="-43"/>
  </node>
  <node type="connector" id="134" name="connector" label="connector">
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q" label="Q"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q0" label="Q0"/>
   </output>
   <internal/>
   <include/>
   <offset x="-624" y="318"/>
  </node>
  <node icon="FlamesF.png" type="" author="ShadeTree" id="142" name="FlamesF" label="FlamesF">
   <help>This function returned a feathery pattern which range over \[-1,1\].</help>
   <input>
    <property default="0.000" range="0 100 1" subtype="slider" type="float" value="0.000" name="FRM" label="Frame">
     <help>Usually the current frame is passed in for the animation.</help>
    </property>
    <property default="0.000" range="0 1.0 .01" subtype="slider" type="float" value="0.000" name="SPD" label="Speed">
     <help>This is the speed of the animation.</help>
    </property>
    <property default="1.000" range="0 10.0 .01" subtype="slider" type="float" value="1.000" name="SCL" label="Scale">
     <help>This controls the scaling on the flames.</help>
    </property>
    <property default="0.000" range="0 10.0 .01" subtype="slider" type="float" value="0.000" name="OFF" label="Offset">
     <help>This controls the offset on the flames.</help>
    </property>
    <property default="0.700" range=".01 3 .01" subtype="slider" type="float" value="0.700" name="FQ" label="Frequency">
     <help>This controls the frequency of the feathers.
Larger number generate a rippling pattern.</help>
    </property>
    <property default="6.000" range="1 10 1" subtype="slider" type="float" value="6.000" name="OCT" label="Octaves">
     <help>This controls the amount of turbulence in the feathers.
Larger number generate a rippling pattern.</help>
    </property>
    <property default="2.000" range="1.0 10 .1" subtype="slider" type="float" value="2.000" name="HGT" label="Height">
     <help>This controls the height of the flames.</help>
    </property>
    <property default="0.200" range=".01 2 .01" subtype="slider" type="float" value="0.200" name="AMP" label="Amplitude">
     <help>This controls the amplitude of the turbulence.</help>
    </property>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q" label="Q"/>
   </input>
   <output>
    <property default="0.000" type="float" value="0.000" name="result" label="result"/>
   </output>
   <internal>
    <variable name="i"/>
    <variable name="sum"/>
    <variable name="size"/>
    <variable name="Y"/>
    <variable name="QQ"/>
    <variable name="feathery"/>
    <variable name="F"/>
   </internal>
   <include>
    <file name="noises.h"/>
   </include>
   <code><![CDATA[
  float $(i);
  float $(sum) = 0;
  float $(size) = 1;

  float $(Y) = ycomp ( $(Q) ) + $(FRM) * $(SPD);
  point $(QQ) = point ( xcomp ( $(Q) ), $(Y), exp ( $(Y) ) );
  
  for ( $(i) = 0; $(i) < $(OCT) ; $(i) += 1 )
  {
    $(sum) += snoise ( $(size) * $(QQ) + vsnoise ( $(size) * $(QQ) ) * $(FQ) ) / $(size);
    $(size) *= 2;
  }
  float $(feathery) = $(sum) * 1.4;
  
  float $(F) = abs ( $(SCL) * $(feathery) + $(OFF) ) + $(AMP) - ycomp ( $(Q) ) / $(HGT);
  $(result) = $(F);
   
  ]]></code>
   <offset x="-532" y="210"/>
  </node>
  <node icon="FeatheryF.png" type="" author="ShadeTree" id="143" name="FeatheryF" label="FeatheryF">
   <help>This function returned a feathery pattern which range over \[-1,1\].</help>
   <input>
    <property default="4.000" range=".01 20 .01" subtype="slider" type="float" value="4.000" name="FQ" label="Frequency">
     <help>This controls the frequency of the feathers.
Larger number generate a rippling pattern.</help>
    </property>
    <property default="4.000" range="1 10 1" subtype="slider" type="float" value="4.000" name="OCT" label="Octaves">
     <help>This controls the amount of turbulence in the feathers.
Larger number generate a rippling pattern.</help>
    </property>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q" label="Q"/>
   </input>
   <output>
    <property default="0.000" type="float" value="0.000" name="result" label="result"/>
   </output>
   <internal>
    <variable name="i"/>
    <variable name="sum"/>
    <variable name="size"/>
   </internal>
   <include>
    <file name="noises.h"/>
   </include>
   <code><![CDATA[
  float $(i);
  float $(sum) = 0;
  float $(size) = 1;
  
  for ( $(i) = 0 ; $(i) < $(OCT) ; $(i) += 1 )
  {
    $(sum) += snoise ( $(size) * $(Q) + vsnoise ( $(size) * $(Q) ) * $(FQ) ) / $(size);
    $(size) *= 2;
  }
  
  $(result) = $(sum) * 1.4;
   
  ]]></code>
   <offset x="-525" y="481"/>
  </node>
  <node icon="" type="" author="Pixar" id="21" name="ST" label="ST">
   <help>Returns the 2D surface point based on the underlying\n
	    	ST parameterization of your object.</help>
   <input>
    <property detail="uniform" default="0.000" range="0 360 1" subtype="slider" type="float" value="0.000" name="angle" label="angle">
     <help></help>
    </property>
    <property detail="uniform" default="1.000" type="float" value="1.000" name="repeatS" label="repeatS">
     <help></help>
    </property>
    <property detail="uniform" default="1.000" type="float" value="1.000" name="repeatT" label="repeatT">
     <help></help>
    </property>
    <property detail="uniform" default="0.000" type="float" value="0.000" name="offsetS" label="offsetS">
     <help></help>
    </property>
    <property detail="uniform" default="0.000" type="float" value="0.000" name="offsetT" label="offsetT">
     <help></help>
    </property>
    <property detail="uniform" default="0.000" subtype="switch" type="float" value="0.000" name="flipS" label="flipS">
     <help></help>
    </property>
    <property detail="uniform" default="0.000" subtype="switch" type="float" value="0.000" name="flipT" label="flipT">
     <help></help>
    </property>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q" label="Q"/>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="duQ" label="duQ"/>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="dvQ" label="dvQ"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
		setxcomp( $(Q), $(repeatS) * s + $(offsetS));
    setycomp( $(Q), $(repeatT) * t + $(offsetT));
    setzcomp( $(Q), 0);
    
    if ( $(angle) != 0 )
      $(Q) = rotate($(Q), radians($(angle)), point(0,0,0), point(0,0,1)); 

    $(duQ) = vector Du( $(Q) ) * du;
    $(dvQ) = vector Dv( $(Q) ) * dv;
    
    if ( $(flipS) == 1 )
      setxcomp( $(Q), 1 - xcomp($(Q)) );
    if ( $(flipT) == 1 )
      setycomp( $(Q), 1 - ycomp($(Q)) );
  ]]></code>
   <offset x="-805" y="340"/>
  </node>
  <node icon="" type="variable" author="mesh" id="48" name="P" label="P">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-807" y="562"/>
  </node>
  <node icon="" type="variable" author="mesh" id="49" name="N" label="N">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-804" y="620"/>
  </node>
  <node icon="" type="rib" author="mesh" id="59" name="BasicPrimitive" label="icon">
   <help>Basic primitive preview RIB</help>
   <input>
    <property default="" type="rib" value="" name="Globals" label="Render Options"/>
    <property provider="attribute" default="Sphere" range="Sphere:Teapot:Cylinder:Torus:Plane" subtype="selector" type="string" value="Plane" name="Primitive" label="Primitive"/>
    <property provider="attribute" default="tiff" range="tiff:framebuffer:it" subtype="selector" type="string" value="tiff" name="DisplayDriver" label="Display Driver"/>
    <property provider="attribute" default="256" type="int" value="128" name="Width" label="Image width"/>
    <property provider="attribute" default="256" type="int" value="128" name="Height" label="Image height"/>
    <property provider="attribute" default="1.250" type="float" value="1.250" name="EnvIntensity" label="EnvLight Intensity"/>
    <property provider="attribute" default="kitchen_LL.hdr.${TEX}" range="All files=*.*:TEX=*.tex:TDL=*.tdl:TIFF=*.tif" subtype="file" type="string" value="kitchen_LL.hdr.${TEX}" name="EnvMap" label="Environment Map"/>
    <property provider="attribute" default="0.000 0.000 1.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="1.000 1.000 1.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property provider="attribute" default="0.500" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property default="Displacement &quot;null&quot;" type="rib" value="Displacement &quot;null&quot;" name="FG_disp" label="Displace Shader"/>
    <property default="Surface &quot;defaultsurface&quot;" type="rib" value="Surface &quot;defaultsurface&quot;" name="FG_surf" label="Surface Shader"/>
    <property default="Surface &quot;liquidchecker&quot;" type="rib" value="Surface &quot;liquidchecker&quot;" name="BG_surf" label="Background Shader"/>
    <property display="hidden" provider="attribute" default="" type="string" value="Patch &quot;bilinear&quot; &quot;P&quot; [-1 1 0 1 1 0 -1 -1 0 1 -1 0]" name="PrimitiveCode" label="PrimitiveCode"/>
   </input>
   <output>
    <property default="${TempPath}/${NODELABEL}.tif" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[
print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'Primitive' ).value == 'Sphere': 
  self.getInputParamByName ( 'PrimitiveCode' ).value = "Rotate 60 1 0 0\n Sphere 1.0 -1.0 1.0 360"
  
if self.getInputParamByName ( 'Primitive' ).value == 'Teapot': 
  self.getInputParamByName ( 'PrimitiveCode' ).value = """
      Rotate 0 0 1 0
      AttributeBegin
        Scale 0.35 0.35 0.35
        Translate -0.6 -1 0
        Rotate 120 -1 0 0
        Rotate 30 0 0 1
        Geometry \"teapot\"
      AttributeEnd
      """
      
if self.getInputParamByName ( 'Primitive' ).value == 'Cylinder': 
  self.getInputParamByName ( 'PrimitiveCode' ).value = "Rotate 60 1 0 0\n Cylinder 1 -0.5 0.5 360"
  
if self.getInputParamByName ( 'Primitive' ).value == 'Torus': 
  self.getInputParamByName ( 'PrimitiveCode' ).value = """
  Rotate 45 1 0 0
  Torus 0.7 0.4 0.0 360 360
  """

if self.getInputParamByName ( 'Primitive' ).value == 'Plane': 
  self.getInputParamByName ( 'PrimitiveCode' ).value = 'Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]'


]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}:${ProjectSearchPath}:${ProjectSearchShaders}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}:${ProjectSearchPath}:${ProjectSearchTextures}"
  Option "searchpath" "archive" "&:@:.:~:${ArchiveSearchPath}:${ProjectSearchPath}"
  
  $(Globals)
 

  ### Output image
  Display "$(ImageFile)" "$(DisplayDriver)" "rgba"
  
  Format $(Width) $(Height) 1.0

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.0 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [$(EnvIntensity)] 
                                "uniform string meEnvMap_EnvMap" ["$(EnvMap)"]
                                "uniform string meEnvMap_Space" ["_environment"]

    AttributeBegin 
      
      
      
      Color [$(Color)]
      Opacity [$(Opacity)]

      $(FG_disp)
      $(FG_surf) 
      
      $(PrimitiveCode)
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      $(BG_surf) 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="132" y="-45"/>
  </node>
  <node icon="" type="rib_code" author="mesh" id="60" name="RenderGlobals" label="RenderGlobals">
   <help>RenderGlobals options</help>
   <input>
    <property provider="attribute" default="hidden" range="hidden:raytrace:photon:zbuffer:opengl" subtype="selector" type="string" value="hidden" name="Hider" label="Hider"/>
    <property provider="attribute" default="1" subtype="switch" type="int" value="1" name="Jitter" label="Jitter"/>
    <property provider="attribute" default="1.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="4" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="catmull-rom" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="2.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property default="" type="rib" value="" name="Options" label="Options"/>
    <property default="" type="rib" value="" name="Channels" label="Channels"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="rib" label="rib"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
  ##Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}:${ProjectSearchPath}:${ProjectSearchShaders}"
  ##Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}:${ProjectSearchPath}:${ProjectSearchTextures}"

  Hider "hidden" "int jitter" [1]

  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  $(Options)
  
  $(Channels)
  ]]></code>
   <offset x="-34" y="-248"/>
  </node>
  <node icon="" type="surface" author="mesh" id="61" name="surface" label="icon_surf">
   <help>Basic surface shader.</help>
   <input>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="Ci" label="Ci"/>
    <property default="color(1.000,1.000,1.000)" type="color" value="color(1.000,1.000,1.000)" name="Oi" label="Oi"/>
   </input>
   <output>
    <property default="Surface &quot;${NODELABEL}&quot;" type="rib" value="Surface &quot;${NODELABEL}&quot;" name="surface" label="surface"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
#define SURFACE_SHADER ${INSTANCENAME}
surface ${INSTANCENAME} ( 
${PARAMS} 
)
{
  /* CODE BEGIN ${INSTANCENAME} */
  Ci = $(Ci) * $(Oi); 
  Oi = $(Oi);
  /* CODE END ${INSTANCENAME} */
}
	]]></code>
   <offset x="-41" y="86"/>
  </node>
  <node icon="" type="displacement" author="mesh" id="62" name="displace" label="displace">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,1.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="Displacement &quot;${NODELABEL}&quot;" type="rib" value="Displacement &quot;${NODELABEL}&quot;" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
#define DISPLACEMENT_SHADER ${INSTANCENAME}
displacement ${INSTANCENAME} ( 
${PARAMS} 
)
{
/* CODE BEGIN ${INSTANCENAME} */
   P = $(P); 
	 N = $(N);
/* CODE END ${INSTANCENAME} */
}		
	]]></code>
   <offset x="-37" y="-105"/>
  </node>
  <node icon="" type="rsl_code" author="" id="64" name="floatToColor" label="floatToColor">
   <help>Float to color converter.</help>
   <input>
    <property default="1.000" type="float" value="1.000" name="inFloat" label="inFloat"/>
   </input>
   <output>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="outColor" label="outColor"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  $(outColor) = color($(inFloat), $(inFloat), $(inFloat));
	  ]]></code>
   <offset x="-267" y="135"/>
  </node>
  <node icon="" type="" author="Pixar" id="95" name="SurfaceP" label="SurfaceP0">
   <help>Returns the 3D point on the surface of your object.</help>
   <input>
    <property detail="uniform" default="" type="string" value="" name="Space" label="Space">
     <help>The name of a coordinate system for the manifold.
		    In addition to your custom coordinate systems
		    you can use "current", "world", "object", "shader"
		    and "NDC" (screen coordinates).</help>
    </property>
    <property default="1.000" range="0 10 .001" subtype="slider" type="float" value="1.000" name="Frequency" label="Frequency">
     <help>Controls the scale of the manifold.  Note
		    that increasing the frequency of the manifold will result
		    in decreasing the scale of a feature.</help>
    </property>
    <property default="1.000" subtype="switch" type="float" value="1.000" name="IgnorePref" label="IgnorePref">
     <help>If you have attached __Pref geometry and,
		    for debugging purposes, want to ignore it, click
		    here.  Note that it's much more efficient to simply
		    remove the reference geometry if it's not needed.</help>
    </property>
    <property detail="varying" provider="primitive" default="point(-1.000,-1.000,-1.000)" type="point" value="point(-1.000,-1.000,-1.000)" name="__Pref" label="__Pref"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q" label="Q"/>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="duQ" label="duQ"/>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="dvQ" label="dvQ"/>
   </output>
   <internal>
    <variable name="sys"/>
   </internal>
   <include/>
   <code><![CDATA[

	uniform string $(sys);
	
	if ( $(Space) == "" )
    $(sys) = "shader";
  else
    $(sys) = $(Space);
      
  if ( xcomp(__Pref) == -1e10 || $(IgnorePref) != 0 )
  {
    $(Q) = $(Frequency) * transform( $(sys), P );
  	$(duQ) = vtransform( $(sys), dPdu * du * $(Frequency) );
  	$(dvQ) = vtransform( $(sys), dPdv * dv * $(Frequency) );
  }
  else 
  {
    $(Q) = $(Frequency) * transform( $(sys), __Pref );
    $(duQ) = vector Du( $(Q) ) * du;
    $(dvQ) = vector Dv( $(Q) ) * dv;
  }
	]]></code>
   <offset x="-805" y="165"/>
  </node>
  <node icon="" type="rsl_code" author="" id="97" name="vectorToColor" label="vectorToColor">
   <help>Vector to color converter.</help>
   <input>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="inVector" label="inVector"/>
   </input>
   <output>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="outColor" label="outColor"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  $(outColor) = color(xcomp($(inVector)),ycomp($(inVector)),zcomp($(inVector)) );
	  ]]></code>
   <offset x="-280" y="13"/>
  </node>
  <node icon="" type="connector" author="" id="108" name="connector" label="connector1">
   <input>
    <property default="1.000" type="float" value="1.000" name="inFloat" label="inFloat"/>
   </input>
   <output>
    <property default="1.000" type="float" value="1.000" name="inFloat0" label="inFloat0"/>
   </output>
   <internal/>
   <include/>
   <offset x="-340" y="295"/>
  </node>
  <node icon="RoughF.png" type="" author="ShadeTree" id="121" name="RoughF" label="RoughF">
   <help>This function generates a roughed up pattern.</help>
   <input>
    <property default="0.000" range="X:Y:Z" subtype="selector" type="float" value="0.000" name="DIR" label="Axis">
     <help>The direction of the pits</help>
    </property>
    <property default="20.000" range="1 100 1" subtype="slider" type="float" value="20.000" name="FQ" label="Frequency">
     <help>This controls the frequency or the density of the pits.</help>
    </property>
    <property default="5.000" range="1 20 .1" subtype="slider" type="float" value="20.000" name="PIT" label="Size">
     <help>This controls the size of the pits.</help>
    </property>
    <property default="0.100" range="0 1 .01" subtype="slider" type="float" value="1.000" name="DEP" label="Depth">
     <help>This controls the depth of the pits.</help>
    </property>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q" label="Q"/>
   </input>
   <output>
    <property default="0.000" type="float" value="0.000" name="result" label="result"/>
   </output>
   <internal/>
   <include>
    <file name="noises.h"/>
   </include>
   <code><![CDATA[
    
    if ( $(DIR) == 2 ) 
      setzcomp ( $(Q), zcomp ( $(Q) ) / $(PIT) );
    else if ( $(DIR) == 1 ) 
      setycomp ( $(Q), ycomp ( $(Q) ) / $(PIT) );
    else 
      setxcomp ( $(Q), xcomp ( $(Q) ) / $(PIT) );

    $(result) = $(DEP) * snoise ( $(Q) * $(FQ) );
  ]]></code>
   <offset x="-513" y="-20"/>
  </node>
  <node type="connector" id="122" name="connector" label="connector2">
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q" label="Q"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q0" label="Q0"/>
   </output>
   <internal/>
   <include/>
   <offset x="-648" y="215"/>
  </node>
 </nodes>
 <links>
  <link srcNode_id="59" dstNode_id="2" id="1" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="64" dstNode_id="61" id="9" srcParam="outColor" dstParam="Ci"/>
  <link srcNode_id="61" dstNode_id="59" id="12" srcParam="surface" dstParam="FG_surf"/>
  <link srcNode_id="122" dstNode_id="129" id="14" srcParam="Q0" dstParam="Q"/>
  <link srcNode_id="95" dstNode_id="122" id="15" srcParam="Q" dstParam="Q"/>
  <link srcNode_id="108" dstNode_id="64" id="16" srcParam="inFloat0" dstParam="inFloat"/>
  <link srcNode_id="129" dstNode_id="121" id="30" srcParam="Q0" dstParam="Q"/>
  <link srcNode_id="122" dstNode_id="134" id="39" srcParam="Q0" dstParam="Q"/>
  <link srcNode_id="134" dstNode_id="142" id="57" srcParam="Q0" dstParam="Q"/>
  <link srcNode_id="134" dstNode_id="143" id="59" srcParam="Q0" dstParam="Q"/>
  <link srcNode_id="143" dstNode_id="108" id="60" srcParam="result" dstParam="inFloat"/>
 </links>
</nodenet>
