<!DOCTYPE render_icon>
<nodenet author="meShaderEd" name="render_icon">
 <help>Short NodeNetwork description</help>
 <nodes>
  <node icon="" type="rsl_code" author="" id="64" name="floatToColor" label="floatToColor">
   <help>Float to color converter.</help>
   <input>
    <property default="1.000" type="float" value="1.000" name="inFloat" label="inFloat"/>
   </input>
   <output>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="outColor" label="outColor"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  $(outColor) = color($(inFloat), $(inFloat), $(inFloat));
	  ]]></code>
   <offset x="-281" y="-52"/>
  </node>
  <node icon="FilteredNoiseF.png" type="" author="Pixar" id="96" name="FilteredNoiseV" label="FilteredNoiseV">
   <help>Vector filtered noise.</help>
   <input>
    <property default="1.000" range="0 100 .1" subtype="slider" type="float" value="16.000" name="frequency" label="frequency"/>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q" label="Q"/>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="duQ" label="duQ"/>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="dvQ" label="dvQ"/>
   </input>
   <output>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="result" label="result"/>
   </output>
   <internal>
    <variable name="pp"/>
    <variable name="dppu"/>
    <variable name="dppv"/>
   </internal>
   <include>
    <file name="pxslUtil.h"/>
   </include>
   <code><![CDATA[
	  point $(pp) = $(frequency) * $(Q);
    vector $(dppu) = $(frequency) * $(duQ);
    vector $(dppv) = $(frequency) * $(dvQ);
    $(result) = pxslFilteredVNoise ( $(pp), $(dppu), $(dppv) );
	  ]]></code>
   <offset x="-500" y="143"/>
  </node>
  <node icon="" type="image" author="mesh" id="2" name="imageViewer" label="imageViewer">
   <help>Single image viewer </help>
   <input>
    <property default="" range="All files=*.*:TIFF=*.tif:PNG=*.png:JPEG=*.jpg" subtype="file" type="image" value="" name="image" label="image"/>
   </input>
   <output/>
   <internal/>
   <include/>
   <param_code><![CDATA[
#$(output) = $(input)
#import core.imageNode
#import code.nodeParam

print ":: Hello from %s XML code !!!" % self.label
self.imageName = self.getInputParamValueByName ( 'image' ) 


]]></param_code>
   <offset x="327" y="-276"/>
  </node>
  <node icon="" type="rsl_code" author="" id="97" name="vectorToColor" label="vectorToColor">
   <help>Vector to color converter.</help>
   <input>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="inVector" label="inVector"/>
   </input>
   <output>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="outColor" label="outColor"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  $(outColor) = color(xcomp($(inVector)),ycomp($(inVector)),zcomp($(inVector)) );
	  ]]></code>
   <offset x="-276" y="124"/>
  </node>
  <node icon="noiseF.png" type="" author="Libero Spagnolini" id="92" name="noiseF" label="noiseF">
   <help>Simple noise float.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="p" label="p"/>
    <property default="10.000" type="float" value="64.000" name="freq" label="freq"/>
   </input>
   <output>
    <property default="0.000" type="float" value="0.000" name="noise" label="noise"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  $(noise) = noise($(p) * $(freq));
	  ]]></code>
   <offset x="-553" y="-211"/>
  </node>
  <node icon="Worley.png" type="" author="Pixar" id="77" name="Worley" label="Worley">
   <help>"Worley noise" from "A Cellular Texture Basis Function", SIGGRAPH '96</help>
   <input>
    <property default="4.000" range="0.1 100 0.1" subtype="slider" type="float" value="4.000" name="frequency" label="frequency">
     <help>Controls the size of the cells. Higher frequencies make smaller cells.</help>
    </property>
    <property detail="uniform" default="0.000" range="Euclidian:Manhattan" subtype="selector" type="float" value="0.000" name="distancemetric" label="distancemetric">
     <help>The means to measure distances to neighboring cells.  
		      Manhattan distance gives more rectangular shapes and Euclidian distance
		    gives more spherical shapes.</help>
    </property>
    <property default="0.750" range="0 1 0.01" subtype="slider" type="float" value="1.000" name="jitter" label="jitter">
     <help>Controls the distortion of the cells.</help>
    </property>
    <property default="1.000" subtype="switch" type="float" value="1.000" name="clamp" label="clamp">
     <help>Causes resulting distances to be clamped to the range 0->1</help>
    </property>
    <property default="0.800" range="-2 2 0.01" subtype="slider" type="float" value="-0.940" name="c1" label="c1">
     <help>Multiplier for the distances to the first feature.</help>
    </property>
    <property default="-0.200" range="-2 2 0.01" subtype="slider" type="float" value="1.290" name="c2" label="c2">
     <help>Multiplier for the distances to the second feature.</help>
    </property>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q" label="Q"/>
   </input>
   <output>
    <property default="0.000" type="float" value="0.000" name="result" label="result"/>
   </output>
   <internal>
    <variable name="f1"/>
    <variable name="f2"/>
    <variable name="thiscell"/>
    <variable name="testcell"/>
    <variable name="i"/>
    <variable name="j"/>
    <variable name="k"/>
    <variable name="pp"/>
    <variable name="pos"/>
    <variable name="offset"/>
    <variable name="dist"/>
   </internal>
   <include/>
   <code><![CDATA[
/*  Worley noise -- 3-D, 2-feature version.*/
float $(f1), $(f2);
point $(pp) = $(frequency) * $(Q);
point $(thiscell) = point ( floor ( xcomp ( $(pp) ) ) + 0.5, 
                            floor ( ycomp ( $(pp) ) ) + 0.5, 
                            floor ( zcomp ( $(pp) ) ) + 0.5 );
$(f1) = $(f2) = 1000;
uniform float $(i), $(j), $(k);
for ( $(i) = -1;  $(i) <= 1;  $(i) += 1 ) 
{
  for ( $(j) = -1;  $(j) <= 1;  $(j) += 1 ) 
  {
    for ( $(k) = -1;  $(k) <= 1;  $(k) += 1 ) 
    {
      point $(testcell) = $(thiscell) + vector ( $(i), $(j) , $(k) );
      point $(pos) = $(testcell) + $(jitter) * ( vector cellnoise ( $(testcell) ) - 0.5 );
      vector $(offset) = $(pos) - $(pp);
      float $(dist);
      if ( $(distancemetric) == 0 )  /* "Euclidian" */	
        $(dist) = $(offset).$(offset);
      else
      {
        $(dist) = abs ( xcomp ( $(offset) ) ) + abs ( ycomp ( $(offset) ) ) + abs ( zcomp ( $(offset) ) );
      }
      if ( $(dist) < $(f1) ) 
      {
        $(f2) = $(f1);
        $(f1) = $(dist);
      } 
      else if ( $(dist) < $(f2) ) 
      {
        $(f2) = $(dist);
      }
    }
  }
}
if ( $(distancemetric) == 0 )  /* "Euclidian" */  	
{
  $(f1) = sqrt ( $(f1) );
  $(f2) = sqrt ( $(f2) );
}
$(result) = $(f1) * $(c1) + $(f2) * $(c2);
if ( $(clamp) != 0 )
  $(result) = clamp( $(result), 0, 1 );

]]></code>
   <offset x="-365" y="-300"/>
  </node>
  <node icon="" type="" author="Libero Spagnolini" id="78" name="hump" label="hump">
   <help>Hump by an offset value.</help>
   <input>
    <property default="0.000" type="float" value="0.000" name="value" label="value"/>
    <property default="0.400" type="float" value="0.100" name="km" label="km"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="outP" label="outP"/>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="outN" label="outN"/>
   </output>
   <internal>
    <variable name="i"/>
    <variable name="PP"/>
    <variable name="size"/>
    <variable name="magnitude"/>
    <variable name="Ndiff"/>
    <variable name="fw"/>
   </internal>
   <include>
    <file name="filterwidth.h"/>
    <file name="filtered.h"/>
   </include>
   <code><![CDATA[
	  normal $(Ndiff) = normalize(N) - normalize(Ng);
    $(outP) = P - $(km) * $(value) * normalize(N);
    $(outN) = calculatenormal($(outP)) + $(Ndiff);
    ]]></code>
   <offset x="-163" y="-280"/>
  </node>
  <node icon="noiseF.png" type="" author="Pixar" id="93" name="FilteredNoiseF" label="FilteredNoiseF">
   <help>Float filtered noise.</help>
   <input>
    <property default="1.000" range="0 100 .1" subtype="slider" type="float" value="16.000" name="frequency" label="frequency"/>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q" label="Q"/>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="duQ" label="duQ"/>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="dvQ" label="dvQ"/>
   </input>
   <output>
    <property default="0.000" type="float" value="0.000" name="result" label="result"/>
   </output>
   <internal>
    <variable name="pp"/>
    <variable name="dppu"/>
    <variable name="dppv"/>
   </internal>
   <include>
    <file name="pxslUtil.h"/>
   </include>
   <code><![CDATA[
	  point $(pp) = $(frequency) * $(Q);
    vector $(dppu) = $(frequency) * $(duQ);
    vector $(dppv) = $(frequency) * $(dvQ);
    $(result) = pxslFilteredFNoise ( $(pp), $(dppu), $(dppv) );
	  ]]></code>
   <offset x="-498" y="-41"/>
  </node>
  <node icon="" type="variable" author="mesh" id="48" name="P" label="P">
   <help>Global point P.</help>
   <input/>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	  #ifdef SURFACE_SHADER
	  $(P) = P;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(P) = P;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(P) = Ps;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(P) = Pv;
	  #endif
	  ]]></code>
   <offset x="-209" y="-422"/>
  </node>
  <node icon="" type="variable" author="mesh" id="49" name="N" label="N">
   <help>Global normal N.</help>
   <input/>
   <output>
    <property default="normal(0.000,0.000,0.000)" type="normal" value="normal(0.000,0.000,0.000)" name="N" label="N"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
	#ifdef SURFACE_SHADER
	  $(N) = N;
	  #endif
	  #ifdef DISPLACEMENT_SHADER
	  $(N) = N;
	  #endif
	  #ifdef LIGHT_SHADER
	  $(N) = Ns;
	  #endif
	  #ifdef VOLUME_SHADER
	  $(N) = Nv;
	  #endif
	]]></code>
   <offset x="-205" y="-351"/>
  </node>
  <node icon="" type="" author="Pixar" id="21" name="ST" label="ST">
   <help>Returns the 2D surface point based on the underlying\n
	    	ST parameterization of your object.</help>
   <input>
    <property detail="uniform" default="0.000" range="0 360 1" subtype="slider" type="float" value="0.000" name="angle" label="angle">
     <help></help>
    </property>
    <property detail="uniform" default="1.000" type="float" value="1.000" name="repeatS" label="repeatS">
     <help></help>
    </property>
    <property detail="uniform" default="1.000" type="float" value="1.000" name="repeatT" label="repeatT">
     <help></help>
    </property>
    <property detail="uniform" default="0.000" type="float" value="0.000" name="offsetS" label="offsetS">
     <help></help>
    </property>
    <property detail="uniform" default="0.000" type="float" value="0.000" name="offsetT" label="offsetT">
     <help></help>
    </property>
    <property detail="uniform" default="0.000" subtype="switch" type="float" value="0.000" name="flipS" label="flipS">
     <help></help>
    </property>
    <property detail="uniform" default="0.000" subtype="switch" type="float" value="0.000" name="flipT" label="flipT">
     <help></help>
    </property>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q" label="Q"/>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="duQ" label="duQ"/>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="dvQ" label="dvQ"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
		setxcomp( $(Q), $(repeatS) * s + $(offsetS));
    setycomp( $(Q), $(repeatT) * t + $(offsetT));
    setzcomp( $(Q), 0);
    
    if ( $(angle) != 0 )
      $(Q) = rotate($(Q), radians($(angle)), point(0,0,0), point(0,0,1)); 

    $(duQ) = vector Du( $(Q) ) * du;
    $(dvQ) = vector Dv( $(Q) ) * dv;
    
    if ( $(flipS) == 1 )
      setxcomp( $(Q), 1 - xcomp($(Q)) );
    if ( $(flipT) == 1 )
      setycomp( $(Q), 1 - ycomp($(Q)) );
  ]]></code>
   <offset x="-806" y="-194"/>
  </node>
  <node icon="" type="rib" author="mesh" id="59" name="BasicPrimitive" label="BasicPrimitive">
   <help>Basic primitive preview RIB</help>
   <input>
    <property default="" type="rib" value="" name="Globals" label="Render Options"/>
    <property provider="attribute" default="Sphere" range="Sphere:Teapot:Cylinder:Torus:Plane" subtype="selector" type="string" value="Sphere" name="Primitive" label="Primitive"/>
    <property provider="attribute" default="tiff" range="tiff:framebuffer:it" subtype="selector" type="string" value="tiff" name="DisplayDriver" label="Display Driver"/>
    <property provider="attribute" default="256" type="int" value="128" name="Width" label="Image width"/>
    <property provider="attribute" default="256" type="int" value="128" name="Height" label="Image height"/>
    <property provider="attribute" default="1.250" type="float" value="1.250" name="EnvIntensity" label="EnvLight Intensity"/>
    <property provider="attribute" default="kitchen_LL.hdr.${TEX}" range="All files=*.*:TEX=*.tex:TDL=*.tdl:TIFF=*.tif" subtype="file" type="string" value="kitchen_LL.hdr.${TEX}" name="EnvMap" label="Environment Map"/>
    <property provider="attribute" default="0.000 0.000 1.000" type="color" value="0.000 0.000 1.000" name="Color" label="Color"/>
    <property provider="attribute" default="1.000 1.000 1.000" type="color" value="1.000 1.000 1.000" name="Opacity" label="Opacity"/>
    <property provider="attribute" default="0.500" type="float" value="0.500" name="DisplaceBound" label="Displacement Bound"/>
    <property default="Displacement &quot;null&quot;" type="rib" value="Displacement &quot;null&quot;" name="FG_disp" label="Displace Shader"/>
    <property default="Surface &quot;defaultsurface&quot;" type="rib" value="Surface &quot;defaultsurface&quot;" name="FG_surf" label="Surface Shader"/>
    <property default="Surface &quot;liquidchecker&quot;" type="rib" value="Surface &quot;liquidchecker&quot;" name="BG_surf" label="Background Shader"/>
    <property display="hidden" provider="attribute" default="" type="string" value="Rotate 60 1 0 0&#xa; Sphere 1.0 -1.0 1.0 360" name="PrimitiveCode" label="PrimitiveCode"/>
   </input>
   <output>
    <property default="${TempPath}/${NODELABEL}.tif" type="image" value="${TempPath}/${NODELABEL}.tif" name="ImageFile" label="ImageFile"/>
   </output>
   <internal/>
   <include/>
   <param_code><![CDATA[
print ":: Hello from %s XML code !!!" % self.label

if self.getInputParamByName ( 'Primitive' ).value == 'Sphere': 
  self.getInputParamByName ( 'PrimitiveCode' ).value = "Rotate 60 1 0 0\n Sphere 1.0 -1.0 1.0 360"
  
if self.getInputParamByName ( 'Primitive' ).value == 'Teapot': 
  self.getInputParamByName ( 'PrimitiveCode' ).value = """
      Rotate 0 0 1 0
      AttributeBegin
        Scale 0.35 0.35 0.35
        Translate -0.6 -1 0
        Rotate 120 -1 0 0
        Rotate 30 0 0 1
        Geometry \"teapot\"
      AttributeEnd
      """
      
if self.getInputParamByName ( 'Primitive' ).value == 'Cylinder': 
  self.getInputParamByName ( 'PrimitiveCode' ).value = "Rotate 60 1 0 0\n Cylinder 1 -0.5 0.5 360"
  
if self.getInputParamByName ( 'Primitive' ).value == 'Torus': 
  self.getInputParamByName ( 'PrimitiveCode' ).value = """
  Rotate 45 1 0 0
  Torus 0.7 0.4 0.0 360 360
  """

if self.getInputParamByName ( 'Primitive' ).value == 'Plane': 
  self.getInputParamByName ( 'PrimitiveCode' ).value = 'Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]'


]]></param_code>
   <code><![CDATA[
  Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}:${ProjectSearchPath}:${ProjectSearchShaders}"
  Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}:${ProjectSearchPath}:${ProjectSearchTextures}"
  Option "searchpath" "archive" "&:@:.:~:${ArchiveSearchPath}:${ProjectSearchPath}"
  
  $(Globals)
 

  ### Output image
  Display "$(ImageFile)" "$(DisplayDriver)" "rgba"
  
  Format $(Width) $(Height) 1.0

  Projection "perspective" "fov" 45
  Translate 0 0 3.0

  Attribute "displacementbound" "float sphere" [$(DisplaceBound)]

  WorldBegin

    ReverseOrientation 
	
    TransformBegin
      Rotate -90 1 0 0
      CoordinateSystem "_environment"
    TransformEnd

    LightSource "distantlight" 1 "intensity" 1.0 "from" [-2 2 -3] "to" [0 0 0]
    LightSource "distantlight" 2 "intensity" 0.4 "from" [6 -3 0] "to" [0 0 0]
    LightSource "meEnvLight" 3  "uniform float Intensity" [$(EnvIntensity)] 
                                "uniform string meEnvMap_EnvMap" ["$(EnvMap)"]
                                "uniform string meEnvMap_Space" ["_environment"]

    AttributeBegin 
      
      
      
      Color [$(Color)]
      Opacity [$(Opacity)]

      $(FG_disp)
      $(FG_surf) 
      
      $(PrimitiveCode)
      
    AttributeEnd 
      
    AttributeBegin 
      Scale 7 7 7
      Translate 0 0 2
      $(BG_surf) 
      
      Patch "bilinear" "P" [-1 1 0 1 1 0 -1 -1 0 1 -1 0]
    AttributeEnd  

  WorldEnd
  ]]></code>
   <offset x="132" y="-284"/>
  </node>
  <node icon="" type="rib_code" author="mesh" id="60" name="RenderGlobals" label="RenderGlobals">
   <help>RenderGlobals options</help>
   <input>
    <property provider="attribute" default="hidden" range="hidden:raytrace:photon:zbuffer:opengl" subtype="selector" type="string" value="hidden" name="Hider" label="Hider"/>
    <property provider="attribute" default="1" subtype="switch" type="int" value="1" name="Jitter" label="Jitter"/>
    <property provider="attribute" default="1.000" type="float" value="1.000" name="ShadingRate" label="Shading rate"/>
    <property provider="attribute" default="4" type="int" value="4" name="Samples" label="Samples"/>
    <property provider="attribute" default="catmull-rom" range="box:triangle:catmull-rom:gaussian:sinc:blackman-harris:mitchell:separable-catmull-rom:lanczos:bessel" subtype="selector" type="string" value="catmull-rom" name="Filter" label="Filter"/>
    <property provider="attribute" default="2.000" type="float" value="2.000" name="FilterWidth" label="Filter width"/>
    <property default="" type="rib" value="" name="Options" label="Options"/>
    <property default="" type="rib" value="" name="Channels" label="Channels"/>
   </input>
   <output>
    <property default="" type="rib" value="" name="rib" label="rib"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
  ##Option "searchpath" "shader" "&:@:.:~:${ShaderSearchPath}:${ProjectSearchPath}:${ProjectSearchShaders}"
  ##Option "searchpath" "texture" "&:@:.:~:${TextureSearchPath}:${ProjectSearchPath}:${ProjectSearchTextures}"

  Hider "hidden" "int jitter" [1]

  PixelSamples $(Samples) $(Samples)
  PixelFilter "$(Filter)" $(FilterWidth) $(FilterWidth)
  ShadingRate $(ShadingRate)

  $(Options)
  
  $(Channels)
  ]]></code>
   <offset x="-34" y="-441"/>
  </node>
  <node icon="" type="surface" author="mesh" id="61" name="surface" label="icon_surf">
   <help>Basic surface shader.</help>
   <input>
    <property default="color(0.000,0.000,0.000)" type="color" value="color(0.000,0.000,0.000)" name="Ci" label="Ci"/>
    <property default="color(1.000,1.000,1.000)" type="color" value="color(1.000,1.000,1.000)" name="Oi" label="Oi"/>
   </input>
   <output>
    <property default="Surface &quot;${NODELABEL}&quot;" type="rib" value="Surface &quot;${NODELABEL}&quot;" name="surface" label="surface"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
#define SURFACE_SHADER ${INSTANCENAME}
surface ${INSTANCENAME} ( 
${PARAMS} 
)
{
  /* CODE BEGIN ${INSTANCENAME} */
  Ci = $(Ci) * $(Oi); 
  Oi = $(Oi);
  /* CODE END ${INSTANCENAME} */
}
	]]></code>
   <offset x="-33" y="-85"/>
  </node>
  <node icon="" type="displacement" author="mesh" id="62" name="displace" label="displace">
   <help>Root displacement shader.</help>
   <input>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="P" label="P"/>
    <property default="normal(0.000,1.000,0.000)" type="normal" value="normal(0.000,1.000,0.000)" name="N" label="N"/>
   </input>
   <output>
    <property default="Displacement &quot;${NODELABEL}&quot;" type="rib" value="Displacement &quot;${NODELABEL}&quot;" name="disp" label="disp"/>
   </output>
   <internal/>
   <include/>
   <code><![CDATA[
#define DISPLACEMENT_SHADER ${INSTANCENAME}
displacement ${INSTANCENAME} ( 
${PARAMS} 
)
{
/* CODE BEGIN ${INSTANCENAME} */
   P = $(P); 
	 N = $(N);
/* CODE END ${INSTANCENAME} */
}		
	]]></code>
   <offset x="-32" y="-305"/>
  </node>
  <node icon="" type="" author="Pixar" id="95" name="SurfaceP" label="SurfaceP0">
   <help>Returns the 3D point on the surface of your object.</help>
   <input>
    <property detail="uniform" default="" type="string" value="" name="Space" label="Space">
     <help>The name of a coordinate system for the manifold.
		    In addition to your custom coordinate systems
		    you can use "current", "world", "object", "shader"
		    and "NDC" (screen coordinates).</help>
    </property>
    <property default="1.000" range="0 10 .001" subtype="slider" type="float" value="1.000" name="Frequency" label="Frequency">
     <help>Controls the scale of the manifold.  Note
		    that increasing the frequency of the manifold will result
		    in decreasing the scale of a feature.</help>
    </property>
    <property default="1.000" subtype="switch" type="float" value="1.000" name="IgnorePref" label="IgnorePref">
     <help>If you have attached __Pref geometry and,
		    for debugging purposes, want to ignore it, click
		    here.  Note that it's much more efficient to simply
		    remove the reference geometry if it's not needed.</help>
    </property>
    <property detail="varying" provider="primitive" default="point(-1.000,-1.000,-1.000)" type="point" value="point(-1.000,-1.000,-1.000)" name="__Pref" label="__Pref"/>
   </input>
   <output>
    <property default="point(0.000,0.000,0.000)" type="point" value="point(0.000,0.000,0.000)" name="Q" label="Q"/>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="duQ" label="duQ"/>
    <property default="vector(0.000,0.000,0.000)" type="vector" value="vector(0.000,0.000,0.000)" name="dvQ" label="dvQ"/>
   </output>
   <internal>
    <variable name="sys"/>
   </internal>
   <include/>
   <code><![CDATA[

	uniform string $(sys);
	
	if ( $(Space) == "" )
    $(sys) = "shader";
  else
    $(sys) = $(Space);
      
  if ( xcomp(__Pref) == -1e10 || $(IgnorePref) != 0 )
  {
    $(Q) = $(Frequency) * transform( $(sys), P );
  	$(duQ) = vtransform( $(sys), dPdu * du * $(Frequency) );
  	$(dvQ) = vtransform( $(sys), dPdv * dv * $(Frequency) );
  }
  else 
  {
    $(Q) = $(Frequency) * transform( $(sys), __Pref );
    $(duQ) = vector Du( $(Q) ) * du;
    $(dvQ) = vector Dv( $(Q) ) * dv;
  }
	]]></code>
   <offset x="-800" y="78"/>
  </node>
 </nodes>
 <links>
  <link srcNode_id="59" dstNode_id="2" id="1" srcParam="ImageFile" dstParam="image"/>
  <link srcNode_id="95" dstNode_id="93" id="3" srcParam="duQ" dstParam="duQ"/>
  <link srcNode_id="77" dstNode_id="78" id="36" srcParam="result" dstParam="value"/>
  <link srcNode_id="78" dstNode_id="62" id="38" srcParam="outN" dstParam="N"/>
  <link srcNode_id="95" dstNode_id="96" id="7" srcParam="dvQ" dstParam="dvQ"/>
  <link srcNode_id="96" dstNode_id="97" id="8" srcParam="result" dstParam="inVector"/>
  <link srcNode_id="97" dstNode_id="61" id="9" srcParam="outColor" dstParam="Ci"/>
  <link srcNode_id="95" dstNode_id="96" id="10" srcParam="Q" dstParam="Q"/>
  <link srcNode_id="95" dstNode_id="93" id="2" srcParam="Q" dstParam="Q"/>
  <link srcNode_id="93" dstNode_id="64" id="78" srcParam="result" dstParam="inFloat"/>
  <link srcNode_id="21" dstNode_id="92" id="67" srcParam="Q" dstParam="p"/>
  <link srcNode_id="95" dstNode_id="93" id="4" srcParam="dvQ" dstParam="dvQ"/>
  <link srcNode_id="95" dstNode_id="96" id="6" srcParam="duQ" dstParam="duQ"/>
  <link srcNode_id="78" dstNode_id="62" id="37" srcParam="outP" dstParam="P"/>
 </links>
</nodenet>
