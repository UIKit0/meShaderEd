<?xml version="1.0"?> 

<node name="me_env_blur_tex" type="rsl_code" author="mesh">
	<help>Environment light shader using blurred texture.</help>
	<input>
	
		<property name="envName" type="string" default="" detail="uniform" subtype="file"
		  range="All files=*.*:TEX=*.tex:TDL=*.tdl:TIFF=*.tif"/>
		<property name="envSpace" type="string" default="world" detail="uniform"/>
		
		<property name="envRadius" type="float" default="0" detail="uniform"/>
		<property name="Intensity" type="float" default="1" detail="uniform" provider="external"/>
		
		<property name="Coloration" type="float" default="0" detail="uniform"/>
		<property name="cFilt" type="color" default="color(1,1,1)" detail="uniform">
		<help>The color of your the light.</help>
		</property>
		
		<property name="Filter" type="string" default="gaussian" detail="uniform"/>
		<property name="filterWidth" type="float" default="0" detail="uniform"/>
		<property name="samples" type="float" default="32" detail="uniform"/>
		<property name="lerp" type="float" default="1" detail="uniform" subtype="switch"/>
		
		<property name="singleTexCoord" type="float" default="1" detail="uniform" subtype="switch">
		<help>This function expects either a single texture coordinate or four texture coordinates.</help>
		</property>
		
	</input>
	<output>
	  <property name="Cl" type="color" default="color(0,0,0)" />
	  
	  <property name="__category" type="string" default="environment" detail="uniform" provider="primitive"/>
	  
	  <property name="__nonspecular" type="float" default="1" detail="uniform" provider="primitive"/>
	  <property name="__nondiffuse" type="float" default="1" detail="uniform" provider="primitive"/>
	</output>
 <include>
	  <file name="me_util.h"/>
	  <file name="me_env.h"/>
 </include>
	<internal>
	</internal>
	<code><![CDATA[

  solar() 
  {
    if( $(envName) != "" ) 
    {
      point Q = Ps;
      vector IN = normalize (I);
      normal Ns = meShadingNormal( N );
      
      vector Rfldir;
      varying float blur = 0;
      uniform float reflBlur = 0;
      
      color env = 0;
      /* float b = blur / PI; */
      color filt = mix (color 1, $(cFilt) , $(Coloration) ); 
       
      if( 0 == surface ("__L", Rfldir) )     
        Rfldir = reflect( IN, Ns );

      if( 0 == surface ("__blur", blur) )
        blur = reflBlur;
        
        
      if( $(singleTexCoord) )
      {
        vector r = meRayEnvSphere( Q, $(envSpace), Rfldir, $(envRadius) );
        env = color environment ( 
    		        $(envName), r
    				    ,"blur", blur 
    				    ,"samples", $(samples) 
    				    ,"filter", $(Filter)
    				    ,"width", $(filterWidth)
    				    ,"lerp", $(lerp)
    				    );
      }
      else
      {
        uniform float  DiffHemisphere = .95; /* Controls the region of the hemisphere
                                              above a shading point from which to gather
                                              diffuse environmental illumination. */
        float w = meCalculateEnvSampleArea( DiffHemisphere, $(samples) ); 
        
    		vector rs, v1, v2, v3, v4;
    		meBuildEnvironmentVectors( w, Rfldir, v1, v2, v3, v4 ); 
        v1 = meRayEnvSphere( Q, $(envSpace), v1, $(envRadius) );
        v2 = meRayEnvSphere( Q, $(envSpace), v2, $(envRadius) );
        v3 = meRayEnvSphere( Q, $(envSpace), v3, $(envRadius) );
        v4 = meRayEnvSphere( Q, $(envSpace), v4, $(envRadius) );
        env = color environment ( 
    		        $(envName), v1, v2, v3, v4
    				    ,"blur", blur / PI 
    				    ,"samples", $(samples) 
    				    ,"filter", $(Filter)
    				    ,"width", $(filterWidth)
    				    ,"lerp", $(lerp)
    				    );
    				    
      }
      $(Cl) = env * filt;		
    }
  }
  $(Cl) *= $(Intensity);
	]]>
	</code>	
</node>
