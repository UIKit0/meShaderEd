<?xml version="1.0"?> 

<node name="IDbubbly" type="rsl_code" author="Ivan DeWolf">
	<help>bubbly.sl written a while ago by Ivan DeWolf ivan@martian-tools.com
    		basicly it is F1 squared as described in a cellular texture basis function
    		by Steven Worley in the siggraph proceedings from 1996, except this uses a noised grid of cells
    		instead of the sparse convolution in the paper. not as elegant, but hey, it works.
    		the bubbles are paraboloids diplaced along the normal. </help>
	<input>
		<property name="P" type="point" default="point (0.0, 0.0, 0.0)" />
		<property name="N" type="normal" default="normal (0.0, 1.0, 0.0)" />
		
		<property name="Kd" type="float" default="0.2" />
		<property name="mult" type="float" default="5.0" />
		<property name="Nzscale" type="float" default="1.0" />
		<property name="bubsize" type="float" default="1.0" />
		
	</input>
	<output>
		<property name="outP" type="point"/>
		<property name="outN" type="normal"/>
	</output>
	<internal>
		<variable name="Nn"/>
		<variable name="a"/>
		<variable name="b"/>
		<variable name="c"/>
		<variable name="bub"/>
		<variable name="dist"/>
		<variable name="shortest"/>
		<variable name="Po"/>
		<variable name="trucell"/>
		<variable name="surrcell"/>
		<variable name="nzcell"/>
		<variable name="offset"/>
	</internal>
	<code>
  <![CDATA[
	  normal $(Nn) = normalize($(N));
    float $(a), $(b), $(c), $(bub);
    float $(dist), $(shortest)=10000;
    
    point $(Po) = transform( "object", $(P) ) * $(mult);
  
    /* true cell center, surrounding cell centers, noised cell center */
    point $(trucell), $(surrcell), $(nzcell);
    vector $(offset);
    
    setxcomp ( $(trucell), floor ( xcomp ( $(Po) ) ) + .5 );
    setycomp ( $(trucell) ,floor ( ycomp ( $(Po) ) ) + .5 );
    setzcomp ( $(trucell), floor ( zcomp ( $(Po) ) ) + .5 );
  			     
    /* what is the shortest distance to a noised cell center? */
    for ( $(a) = -1 ; $(a) <= 1 ; $(a) += 1 ) 
    {
      for ( $(b) = -1 ; $(b) <= 1 ; $(b) += 1 )
      {
        for ( $(c) = -1 ; $(c) <= 1 ; $(c) += 1 )
        {
        	$(offset) = vector ( $(a), $(b), $(c) );
        	$(surrcell) = $(trucell) + $(offset);
        	$(nzcell) = $(surrcell) + ( ( vector cellnoise ( $(surrcell) ) - .5) * $(Nzscale) );
        	$(dist) = distance ( $(Po), $(nzcell) );
        	if ( $(dist) < $(shortest) ) 
        	  $(shortest) = $(dist);
        }
      }
    }
    $(bub) = clamp ( $(shortest), 0, $(bubsize) ) / $(bubsize); 
    $(P) += $(Nn) * ( pow ( $(bub), 2 ) - 1 ) * $(Kd);
    $(N) = calculatenormal ( $(P) );
          
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]>
	</code>	
</node>
