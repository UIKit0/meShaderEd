<?xml version="1.0"?> 

<node name="JBUMcraters" type="rsl_code" author="Jim Bumgardner" icon="JBUMcraters.png">
	<help>Lunar-like surface - Jim Bumgardner jbum@SpamSucks_jbum.com
			  Voronoi/Worley noise is combined using 1/f scaling to put craters on a surface.
			  Similar tricks can be used to make cork, swiss-cheese, bread, etc.</help>
	<input>
		<property name="P" type="point" default="point (0.0, 0.0, 0.0)" />
		<property name="N" type="normal" default="normal (0.0, 1.0, 0.0)" />

		<property name="Kd" type="float" default="0.02" />
		<property name="swidth" type="float" default="0.6" />
		<property name="pitfactor" type="float" default="0.7" />
	  <property name="octaves" type="float" default="9" />
	  <property name="lac" type="float" default="1.91341" />
	  <property name="amp" type="float" default="1.91341" />
	  <property name="jitter" type="float" default="1.91341" />
	  <property name="distortamp" type="float" default="0.0005" />
	</input>
	<output>
		<property name="outP" type="point"/>
		<property name="outN" type="normal"/>
	</output>
	<include>
		<file name="material.h"/>
		<file name="noises.h"/>	
		<file name="patterns.h"/>	
	</include>
	<internal>
	  <variable name="Nf"/>
		<variable name="Ct"/>
		<variable name="ss"/>
		<variable name="tt"/>
		<variable name="angle"/>
		<variable name="r"/>
		<variable name="rim"/>
		<variable name="uu"/>
		<variable name="a"/>
		<variable name="i"/>
		<variable name="j"/>
		<variable name="sc"/>
		<variable name="asc"/>
		<variable name="lev"/>
		<variable name="sctr"/>
		<variable name="tctr"/>
		<variable name="scell"/>
		<variable name="tcell"/>
		<variable name="scellctr"/>
		<variable name="tcellctr"/>
		<variable name="pert"/>
		<variable name="pert2"/>
		<variable name="rad"/>
		<variable name="rmax"/>
		<variable name="rmax1"/>
		<variable name="rmax2"/>
		<variable name="rrad1"/>
		<variable name="rrad2"/>
		<variable name="cellsizescale"/>
		<variable name="ilac"/>
	</internal>
	<code><![CDATA[
    normal  $(Nf);
    color   $(Ct);

    float $(ss), $(tt), $(angle); 
    float $(r), $(rim), $(uu), $(a); 
    float $(i), $(j), $(sc), $(asc), $(lev);
    float $(sctr), $(tctr); 
    float $(scell), $(tcell);
    float $(scellctr), $(tcellctr);
    float $(pert) = 0;
    float $(pert2);
    float $(rmax) = $(swidth) / 2; 
    float	$(rmax1) = 1000000, $(rmax2) = 1000000; 
    float $(rad);
    float $(rrad1) = 0, $(rrad2) = 0;
    float $(cellsizescale);
    
    float $(ilac) = 1 / $(lac);
    
    /* Add craters */
    
    for ( $(lev) = 0; $(lev) < $(octaves); $(lev) += 1 )
    {
  	  $(sc) = pow ( $(lac), $(lev) );
  	  $(asc) = 1 / pow ( $(amp), $(lev) );
  	  $(scellctr) = floor ( s * $(sc) / $(swidth) );
  	  $(tcellctr) = floor ( t * $(sc) / $(swidth) );
  	  $(cellsizescale) = $(swidth) / $(sc);
  	  $(rrad1) = 0;
  	  $(rrad2) = 0;
  	  
  	  for ( $(i) = -1 ; $(i) <= 1; $(i) += 1 )
  	  {
  	    $(scell) = $(scellctr) + $(i);
  	    for ( $(j) = -1; $(j) <= 1; $(j) += 1 )
  	    {
		      $(tcell) = $(tcellctr) + $(j);
		      
		      if ( cellnoise ( 7 * $(scell) - 9.5, 7 * $(tcell) + 7.5 ) < $(pitfactor) )
		      /* xp = (sc*7*scell-9.5,sc*7*tcell+7.5,.5); */
		      /* if ( fBm_default(xp) < [getvar pitfactor])  *//* I like this distribution better - pitf = -1 -> 1 */
		      {
		        $(sctr) = $(cellsizescale) * ($(scell) + 0.5 + $(jitter) * 
		                  cellnoise ( $(scell) + 0.5, $(tcell) + 0.5 ) );
		        $(tctr) = $(cellsizescale) * ($(tcell) + 0.5 + $(jitter) * 
		                  cellnoise ( $(scell) + 3.5, $(tcell) + 8.5 ) );
		        $(ss) = s - $(sctr);
		        $(tt) = t - $(tctr);
		        $(r) = $(ss) * $(ss) + $(tt) * $(tt); /* r is distance from center squared */
		        
		        if ( $(r) < $(rmax1) ) 
		        {
		          /* rad is size of crater squared */
		          $(rad) = $(rmax) * $(ilac);
		          $(rad) /= $(sc);
		          $(rad) *= $(rad);
		          $(rmax2) = $(rmax1);
		          $(rrad2) = $(rrad1);
		          $(rmax1) = $(r);
		          $(rrad1) = $(rad);
		        }
		        else if ( $(r) < $(rmax2) ) 
		        {
		          /* rad is size of crater squared */
		          $(rad) = $(rmax) * $(ilac);
		          $(rad) /= $(sc);
		          $(rad) *= $(rad);
		          $(rmax2) = $(r);
		          $(rrad2) = $(rad);
		        }
		      }
  	    }
  	  }
  	  /* Optional Crater Distortion... */
  	  if ( $(distortamp) != 0 )
  	  {
  	    $(rrad1) += fBm_default ( $(P) * $(sc) ) * $(asc) * $(distortamp); /* add crater roughness */
  	    $(rrad2) += fBm_default ( $(P) * $(sc) ) * $(asc) * $(distortamp); 
  	  }
  
  	  /* Seem crater perturbations for each scale */
  	  if ( $(rrad1) > 0 && $(rmax1) > 0 )
  	  {
  	    $(r) = smoothstep ( 0, $(rrad1), $(rmax1) );
  	    $(r) = $(r) * ( 2 * $(r) - pow ( $(r), 3 ) ) + ( 1 - $(r) ) * pow ( $(r), 3 );
  	    $(pert) += sin ( $(r) * PI / 2 ) * $(asc) - $(asc);
  	  }
  	  if ( $(rrad2) > 0 && $(rmax2) > 0 )
  	  {
  	    $(r) = smoothstep ( 0, $(rrad2), $(rmax2) );
  	    $(r) = $(r) * ( 2 * $(r) - pow ( $(r), 3 ) ) + ( 1 - $(r) ) * pow ( $(r), 3 );
  	    $(pert) += sin ( $(r) * PI / 2 ) * $(asc) - $(asc);
  	  }
    }
    $(P) += $(Kd) * $(pert) * normalize ( $(N) );
    $(N) = normalize ( calculatenormal( $(P) ) );
         
	  $(outP) = $(P); 
	  $(outN) = $(N);
	  ]]>
	</code>	
</node>
