<?xml version="1.0"?> 

<node name="DisplaceBump2" type="rsl_code" author="mesh">
	<help>Combining simple displacement and bump shader together.</help>
	<input>
	  <property name="P" type="point" default="point (0, 0, 0)" />
		<property name="N" type="normal" default="normal (0, 1, 0)" />
		
		<property name="DoDisplacement" type="float" default="1" detail="uniform" subtype="switch" provider="attribute"/>
		<property name="UseShadingNormals" type="float" default="1" detail="uniform" subtype="switch" provider="attribute"/>
		
		<property name="Kbump" type="float" default="0"/>
		<property name="inputBump" type="float" default="0"/>
		
		<property name="Kdisp1" type="float" default="0"/>
		<property name="inputDisp1" type="float" default="0"/>
		
		<property name="Kdisp2" type="float" default="0"/>
		<property name="inputDisp2" type="float" default="0"/>
		
	</input>
	<output>
		<property name="outP" type="point" default="point (0, 0, 0)" />
		<property name="outN" type="normal" default="normal (0, 1, 0)" />
	</output>
	<internal>
		<variable name="PP"/>
		<variable name="Q"/>
		<variable name="Nf"/>
		<variable name="deltaN"/>
	</internal>
	<code>
  <![CDATA[
	point $(PP) = transform("shader", $(P));
	point $(Q) = transform("shader", $(P));
	normal $(Nf) = normalize( ntransform("shader", $(N)) );
	
	$(PP) += $(Kbump) * $(inputBump) * $(Nf);
	
	$(PP) += $(Kdisp1) * $(inputDisp1) * $(Nf);
	$(PP) += $(Kdisp2) * $(inputDisp2) * $(Nf);
	
	$(PP) = transform("shader", "current", $(PP));
	
	$(Q) += $(Kdisp1) * $(inputDisp1) * $(Nf);
	$(Q) += $(Kdisp2) * $(inputDisp2) * $(Nf);
	
	$(Q) = transform("shader", "current", $(Q));
	
	if( $(UseShadingNormals) != 0) 
	{ 
	  normal $(deltaN) = normalize(N) - normalize(Ng);
	  N = normalize(calculatenormal($(PP))) + $(deltaN);
	} 
	else 
	  N = calculatenormal($(PP));
	
	if( $(DoDisplacement) != 0)
	  P = $(Q);
	
	$(outP) = P; 
	$(outN) = N; 
	]]>
	</code>	
</node>
