<?xml version="1.0"?>

<node name="zj_water" author="zj" icon="zj_water.png">
	<help>Turbulence waves on water.</help>
	<include>
		<file name="filterwidth.h"/>
		<file name="noises.h"/>
	</include>	
	<input>
	  <property name="Q" type="point" default="point(1.0, 0.0, 0.0)" />
	  
	  <property name="space" type="string" detail="uniform" default="" />
	  
		<property name="freq" type="float" default="4.0" subtype="slider" range="1 64 .01"/>
		<property name="aspect" type="float" default="2.0" />
		<property name="rotate" type="float" default="0" subtype="slider" range="-90 90 .1"/>
		<property name="speedx" type="float" default="0.5" subtype="slider" range="0 1.0 .01"/>
		<property name="speedy" type="float" default="0.1" subtype="slider" range="0 1.0 .01"/>
		<property name="speedz" type="float" default="0.1" subtype="slider" range="0 1.0 .01"/>
		<property name="wavespeed" type="float" default="0.5" subtype="slider" range="0 1.0 .01"/>
		<property name="time" type="float" default="0.0" />
		
		<property name="invert" type="float" default="0" subtype="switch"/>
		
	</input>
	<output>
		<property name="result" type="float"/>
	</output>
	<internal>
		<variable name="rotate3d"/>
		<variable name="cutoff"/>
		<variable name="f"/>
		<variable name="turb"/>
		<variable name="f"/>
		<variable name="turb"/>
		<variable name="maxfreq"/>
		<variable name="flame"/>
		<variable name="fade"/>
		<variable name="ss"/>
		<variable name="tt"/>
		<variable name="filtwidth"/>
		<variable name="qq"/>
		<variable name="buf"/>
	</internal>
	<code>
  <![CDATA[

  vector $(rotate3d) ( vector in; vector ref; float alpha; ) 
  {
		point pin = point ( xcomp ( in ), ycomp ( in ), zcomp ( in ) );
		point pside = point ( xcomp ( ref ), ycomp ( ref ), zcomp ( ref ) );	
		point go = rotate ( pin, alpha, point ( 0, 0, 0 ), pside );	
		vector out= vector ( xcomp ( go ), ycomp ( go ), zcomp ( go ) );
		return out;
	}
	float $(cutoff), $(f), $(turb), $(maxfreq) = 1024, $(flame), $(fade), $(ss), $(tt), $(filtwidth);
	point $(qq);
	
	if ( $(space) == "" )
		$(qq) = transform ( "shader", $(Q) * 0.01 * $(freq) );
	else
		$(qq) = transform ( $(space), $(Q) * 0.01 * $(freq) );	
		
	setxcomp ( $(qq), xcomp ( $(qq) ) + $(time) * $(speedx) );
	setycomp ( $(qq), ycomp ( $(qq) ) + $(time) * $(speedy) );
	setzcomp ( $(qq), zcomp ( $(qq) ) + $(time) * $(speedz) );
  		
	vector $(buf) = $(rotate3d) ( vector ( $(qq) ), vector ( 0, 1, 0 ), radians ( $(rotate) ) );
 	$(qq) = point ( $(buf) );
	setxcomp ( $(qq), xcomp ( $(qq) ) * $(aspect) );
	$(filtwidth) = filterwidthp ( $(qq) );
	$(cutoff) = clamp ( 0.5 / $(filtwidth), 0, $(maxfreq) );

	$(turb) = 0;
  for ( $(f) = 1; $(f) < $(cutoff); $(f) *= 2 ) 
    $(turb) += abs ( filteredsnoiset ( $(qq) * $(f), $(filtwidth) * $(f), $(time) * $(wavespeed) ) ) / $(f) ;

  $(flame) = exp ( -2.5 * $(turb) );
  $(result) = $(flame);
   
  if ( $(invert) ) 
    $(result) = 1 - $(result);
]]>
	</code>
</node>