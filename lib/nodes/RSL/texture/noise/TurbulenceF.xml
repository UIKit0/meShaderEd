<?xml version="1.0"?>

<node name="TurbulenceF" author="Larry Gritz" icon="TurbulenceF.png">
	<help>template derived from:
"Advanced RenderMan: Creating CGI for Motion Pictures"
by Larry Gritz and Tony Apodaca cc 1999</help>
	<input>
		<property name="baseFreq" type="float" default="1" detail="uniform" 
		subtype="slider" range="0 100 .001">
		<help>Base Frequency</help>
		</property> 
		<property name="octaves" type="float" default="4" detail="uniform" 
		subtype="slider" range="1 8 1">
		<help>max # of octaves to calculate.</help>
		</property> 
		<property name="Lacunarity" type="float" default="2" detail="uniform" 
		subtype="slider" range="1 4 .01">
		<help>frequency spacing between successive octaves</help>
		</property>
		<property name="Gain" type="float" default=".5" detail="uniform" 
		subtype="slider" range="0 4 .01">
		<help>scaling factor between successive octaves</help>
		</property>
		<property name="Invert" type="float" default="0" detail="uniform" subtype="switch"/> 
		<property name="FourthDimension" type="float" default="0" >
		<help>You can get 4D brownian noise by connecting
	    this parameter to any float function.  Often you'll
	    want to connect some function of time here.</help>
		</property>
		<property name="Q" type="point" default="point(0,0,0)"/>	
		<property name="duQ" type="vector" default="vector(0,0,0)"/>	
		<property name="dvQ" type="vector" default="vector(0,0,0)"/>	
	</input>
	<output>
	  <property name="result" type="float" default="0"/>
	</output>
	<include>
	<file name="noises.h"/>
	<file name="pxslUtil.h"/>
	</include>
	<internal>
	  <variable name="amp"/>
	  <variable name="sum"/>
	  <variable name="i"/>
	  <variable name="pp"/>
	  <variable name="fw"/>
	</internal>
	<code><![CDATA[	
  uniform float $(amp) = 1;
  uniform float $(sum) = 0;
  varying point $(pp) = $(baseFreq) * $(Q);
  varying float $(fw) = pxslFilterWidth ( $(baseFreq) * $(duQ), $(baseFreq) * $(dvQ) );
  uniform float $(i);
  extern float du, dv; /* for filterwidth macro */
  
  for ( $(i) = 0; $(i) < $(octaves) ; $(i) += 1) 
  {
#pragma nolint
    float n = filteredsnoiset ( $(pp), $(fw), $(FourthDimension) );
		float dn = filterwidth ( n );
		$(result) += $(amp) * filteredabs ( n, dn) ;
		$(sum) += $(amp);  
		$(amp) *= $(Gain);  
		$(pp) *= $(Lacunarity);  
		$(fw) *= $(Lacunarity); 
  }
  $(result) /= .5 * $(sum);

  if ( $(Invert) != 0 )
    $(result) = 1 - $(result);
    
  ]]>
	</code>	
</node>
