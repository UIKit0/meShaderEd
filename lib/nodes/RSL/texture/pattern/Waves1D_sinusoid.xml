<?xml version="1.0"?>

<node name="Waves1D_sinusoid" author="Pixar">
	<help>Generates one-dimensional wave-like patterns.  Patterns
		ranging from linear to circular can be obtained through the use
		of the Domain parameter.</help>
	<input>
		<property name="shapeFactor" type="float" default="0" subtype="slider" range="-1 1 .1">
		<help>A weighting factor for the ying (-1) and 
		    yang (+1). At 0, perfect harmony is attained.</help>
		</property>
		<property name="freqVariance" type="float" default="0" subtype="slider" range="0 1">
		<help>The variation of the frequency from cycle to
		    cycle.  A value of zero results in regular cycles while
		    a value of one results in more irregular patterns. This
		    parameter has no affect on the noise shapes.
		</help>
		</property>
		<property name="ampVariance" type="float" default="0" subtype="slider" range="0 1">
		<help>The variation of amplitude from cycle to cycle.
		    A value of zero results in regular black/white pattern.
		    A value of one results in many shades of gray.
		</help>
		</property>		
		<property name="domain" type="float" default="0" detail="uniform" subtype="selector"
		range="X_Axis:Y_Axis:Z_Axis:Radius:Angle_XY:Angle_YZ:Angle_XZ">
		<help>The dimension along which the waves travel.
		    Use this parameter to obtain circular/spherical patterns
		    (Radius) as well as radial patterns (Angle...).  This
		    parameter can be used in conjuction with Surface Point
		    to trade off between 2D and 3D shapes.  For example,
		    if you use ST wich Radius, you'll get cylinders of
		    patterns.  If you use Surface Point, you'll get
		    spherical patterns. 'nuff said?
		</help>
		</property>
		<property name="min" type="float" default="0" subtype="slider" range="-1 1 .1">
		<help>The result is scaled to fit between Min and Max.</help>
		</property>		
		<property name="max" type="float" default="1" subtype="slider" range="-1 1 .1">
		<help>The result is scaled to fit between Min and Max.</help>
		</property>
		<property name="frequency" type="float" default="2" subtype="slider" range="0 100 .1">
		<help>The frequency of the wave.</help>
		</property>		
		<property name="velocity" type="float" default="0" subtype="slider" range="-100 100 1">
		<help>The velocity of your wave.</help>
		</property>
		<property name="pt" type="point"/>
		<property name="dptdu" type="vector"/>	
		<property name="dptdv" type="vector"/>	
    <property name="time" type="float" default="0" detail="uniform"/>						
	</input>
	<output>
		<property name="result" type="float"/>		
	</output>
	<internal>
	  <variable name="swave"/>
	  <variable name="t"/>
	  <variable name="pi2"/>
	  <variable name="PP"/>
	</internal>
	<code><![CDATA[
	
	/* adapted from Schlick: Graphics Gems Vol V */
  float $(swave)( float tt; float s; float f; float a )
	{
    float t = tt, i, j, aa, bb;
    i = floor(t);
    j = i + 1;
    t -= i;
    if ( f != 0 )
    {
      aa = (float cellnoise(i) - .5) * f;
      bb = (float cellnoise(j) - .5) * f + 1;
      if( t < aa )
      {
        i -= 1;
        j -= 1;
        t += 1;
        aa += 1;
        bb = aa;
        aa = (float cellnoise(i) - .5) * f;
      } 
      else if (t > bb )
      {
        i += 1;
        j += 1;
        t -= 1;
        bb -= 1;
        aa = bb;
        bb = (float cellnoise(j) - .5) * f;
      }
      t = (t - aa) / (bb - aa);
    }
    if ( mod(i, 2) >= 1 )
    {
      i += 1;
      j -= 1;
      t = 1 - t;
    }
    if ( s < 0 )
    {
      t = (t + s * t) / (1.0 + s * t);
    }
    else if ( s > 0 )
    {
      t = t / (1.0 - s + s * t);
    }
    t *= t * (3.0 - t - t);
    if ( a != 0 )
    {
      aa = (float cellnoise(i+2)) * a * .5;
      bb = (float cellnoise(j+2)) * a * .5;
      t = aa + t * (1.0 - aa - bb);
    }
    return t;
	}
	
  float $(t);
  uniform float $(pi2) = PI * 2;
  point $(PP) = 2 * $(frequency) * $(pt);
  
  if ( $(domain) == 0 )
    $(t) = xcomp( $(PP) );
  else if ( $(domain) == 1 )
    $(t) = ycomp( $(PP) );
  else if ( $(domain) == 2 )
    $(t) = zcomp( $(PP) );
  else if ( $(domain) == 3 ) /* radius */
    $(t) = length( vector( $(PP) ) );
  else if ( $(domain) == 4 ) /* angle xy plane */
    $(t) = 2 * $(frequency) * ( atan( ycomp( $(pt) ), xcomp( $(pt) )) + PI) / $(pi2);
  else if ( $(domain) == 5 ) /* angle yz plane */
    $(t) = 2 * $(frequency) * ( atan( zcomp( $(pt) ), ycomp( $(pt) )) + PI) / $(pi2);
  else if ( $(domain) == 6 ) /* angle xz plane */
    $(t) = 2 * $(frequency) * ( atan( zcomp( $(pt) ), xcomp( $(pt) )) + PI) / $(pi2);
  $(t) = $(t) - $(time) * $(velocity);
		    
	$(result) = $(swave)( $(t), $(shapeFactor) , $(freqVariance) , $(ampVariance) );
	$(result) = $(min) + $(result) * ($(max) - $(min));
  ]]>
	</code>	
</node>
