<?xml version="1.0"?>

<node name="HexagonalsF" author="ShadeTree" icon="HexagonalsF.png">
  <help>This function generates a hexagonal pattern.</help>
  <input>
    <property name="RAD" label="Radius" type="float" default="0.2" subtype="slider" range="0.0 1 0.01"/>
    <property name="MW" label="Mortar" type="float" default="0.03" subtype="slider" range=".001 .1 .001"/>
    <property name="Q" type="point"/>
  </input>
  <output>
    <property name="result" type="float" default="0"/>
  </output>
  <include>
    <file name = "filterwidth.h"/>
  </include>
  <internal>
    <variable name="SQRT3"/>
    <variable name="fuzzy"/>
    <variable name="hexagonals"/>
    <variable name="S"/>
    <variable name="T"/>
    <variable name="sfuzz"/>
    <variable name="tfuzz"/>
  </internal>
  <code>
  <![CDATA[
    #define $(SQRT3) 1.7320508
    #define $(fuzzy)( a, b, fuzz, x ) ( smoothstep ( a - fuzz, a, x ) * ( 1 - smoothstep ( b, b + fuzz, x ) ) )
    
    float $(hexagonals) ( float S, T, radius, mortarwidth, sfuzz, tfuzz )
    {
      float width;
      float ss, tt;
      float ttile, stile;
      float x, y;
      float halfwidth;
      float mixer;

      width = radius * $(SQRT3);

      tt = mod ( T, 1.5 * radius);
      ttile = floor ( T / ( 1.5 * radius ) );

      ss = ( mod ( ttile / 2, 1 ) == 0.5 ) ? S + width / 2 : S;
      stile = floor ( ss / width );
      ss = mod ( ss, width );

      mixer = 0;
      halfwidth = mortarwidth / 2;
      if ( tt < radius )
        mixer = 1 - $(fuzzy)( halfwidth, width - halfwidth, -sfuzz, ss );
      else
      {
        x = width / 2 - abs ( ss - width / 2 );
        y = $(SQRT3) * ( tt - radius );
        if ( y > x )
        {
          if ( mod ( ttile / 2, 1 ) == 0.5 ) 
            stile -= 1;
          ttile += 1;
          if ( ss > width / 2 ) 
            stile += 1;
        }
        mixer = $(fuzzy)( x - $(SQRT3) * halfwidth, x + $(SQRT3) * halfwidth, tfuzz, y );
      }

      return ( 1 - mixer );
    }

    float $(S) = xcomp ( $(Q) );
    float $(T) = ycomp ( $(Q) );

    float $(sfuzz) = filterwidth ( $(S) );
    float $(tfuzz) = filterwidth ( $(T) );

    $(result) = $(hexagonals) ( $(S), $(T), $(RAD), $(MW), $(sfuzz), $(tfuzz) );
  ]]>
  </code>
</node>
