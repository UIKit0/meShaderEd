<?xml version="1.0"?>

<node name="OakGrainC" author="Larry Gritz" icon="OakGrainC.png">
	<help>Makes procedural solid texture that looks very much like wood grain.  
The rings surround the specified axis.
Template derived from:
"Advanced RenderMan: Creating CGI for Motion Pictures"
by Larry Gritz and Tony Apodaca cc 1999</help>
	<input>
		<property name="c1" label="color1" type="color" default="color(0.8, 0.5, 0.35)"/>
		<property name="c2" label="color2" type="color" default="color(0.65, 0.35, 0.2)"/>
		<property name="c3" label="color3" type="color" default="color(0.4, 0.2, 0.05)"/>
		
		<property name="upAxis" type="float" default="2" subtype="selector" range="X:Y:Z"/>
		<property name="trunkOrigin" type="float" default="0"/>
		
		<property name="ringfreq" type="float" default="1" detail="uniform" 
		subtype="slider" range="0 100 .001">
		<help>mean frequency of ring spacing</help>
		</property> 
		
		<property name="ringunevenness" type="float" default="0.5" detail="uniform" 
		subtype="slider" range="0 10 .01">
		<help>0=equally spaced rings, larger is unequally spaced</help>
		</property>
		
		<property name="grainfreq" type="float" default="25" detail="uniform" 
		subtype="slider" range="0 100 .1">
		<help>frequency of the fine grain</help>
		</property>
		
		<property name="ringnoise" type="float" default="0.25" detail="uniform" 
		subtype="slider" range="0 4 .01">
		<help>amount of irregularity in rings</help>
		</property>
		
		<property name="ringnoisefreq" type="float" default="1" detail="uniform" 
		subtype="slider" range="0 10 0.1">
		<help>frequency of ring irregularities</help>
		</property>
		
		<property name="trunkwobble" type="float" default="0.15" detail="uniform" 
		subtype="slider" range="0 8 0.1">
		<help>amount of irregularity of the tree trun (z-axis)</help>
		</property>
		
		<property name="trunkwobblefreq" type="float" default="0.025" detail="uniform" 
		subtype="slider" range="0 2 0.01">
		<help>frequency of trunk wobbles</help>
		</property>
		
		<property name="angularwobble" type="float" default="1" detail="uniform" 
		subtype="slider" range="0 5 .01">
		<help>frequency of the angle-determined trunk wobble</help>
		</property>
		
		<property name="angularwobblefreq" type="float" default="1.5" detail="uniform" 
		subtype="slider" range="0 10 .01">
		<help>trunk wobble with angle</help>
		</property>
		
		<property name="ringy" type="float" default="1" detail="uniform" 
		subtype="slider" range="0 1 .01">
		<help>overall scale on the degree to which rings are weighted</help>
		</property>
		
		<property name="grainy" type="float" default="1" detail="uniform" 
		subtype="slider" range="0 1 .01">
		<help>overall scale on the degree to which grain is weighted</help>
		</property>
		
		<property name="Q" type="point" default="point(0,0,0)"/>	
		<property name="duQ" type="vector" default="vector(0,0,0)"/>	
		<property name="dvQ" type="vector" default="vector(0,0,0)"/>	
	</input>
	<output>
	  <property name="resultColor" type="color"/>
	  <property name="resultGrain" type="float"/>
	</output>
	<include>
	<file name="noises.h"/>
	</include>
	<internal>
	  <variable name="dPshad"/>
	  <variable name="Psh"/>
	  <variable name="Pring"/>
	  <variable name="offset"/>
	  <variable name="trunkComp"/>
	  <variable name="sv1"/>
	  <variable name="sv2"/>
	  <variable name="sv3"/>
	  <variable name="r2"/>
	  <variable name="r"/>
	  <variable name="dr"/> 
	  <variable name="inring"/> 
	  <variable name="Pgrain"/>
	  <variable name="dPgrain"/>
	  <variable name="grain"/>
	  <variable name="i"/>
	  <variable name="amp"/>
	</internal>
	<code><![CDATA[	
	/* We shade based on Pshad, but we add several layers of warping: */
  /* Some general warping of the domain */
  float $(dPshad) = length ( $(duQ) ^ $(dvQ) );
  vector $(offset) = vfBm( $(Q) * $(ringnoisefreq), $(dPshad) * $(ringnoisefreq), 2, 4, 0.5);
  
  /* The trunk isn't totally steady xy as you go up the trunk*/
  float $(trunkComp);
  vector $(sv1), $(sv2), $(sv3);
  if ( $(upAxis) == 0 ) 
  {
     // up == x axis
     $(trunkComp) = $(Q)[0];
     $(sv1) = vector ( 0, 1, 1 );
     $(sv2) = vector ( 0.1, 1, 1 );
     $(sv3) = vector ( 0.5, 1, 1 );
  } 
  else if ( $(upAxis) == 1 ) 
  {
     // up == y
     $(trunkComp) = $(Q)[1];
     $(sv1) = vector ( 1, 0, 1 );
     $(sv2) = vector ( 1, 0.1, 1 );
     $(sv3) = vector (1, 0.5, 1 );
  } 
  else 
  {
     // up == z
     $(trunkComp) = $(Q)[2];
     $(sv1) = vector ( 1, 1, 0 );
     $(sv2) = vector ( 1, 1, 0.1 );
     $(sv3) = vector ( 1, 1, 0.5 );
  }
  
  point $(Psh) = $(Q) - $(trunkOrigin) * ( vector ( 1, 1, 1 ) - $(sv1) );
  point $(Pring) = $(Psh) + $(ringnoise) * $(offset);
  $(Pring) += $(trunkwobble) * vsnoise ( $(trunkComp) * $(trunkwobblefreq) ) * $(sv1);
  
  /* Calculate the radius from the center. */
  float $(r2);
  if ( $(upAxis) == 0 ) 
  {
     // up == x axis
     $(r2) = sqr ( $(Pring)[1] ) + sqr ( $(Pring)[2] );		     
  } 
  else if ( $(upAxis) == 1 ) 
  {
     // up == y
     $(r2) = sqr ( $(Pring)[0] ) + sqr ( $(Pring)[2] );		     
  } 
  else 
  {
     // up == z
     $(r2) = sqr ( $(Pring)[0] ) + sqr ( $(Pring)[1] );		     
  }
  float $(r) = sqrt ( $(r2) ) * $(ringfreq);
  
  /* Add some noise around the trunk */
  $(r) += $(angularwobble) * smoothstep ( 0, 5, $(r) ) * snoise ( $(angularwobblefreq) * $(Pring) * $(sv2) );
  
  /* Now add some noise so all rings are not equal width */
  extern float du, dv;
  float $(dr) = filterwidth ( $(r) );
  $(r) += $(ringunevenness) * filteredsnoise ( $(r), $(dr) );
  
  float $(inring) = smoothpulsetrain ( .1, .55, .7, .95, 1, $(r) );
  
  point $(Pgrain) = $(Psh) * $(grainfreq) * $(sv3);
  float $(dPgrain) = filterwidthp ( $(Pgrain) );
  float $(grain) = 0;
  float $(i), $(amp) = 1;
  for ( $(i) = 0;  $(i) < 2;  $(i) += 1) 
  {
     float grain1valid = 1 - smoothstep ( .2, .6, $(dPgrain) );
     if ( grain1valid > 0 ) 
     {
       float g = grain1valid * snoise ( $(Pgrain) );
       g *= ( 0.3 + 0.7 * $(inring) );
       g = pow ( clamp ( 0.8 - (g), 0, 1 ), 2 );
       g = $(grainy) * smoothstep ( 0.5, 1, g );
       if ( $(i) == 0 )
        $(inring) *= ( 1 - 0.4 * grain1valid );
       $(grain) = max ( $(grain), g );
     }
     $(Pgrain) *= 2;
     $(dPgrain) *= 2;
     $(amp) *= 0.5;
  }
  
  $(grain) = mix ( $(inring) * $(ringy), 1, $(grain) );
  $(resultGrain) = $(grain);
  $(resultColor) = color spline ( "linear", $(grain), $(c1), $(c1), $(c2), $(c3), $(c3) );
    
  ]]>
	</code>	
</node>
