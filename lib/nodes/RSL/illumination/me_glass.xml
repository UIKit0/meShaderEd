<?xml version="1.0"?>

<node name="me_glass" author="mesh" icon="me_glass.png">
	<help>Raytraced glass</help>
	<input>
	  <property name="Ns" type="normal" default="normal(0,0,0)"/>
	  <property name="ior" type="float" default="1.5"/>
	  <property name="twosided" type="float" default="1" detail="uniform" subtype="switch"/>
	  <property name="traceset" type="string" default="" detail="uniform"/>
		<property name="maxdist" type="float" default="-1"  detail="uniform"/>
		<property name="russian_roulette" type="float" default="2" detail="uniform"/>
		
	  <property name="krefl" type="float" default="1" detail="uniform"/>
		<property name="crefl" type="color" default="color(1,1,1)"/>
		<property name="reflsamps" type="float" default="1" detail="uniform"/>
		<property name="reflblur" type="float" default="0" detail="uniform"/>
		<property name="reflection_depth" type="float" default="2" detail="uniform"/>
		
		<property name="krefr" type="float" default="1" detail="uniform"/>
		<property name="crefr" type="color" default="color(1,1,1)"/>
		<property name="refrsamps" type="float" default="1" detail="uniform"/>
		<property name="refrblur" type="float" default="0" detail="uniform"/>
		<property name="refraction_depth" type="float" default="2" detail="uniform"/>
		
	</input>
	<output>
		<property name="result" type="color" default="color(0,0,0)"/>	
	</output>
	<include>
	</include>	
	<internal>
	  <variable name="In"/>
	  <variable name="V"/>
	  <variable name="reflDir"/>
	  <variable name="refrDir"/>
	  <variable name="front"/>
	  <variable name="kt"/>
	  <variable name="kr"/>
	  <variable name="raydepth"/>
	  <variable name="xsamples"/>
	  <variable name="reflsamples"/>
	  <variable name="refrsamples"/>
	  <variable name="hci"/>
	  <variable name="ctmp"/>
	  <variable name="rand"/>
	  <variable name="ray_label"/>
	  <variable name="rreflblur"/>
	  <variable name="rrefrblur"/>
	  <variable name="c_reflection"/>
	  <variable name="c_refraction"/>
	  <variable name="refl_c"/>
	  <variable name="refr_c"/>
	</internal>
	<code>
  <![CDATA[
	
  vector $(In) = normalize(I);
  vector $(V) = -$(In);
  vector $(reflDir), $(refrDir);
  
  float $(front) = ($(In).N <= 0) ? 1 : 0;
  float $(kt), $(kr), $(rand) = 0;
  uniform float $(raydepth);
  uniform float $(xsamples);
  uniform float $(reflsamples) = $(reflsamps);
  uniform float $(refrsamples) = $(refrsamps);
  
  uniform string $(ray_label) = "";
  
  float $(rreflblur) = $(reflblur);
  float $(rrefrblur) = $(refrblur);

  color $(c_reflection) = 0;
  color $(c_refraction) = 0;
  
  color $(refl_c) = $(crefl);
  color $(refr_c) = $(crefr);
  
  color $(ctmp), $(hci) = 0 ;

  rayinfo("label", $(ray_label));
  rayinfo("depth", $(raydepth));

  if ( $(ior) != 0 )
  { /* relative index of refraction */
    float eta = ( $(front) == 1 ) ? (1 / $(ior) ) : $(ior); 
    fresnel( $(In), $(Ns), eta, $(kr), $(kt), $(reflDir), $(refrDir) );
    $(kt) = $(krefr) * (1 - $(kr));
    $(kr) *= $(krefl);
  }
  else
  {
    float eta = ( $(front) == 1) ? 1 / 1.5 : 1.5;
    $(reflDir) = reflect( $(In), $(Ns) );
    $(refrDir) = refract( $(In), $(Ns), eta);
    $(kr) = $(krefl);
    $(kt) = $(krefr);
  }
  
  if ( $(raydepth) >= $(reflection_depth) )
    $(kr) = 0;
  else if ( $(raydepth) >= $(russian_roulette) )
  {
    $(rand) = random();
    if ( $(rand) >= $(kt) )
      $(kt) = 0;
    else
      $(kr) = 0;
  }
  
  if ( $(raydepth) >= $(refraction_depth) )
    $(kt) = 0;
  
  if ( $(raydepth) > 0 )
  {
    $(refrsamples) = round( $(refrsamples) * 0.25 );
    $(reflsamples) = round( $(reflsamples) * 0.25 );
    if ( $(refrsamples) < 1 )
      $(refrsamples) = 1;
    if ( $(reflsamples) < 1 )
      $(reflsamples) = 1;            
  }
  else if ( $(raydepth) == 0 && $(twosided) == 0 && $(front) == 0 )
  {
    /*
    $(kr) = 0;
    $(kt) = 0;
    */
  }
  
  $(xsamples) = $(reflsamples);
  
  if ( $(raydepth) > 1 )
  {
    if ( $(ray_label) == "b_refr" || $(ray_label) == "b_refl" )
    {
      $(rreflblur) = 0;
      $(rrefrblur) = 0;
    }
  }
     
  if ( $(kr) > 0 && $(xsamples) > 0 )
  {
    $(ctmp) = 0;
    if ( $(rreflblur) > 0 )
    {
      gather( "illuminance", P, $(reflDir), $(rreflblur) * radians(5), 
        $(xsamples),
        "label", "b_refl",
        "subset", $(traceset),
        "maxdist", $(maxdist),
#ifdef DELIGHT
        "surface:Ci", $(hci)
#else        
        "volume:Ci", $(hci)
#endif   
      )
      {
        $(ctmp) += $(hci);
      }
      else
      {
        illuminance( "environment", P + vector(0), $(Ns), 1.57, 
          "send:light:__coneaxis", $(reflDir) )
        {
          $(ctmp) += Cl;
        }
      }
    }
    else
    {
      gather( "illuminance", P, $(reflDir), 0, 
        $(xsamples),
        "label", "reflection",
        "subset", $(traceset),
        "maxdist", $(maxdist),
#ifdef DELIGHT
        "surface:Ci", $(hci)
#else        
        "volume:Ci", $(hci)
#endif      
      )
      {
        $(ctmp) += $(hci);
      }
      else
      {
        illuminance( "environment", P + vector(0), $(Ns), 1.57, 
          "send:light:__coneaxis", $(reflDir))
        {
            $(ctmp) += Cl;
        }
      }       
    }
    $(c_reflection) = $(kr) * $(crefl) * $(ctmp) / $(xsamples); 
    $(result) += $(c_reflection);
  }
  
  $(xsamples) = $(refrsamples);
  
  if ( $(kt) > 0 && $(xsamples) > 0 )
  {
    $(ctmp) = 0;
    if ( $(rrefrblur) > 0 )
    {
      gather( "illuminance", P, $(refrDir), $(rrefrblur) * radians(5), 
        $(xsamples),
        "label", "b_refr",
        "subset", $(traceset),
        "maxdist", $(maxdist),
#ifdef DELIGHT
        "surface:Ci", $(hci)
#else        
        "volume:Ci", $(hci)
#endif        
      )
      {
        $(ctmp) += $(hci);
      }
      else
      {
        illuminance( "environment", P + vector(0), $(Ns), 1.57,
          "send:light:__coneaxis", $(refrDir) )
        {
          $(ctmp) += Cl;
        }
      }
    }
    else
    {
      gather( "illuminance", P, $(refrDir), 0, 
        $(xsamples),
        "label", "refraction",
        "subset", $(traceset),
        "maxdist", $(maxdist),
#ifdef DELIGHT
        "surface:Ci", $(hci)
#else        
        "volume:Ci", $(hci)
#endif         
      )
      {
        $(ctmp) += $(hci);
      }
      else
      {
        illuminance( "environment", P + vector(0), $(Ns), 1.57,
          "send:light:__coneaxis", $(refrDir) )
        {
          $(ctmp) += Cl;
        }
      }       
    }
    $(c_refraction) = $(kt) * $(crefr) * $(ctmp) / $(xsamples); 
    $(result) += $(c_refraction);
  }
  ]]>
	</code>	
</node>
