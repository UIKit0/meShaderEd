<?xml version="1.0"?>

<node name="me_Minnaert" author="mesh" icon="me_Minnaert.png">
	<help>Specular function (Minnaert BRDF) based on code from Brent Watkins Advanced Digital Cinematography HW6</help>
	<input>
	  <property name="Nf" type="normal" default="normal(0,0,0)" />	
		<property name="category" type="string" default=""/>
		<property name="Coloration" type="color" default="color( 1, 1, 1 )"/>
		<property name="Kd" type="float" default="1.0" subtype="slider" range="0 1 0.001"/>
		<property name="k" type="float" default="0.5" subtype="slider" range="0 1 0.001">
		<help>limb darkening.  for k=1, equivalent to lambertian lighting</help>
		</property>
	</input>
	<output>
		<property name="result" type="color" default="color ( 0, 0, 0 )"/>	
	</output>
	<include>
	</include>	
	<internal>
	  <variable name="V"/>
	  <variable name="cminnaert"/>
	  <variable name="ndotl"/>
	  <variable name="ndotv"/>
	  <variable name="outfact"/>
	</internal>
	<code>
  <![CDATA[
	  vector $(V) = -normalize(I);
	  color $(cminnaert) = 0;
	  float $(ndotl) = 0;

	  illuminance( $(category), P, $(Nf), PI/2 )
	  {
	    extern vector L;
	    $(ndotl) = max ( 0, ( normalize ( L ) ).$(Nf) );
	    $(cminnaert) += Cl * pow ( $(ndotl), $(k) );
	  }
	  float $(ndotv) = max ( 0, $(Nf).$(V) );
	  float $(outfact) = pow ( $(ndotv), $(k) - 1 );
	  $(cminnaert) *= $(outfact);

	  $(result) = $(Coloration) * $(Kd) * $(cminnaert);
	  
	  /* NVidia version ???
	  
	  illuminance( P, Nf, PI/2 )
	  {
	    extern vector L;
	    ndotl = max(0, (normalize(L)).Nf);
	    cminnaert += Cl*pow(ndotl, k);
	  }
	  vector V = -normalize(I);
	  float ndotv = max(0, Nf.V);
	  float outfact = pow(ndotv, k-1);
	  cminnaert *= outfact;

	  result = SurfaceColor * Kd * cminnaert;
	  */
  ]]>
	</code>
</node>
