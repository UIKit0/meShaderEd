<?xml version="1.0"?>

<node name="me_translucence" author="mesh" icon="me_translucence.png">
	<help>Component for approximating back-lit translucence in a thin
        surface (like a leaf or a piece of paper).</help>
	<input>
	  <property name="Ns" type="normal" default="normal(0,0,0)" />	
		<property name="category" type="string" default="">
		<help></help>
		</property>
		<property name="Kth" label="Intensity" type="float" default="1.0" subtype="slider" range="0 1 0.001">
		<help>Intensity of thin translucence component</help>
		</property>
		<property name="coloration" type="color" default="color( 1, 1, 1 )">
		<help>Color of thin translucence component</help>
		</property>
		
		<property name="Creep" type="float" default="0" subtype="slider" range="0 1 0.01">
		<help>Degree to which light creeps to the front</help>
		</property>
		
		<property name="flipNormal" label="Back Illumination" type="float" default="1" subtype="switch">
		<help></help>
		</property>
	</input>
	<output>
		<property name="result" type="color" default="color ( 0, 0, 0 )"/>	
	</output>
	<include>
	</include>
	<internal>
	  <variable name="Nback"/>
	  <variable name="terminate"/>
	</internal>
	<code>
  <![CDATA[
  $(result) = 0;

  normal $(Nback) = $(Ns);
  
  if ( $(flipNormal) > 0 )
  {
    $(Nback) = -$(Nback);
  }
  /* creep back terminator */
  float $(terminate) = (1 + $(Creep) ) * 1.57;
  
  illuminance( $(category), P, $(Nback), $(terminate) )
  {
    /* creep diffuse brdf into a cardioid */
    float ndl = normalize(L).$(Nback);
    float thin = ( ndl + $(Creep) ) / ( 1 + $(Creep) );
    $(result) += Cl * max( thin, 0 );
  }
  $(result) *= $(coloration) * $(Kth);
  ]]>
	</code>	
</node>
