<?xml version="1.0"?>

<node name="me_CookTorrance2" author="Scott Eaton" icon="me_CookTorrance2.png">
	<help>A simple implementation of the Cook-Torrance shading model describe in:  
  A Reflectance Model for Computer Graphics R. L. Cook, K. E. Torrance, ACM Transactions on Graphics 1982</help>
	<input>
	  <property name="Nn" type="normal" default="normal(0,0,0)" />	
		<property name="category" type="string" default=""/>
		<property name="Coloration" type="color" default="color( 1, 1, 1 )"/>
		<property name="Ks" type="float" default="0.15" subtype="slider" range="0 1 0.001"/>
		<property name="IOR" label="IndexOfRefraction" type="float" default="1.3" subtype="slider" range="0 2 0.001">
		<help>Index of refraction for the surface</help>
		</property>
		<property name="roughness" type="float" default="0.2" subtype="slider" range="0 1 0.001">
		<help>Root-mean-square slope of surface microfacets</help>
		</property>
		<property name="gaussConstant" type="float" default="100"/>
	</input>
	<output>
		<property name="result" type="color" default="color ( 0, 0, 0 )"/>	
	</output>
	<include>
	</include>	
	<internal>
	  <variable name="Vn"/>
	  <variable name="cook"/>
	  <variable name="F"/>
	  <variable name="Ktransmit"/>
	  <variable name="m"/>
	  <variable name="NdotV"/>
	</internal>
	<code>
  <![CDATA[
  vector $(Vn) = normalize(-I);
  float $(F), $(Ktransmit);
  float $(m) = $(roughness);
  fresnel( normalize(I), $(Nn), $(IOR), $(F), $(Ktransmit) );
  
  color $(cook) = 0;
  float $(NdotV) = $(Nn).$(Vn);
  
  illuminance( $(category), P, $(Nn), PI/2 )
  {
    float nonspec = 0;
    lightsource( "__nonspecular", nonspec );
    if ( nonspec < 1 )
    {  
      /* half angle vector */
      vector Ln = normalize( L );
      vector H = normalize( $(Vn) + Ln );
      
      float NdotH = $(Nn).H;
      float NdotL = $(Nn).Ln;
      float VdotH = $(Vn).H;
      
      float D;
      float alpha = acos( NdotH );
      
      /* microfacet distribution */
      D = $(gaussConstant) * exp( -( alpha*alpha )/( $(m)*$(m) ) );
      
      /* geometric attenuation factor */
      float G = min( 1, min( ( 2*NdotH*$(NdotV) / VdotH ), ( 2*NdotH*NdotL / VdotH ) ) );
      
      /* sum contributions */
      $(cook) += Cl * ($(F)*D*G) / ( PI*$(NdotV) );
    }
  }
  $(result) = $(Coloration) * $(Ks) * $(cook) / PI;
  ]]>
	</code>
</node>
