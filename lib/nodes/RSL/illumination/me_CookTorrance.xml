<?xml version="1.0"?>

<node name="me_CookTorrance" author="mesh" icon="me_CookTorrance.png">
	<help>Specular function (Cook-Torrance BRDF) based on code from Brent Watkins Advanced Digital Cinematography HW6</help>
	<input>
	  <property name="Nf" type="normal" default="normal(0,0,0)" />	
		<property name="category" type="string" default=""/>
		<property name="Coloration" type="color" default="color( 1, 1, 1 )"/>
		<property name="Ks" type="float" default="0.15" subtype="slider" range="0 1 0.001"/>
		<property name="IndexOfRefraction" type="float" default="0.3" subtype="slider" range="0 2 0.001">
		<help>Index of refraction for the surface</help>
		</property>
		<property name="m" type="float" default="0.1" subtype="slider" range="0 1 0.001">
		<help>Root-mean-square slope of surface microfacets</help>
		</property>
	</input>
	<output>
		<property name="result" type="color" default="color ( 0, 0, 0 )"/>	
	</output>
	<include>
	</include>	
	<internal>
	  <variable name="V"/>
	  <variable name="cook"/>
	  <variable name="vdotn"/>
	  <variable name="distro"/>
	  <variable name="geom"/>
	  <variable name="fresnel_hack"/>
	</internal>
	<code>
  <![CDATA[
  /* microfacet distribution function */
	  float $(distro) ( normal Nn;
		        vector H;
			float m; )
	  {
	    float ndoth = Nn.H;
	    float beta = acos( ndoth );
	    float tanbeta = tan( beta );
	    float tanbeta_over_m = tanbeta/m;
	    float D = exp(-(tanbeta_over_m*tanbeta_over_m));
	    D /= 4*m*m*pow(ndoth,4);
	    return D;
	  }
	/* geometric attenuation factor */
	  float $(geom) ( normal Nn;
		      vector H;
		      vector L;
		      vector V )
	  {
	    float ndoth = Nn.H;
	    float ndotv = Nn.V;
	    float ndotl = Nn.L;
	    float vdoth = V.H;

	    float masking = 2*ndoth*ndotv/vdoth;
	    float shadowing = 2*ndoth*ndotl/vdoth;
	    return min(1,min(masking,shadowing));
	  }

	  /* fresnel conductance term - using the faster approximation */
    float $(fresnel_hack) ( normal Nn;
			      normal V;
			      float n; )
	  {
	    float ndotv = N.V;

	    float foo = pow(1-ndotv, 5);
	    return 1-foo + n*foo;
	  }
	  
	  vector $(V) = -normalize(I);

	  float $(cook) = 0;
	  illuminance( P, $(Nf), PI/2 )
	  {
	    vector Ln = normalize(L);
	    vector H = normalize( Ln + $(V) );
	    float D = $(distro) ( $(Nf), H, $(m) );
	    float G = $(geom) ( $(Nf), H, Ln, $(V) );
	    float F = $(fresnel_hack) ( $(Nf), $(V), $(IndexOfRefraction) );

	    $(cook) += D*G*F;
	  }
	  float $(vdotn) = $(V).$(Nf);
	  $(cook) /= $(vdotn);
	  /* normalize - preserves conservation of energy */
	  $(cook) /= PI;

	  $(result) = $(Coloration) * $(Ks) * $(cook);
  ]]>
	</code>
</node>
