<?xml version="1.0"?>

<node name="me_anisotropic" author="mesh" icon="me_anisotropic.png">
	<help>Based on Greg Ward Larson's anisotropic specular local illumination model.</help>
	<input>
	  <property name="Nf" type="normal" default="normal(0,0,0)" />	
		<property name="category" type="string" default="">
		<help></help>
		</property>
		<property name="Ks" type="float" default="0.8" subtype="slider" range="0 1 0.001">
		<help>Multiplier for the specular light contribution</help>
		</property>
		<property name="URoughness" type="float" default="0.15" subtype="slider" range="0 1 0.001">
		<help>The apparent roughness of the surface in xdir.</help>
		</property>
		<property name="VRoughness" type="float" default="0.15" subtype="slider" range="0 1 0.001">
		<help>The apparent roughness of the surface in ydir.</help>
		</property>
		<property name="coloration" label="SpecularColor" type="color" default="color( 1, 1, 1 )">
		<help>Color of thin translucence component</help>
		</property>
	</input>
	<output>
		<property name="result" type="color" default="color ( 0, 0, 0 )"/>	
	</output>
	<include>
	<file name="patterns.h"/>
	</include>
	<internal>
	  <variable name="WardAnisotropic"/>
	</internal>
	<code>
  <![CDATA[
 /*
  * Greg Ward Larson's anisotropic specular local illumination model.
  * The derivation and formulae can be found in:  Ward, Gregory J.
  * "Measuring and Modeling Anisotropic Reflection," ACM Computer 
  * Graphics 26(2) (Proceedings of Siggraph '92), pp. 265-272, 7/92.
  * Notice that compared to the paper, the implementation below appears
  * to be missing a factor of 1/pi, and to have an extra L.N term.
  * This is not an error!  It is because the paper's formula is for the
  * BRDF, which is only part of the kernel of the light integral, whereas
  * shaders must compute the result of the integral.
  *
  * Inputs:
  *   N - unit surface normal
  *   V - unit viewing direction (from P toward the camera)
  *   xdir - a unit tangent of the surface defining the reference
  *          direction for the anisotropy.
  *   xroughness - the apparent roughness of the surface in xdir.
  *   yroughness - the roughness for the direction of the surface 
  *          tangent perpendicular to xdir.
  */
  
  color $(WardAnisotropic) ( uniform string category; normal N;  vector V; vector xdir; float xroughness, yroughness; )
  {
    float cos_theta_r = clamp (N.V, 0.0001, 1);
    vector X = xdir / xroughness;
    vector Y = (N ^ xdir) / yroughness;
    
    color C = 0;
    extern point P;
    illuminance (category,P, N, PI/2) 
    {
      /* Must declare extern L & Cl because we're in a function */
      extern vector L;  extern color Cl; 
      float nonspec = 0;
      lightsource ("__nonspecular", nonspec);
      if (nonspec < 1) 
      {
        vector LN = normalize (L);
        float cos_theta_i = LN . N;
        if (cos_theta_i > 0.0) 
        {
           vector H = normalize (V + LN);
           float rho = exp (-2 * (sqr(X.H) + sqr(Y.H)) / (1 + H.N)) / sqrt (cos_theta_i * cos_theta_r);
           C += Cl * ((1-nonspec) * cos_theta_i * rho);
        }
      }
    }
    return C / (4 * xroughness * yroughness);
  }
  $(result) = $(coloration) * $(Ks) * $(WardAnisotropic) ( $(category), $(Nf), -normalize(I), normalize(dPdu), $(URoughness), $(VRoughness) );
  ]]>
	</code>	
</node>
