#===============================================================================
# rslNode.py
#
# 
#
#===============================================================================
import os, sys
from PyQt4 import QtCore

from core.node import Node
from core.nodeParam import NodeParam

from global_vars import app_global_vars
from core.node_global_vars import node_global_vars
#
# ImageNode
#
class RSLNode ( Node ):
  #
  #
  def __init__ ( self, xml_node = None ):
    #
    Node.__init__ ( self, xml_node )
    self.shaderName = ''
    print ">> RSLNode __init__" 
  #
  #
  def computeNode ( self ) :
    print '>> RSLNode (%s).computeNode' % self.label
    #
    self.computed_code = ''
    self.execParamCode ()
    
    visitedNodes = set()
    shaderCode = ''
    shaderCode = self.collectComputed ( shaderCode, visitedNodes )
    
    #for node in self.childs :
    #  print '=> %s' % node.label
    
    rslHeader = '/* Generated by meShaderEd */\n\n'
    
    self.shaderName = app_global_vars[ 'ProjectSources' ] + '/' + self.getInstanceName() + '.sl'
    print '>> RSLNode save file %s' % self.shaderName
    f = open ( self.shaderName, 'w+t' )
    
    # includes are stored in set to prevent duplication 
    for include in set( self.computedIncludes ) :
      rslHeader += '#include \"' + include + '\"\n'
        
    if self.type == 'surface' :
      rslHeader += '#define SURFACE_SHADER %s\n' % self.getInstanceName() 
      rslHeader += 'surface %s ' % self.getInstanceName()
    elif self.type == 'displacement' :
      rslHeader += '#define DISPLACEMENT_SHADER %s\n' % self.getInstanceName() 
      rslHeader += 'displacement %s ' % self.getInstanceName()
    
    rslHeader += '(\n'
    
    rslHeader += self.parseGlobalVars ( self.computedInputParams )
    #rslHeader += self.parseGlobalVars ( self.computedOutputParams )
    # output parameters are stored in set to prevent duplication 
    for out_param in set( self.computedOutputParams ) :
      rslHeader += out_param
    
    rslHeader += ')\n'
    rslHeader += '{\n'
    rslHeader += self.parseGlobalVars ( self.computedLocalParams )
    
    rslCode = self.parseGlobalVars ( shaderCode )
    
    rslCode += '\n}\n'
    
    f.write ( rslHeader + rslCode )
    f.close ()

    from meShaderEd import app_renderer
    
    compiler =  app_global_vars[ 'ShaderCompiler' ]
    defines_str = app_global_vars[ 'ShaderDefines' ]
    includes_str = app_global_vars[ 'IncludePath' ]
    
    shaderCmd = [ compiler ]
    
    if includes_str != '' :  
      includes_lst = includes_str.split( ',' )
      for include in includes_lst :
        shaderCmd.append ( '-I' + include.strip() )    
    
    if defines_str != '' :  
      defines_lst = defines_str.split( ',' )
      for define in defines_lst :
        shaderCmd.append ( '-D' + define.strip() )  
      
    shaderCmd.append ( self.shaderName )
    
    print '>> RSLNode shaderCmd = %s' %  ' '.join( shaderCmd ) 
    
    import subprocess, errno
    
    os.chdir (  app_global_vars[ 'ProjectShaders' ] )
    
    # call the process
    try:
    	retval = subprocess.call( shaderCmd, 0, None, None )
    except OSError, e:
    	if e.errno != errno.EINTR:
    		raise 
    
    return self.getInstanceName()
      